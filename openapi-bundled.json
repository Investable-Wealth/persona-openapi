{
  "openapi": "3.1.0",
  "info": {
    "title": "Persona API Reference",
    "version": "2023-01-05",
    "license": {
      "name": "Apache 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "contact": {
      "name": "Persona Support",
      "url": "https://help.withpersona.com/",
      "email": "support@withpersona.com"
    }
  },
  "servers": [
    {
      "url": "https://withpersona.com/api/v1"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "tags": [
    {
      "name": "Accounts",
      "description": "Interact with Persona Account objects"
    },
    {
      "name": "API Keys",
      "description": "Interact with your organization's API keys"
    },
    {
      "name": "API Logs",
      "description": "View your organization's API logs"
    },
    {
      "name": "Cases",
      "description": "Interact with Persona Case objects"
    },
    {
      "name": "Devices",
      "description": "Interact with Persona Device objects"
    },
    {
      "name": "Documents",
      "description": "Interact with Persona Document objects"
    },
    {
      "name": "Events",
      "description": "Endpoints for viewing your organization's events"
    },
    {
      "name": "Importers",
      "description": "Import external data as corresponding objects within Persona"
    },
    {
      "name": "Inquiries",
      "description": "Interact with Persona Inquiry objects"
    },
    {
      "name": "Inquiry Sessions",
      "description": "Interact with Persona Inquiry Session objects"
    },
    {
      "name": "List Items",
      "description": "Interact with Persona List Item objects"
    },
    {
      "name": "Lists",
      "description": "Interact with Persona List objects"
    },
    {
      "name": "OAuth",
      "description": "Share access to a Persona object with another organization"
    },
    {
      "name": "Reports",
      "description": "Interact with Persona Report objects"
    },
    {
      "name": "Transactions",
      "description": "Interact with Persona Transaction objects"
    },
    {
      "name": "User Audit Logs",
      "description": "View your organization's User Audit logs"
    },
    {
      "name": "Verifications",
      "description": "Interact with Persona Verification objects"
    },
    {
      "name": "Phone Carrier Database Verifications",
      "description": "Interact with Phone Carrier Database Verifications"
    },
    {
      "name": "Serpro Database Verifications",
      "description": "Interact with Serpro Database Verifications"
    },
    {
      "name": "TIN Database Verifications",
      "description": "Interact with TIN Database Verifications"
    },
    {
      "name": "Database Verifications",
      "description": "Interact with Database Verifications"
    },
    {
      "name": "Database Standard Verifications",
      "description": "Interact with Database Standard Verifications"
    },
    {
      "name": "Document Verifications",
      "description": "Interact with Document Verifications"
    },
    {
      "name": "Email Address Verifications",
      "description": "Interact with Email Address Verifications"
    },
    {
      "name": "Government ID Verifications",
      "description": "Interact with Government ID Verifications"
    },
    {
      "name": "Phone Number Verifications",
      "description": "Interact with Phone Number Verifications"
    },
    {
      "name": "Selfie Verifications",
      "description": "Interact with Selfie Verifications"
    },
    {
      "name": "Webhooks",
      "description": "Interact with Webhooks via API"
    },
    {
      "name": "Workflows",
      "description": "Interact with Persona Workflow objects"
    }
  ],
  "externalDocs": {
    "description": "Full API documentation on the Persona website",
    "url": "https://docs.withpersona.com/reference"
  },
  "paths": {
    "/accounts": {
      "get": {
        "description": "Returns a list of your organization's <<glossary:account>>(s).",
        "operationId": "list-all-accounts",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/list-all-accounts"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "in": "query",
            "name": "page",
            "style": "deepObject",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/nested-pagination-query-params"
                },
                {
                  "type": "object",
                  "properties": {
                    "after": {
                      "example": "act_ABC123"
                    },
                    "before": {
                      "example": "act_ABC123"
                    }
                  }
                }
              ]
            }
          },
          {
            "in": "query",
            "name": "filter",
            "style": "deepObject",
            "schema": {
              "type": "object",
              "properties": {
                "reference-id": {
                  "description": "Filter accounts by reference ID",
                  "type": "string"
                }
              }
            }
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "OK",
                    "value": {
                      "data": [
                        {
                          "type": "account",
                          "id": "act_ef2mUFHAejxf2XJ5qzU4uMQb",
                          "attributes": {
                            "reference-id": null,
                            "created-at": "2020-01-02T17:42:27.000Z",
                            "updated-at": "2020-01-02T18:06:41.000Z"
                          }
                        },
                        {
                          "type": "account",
                          "id": "act_YcNZJLxuwEuV8jUPbykYQyXG",
                          "attributes": {
                            "reference-id": "Mike's test",
                            "created-at": "2019-12-19T21:42:49.000Z",
                            "updated-at": "2019-12-19T21:42:49.000Z"
                          }
                        },
                        {
                          "type": "account",
                          "id": "act_2wM8yufwLrbMV6kUtGPBxeGS",
                          "attributes": {
                            "reference-id": null,
                            "created-at": "2019-12-18T22:43:03.000Z",
                            "updated-at": "2019-12-18T22:43:03.000Z"
                          }
                        },
                        {
                          "type": "account",
                          "id": "act_LatvE1PdVhfiwcJWVLj4Z25j",
                          "attributes": {
                            "reference-id": null,
                            "created-at": "2019-12-13T08:34:10.000Z",
                            "updated-at": "2019-12-13T08:34:10.000Z"
                          }
                        },
                        {
                          "type": "account",
                          "id": "act_RU3JgzXaAzVV2g2NYLd7ub12",
                          "attributes": {
                            "reference-id": null,
                            "created-at": "2019-12-13T08:32:49.000Z",
                            "updated-at": "2019-12-13T08:33:29.000Z"
                          }
                        },
                        {
                          "type": "account",
                          "id": "act_Eoe14YQ7efbiH73zkTFAkveB",
                          "attributes": {
                            "reference-id": null,
                            "created-at": "2019-12-12T20:50:55.000Z",
                            "updated-at": "2019-12-12T20:50:55.000Z"
                          }
                        },
                        {
                          "type": "account",
                          "id": "act_X5LmoEaYASq3ahQmRRTpMG1t",
                          "attributes": {
                            "reference-id": null,
                            "created-at": "2019-12-05T20:56:43.000Z",
                            "updated-at": "2019-12-05T20:56:43.000Z"
                          }
                        },
                        {
                          "type": "account",
                          "id": "act_6LRELcKmPcx9MxYGk6mdCPJo",
                          "attributes": {
                            "reference-id": null,
                            "created-at": "2019-11-19T00:10:27.000Z",
                            "updated-at": "2019-11-19T00:10:27.000Z"
                          }
                        },
                        {
                          "type": "account",
                          "id": "act_1bRzHZSH17PpXCCnMGoYhzde",
                          "attributes": {
                            "reference-id": null,
                            "created-at": "2019-11-18T17:38:03.000Z",
                            "updated-at": "2019-11-18T17:38:03.000Z"
                          }
                        },
                        {
                          "type": "account",
                          "id": "act_u2Dgz8U3CmxTVgqEH9qzezHi",
                          "attributes": {
                            "reference-id": null,
                            "created-at": "2019-11-15T22:14:41.000Z",
                            "updated-at": "2019-11-15T22:14:41.000Z"
                          }
                        }
                      ],
                      "links": {
                        "prev": null,
                        "next": "/api/v1/accounts?page%5Bafter%5D=act_u2Dgz8U3CmxTVgqEH9qzezHi"
                      }
                    }
                  }
                },
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/account"
                      },
                      "type": "array",
                      "description": "An array of Accounts"
                    },
                    "links": {
                      "properties": {
                        "next": {
                          "examples": [
                            "/api/v1/accounts?page%5Bafter%5D=act_u2Dgz8U3CmxTVgqEH9qzezHi"
                          ],
                          "type": "string"
                        },
                        "prev": {}
                      },
                      "type": "object"
                    },
                    "included": {
                      "$ref": "#/components/schemas/empty-included-objects"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "List all Accounts",
        "tags": [
          "Accounts"
        ]
      },
      "post": {
        "description": "Creates a new Account for your organization.",
        "operationId": "create-an-account",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/create-an-account"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "data": {
                    "properties": {
                      "attributes": {
                        "properties": {},
                        "allOf": [
                          {
                            "type": "object",
                            "properties": {
                              "reference-id": {
                                "description": "Reference ID on Account, refers to an entity in your user model",
                                "type": "string"
                              },
                              "selfie-photo": {
                                "description": "Selfie photo.",
                                "properties": {
                                  "data": {
                                    "description": "Selfie photo data, must be an image. Can also be provided as an uploaded file such as with multipart/form-data requests instead of this object.",
                                    "properties": {
                                      "data": {
                                        "description": "Base64 encoded image",
                                        "type": "string"
                                      },
                                      "filename": {
                                        "description": "Name of the image",
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "tags": {
                                "description": "A list of tag names to be associated with the Account.",
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "country-code": {
                                "description": "ISO 3166-1 alpha 2 country code.",
                                "examples": [
                                  "US"
                                ],
                                "type": [
                                  "string",
                                  "null"
                                ]
                              },
                              "social-security-number": {
                                "description": "Social security number.",
                                "examples": [
                                  "123-45-6789"
                                ],
                                "type": [
                                  "string",
                                  "null"
                                ]
                              }
                            }
                          },
                          {
                            "$ref": "#/components/schemas/default-fields"
                          }
                        ]
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "Created",
                    "$ref": "#/components/examples/account"
                  }
                },
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/account"
                    },
                    "included": {
                      "$ref": "#/components/schemas/empty-included-objects"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Create an Account",
        "tags": [
          "Accounts"
        ]
      }
    },
    "/accounts/{account-id}": {
      "delete": {
        "description": "Permanently deletes personally identifiable information (PII) for an Account and all associated Inquiries, Verifications and Reports. **This action cannot be undone**.\n\nThis endpoint can be used to comply with privacy regulations such as GDPR / CCPA or to enforce data privacy.\n\nNote: An account is still updatable after redaction. If you want to delete data continuously, please reach out to us to help you setup a retention policy.",
        "operationId": "redact-an-account",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/redact-an-account"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          },
          {
            "name": "account-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "OK",
                    "$ref": "#/components/examples/account"
                  }
                },
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/account"
                    },
                    "included": {
                      "$ref": "#/components/schemas/empty-included-objects"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Redact an Account",
        "tags": [
          "Accounts"
        ]
      },
      "get": {
        "description": "Retrieves the details of an existing Account.",
        "operationId": "retrieve-an-account",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/retrieve-an-account"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          },
          {
            "name": "account-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "OK",
                    "$ref": "#/components/examples/account"
                  }
                },
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/account"
                    },
                    "included": {
                      "$ref": "#/components/schemas/empty-included-objects"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Retrieve an Account",
        "tags": [
          "Accounts"
        ]
      },
      "patch": {
        "description": "Updates an existing Account.",
        "operationId": "update-an-account",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/update-an-account"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          },
          {
            "name": "account-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "data": {
                    "properties": {
                      "attributes": {
                        "properties": {},
                        "allOf": [
                          {
                            "type": "object",
                            "properties": {
                              "reference-id": {
                                "description": "Reference ID on Account, refers to an entity in your user model",
                                "type": "string"
                              },
                              "selfie-photo": {
                                "description": "Selfie photo.",
                                "properties": {
                                  "data": {
                                    "description": "Selfie photo data, must be an image. Can also be provided as an uploaded file such as with multipart/form-data requests instead of this object.",
                                    "properties": {
                                      "data": {
                                        "description": "Base64 encoded image",
                                        "type": "string"
                                      },
                                      "filename": {
                                        "description": "Name of the image",
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "tags": {
                                "description": "A list of tag names to be associated with the Account.",
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "country-code": {
                                "description": "ISO 3166-1 alpha 2 country code.",
                                "examples": [
                                  "US"
                                ],
                                "type": [
                                  "string",
                                  "null"
                                ]
                              },
                              "social-security-number": {
                                "description": "Social security number.",
                                "examples": [
                                  "123-45-6789"
                                ],
                                "type": [
                                  "string",
                                  "null"
                                ]
                              }
                            }
                          },
                          {
                            "$ref": "#/components/schemas/default-fields"
                          }
                        ]
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "OK",
                    "$ref": "#/components/examples/account"
                  }
                },
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/account"
                    },
                    "included": {
                      "$ref": "#/components/schemas/empty-included-objects"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Update an Account",
        "tags": [
          "Accounts"
        ]
      }
    },
    "/accounts/{account-id}/add-tag": {
      "post": {
        "description": "Adds a new tag to an Account",
        "operationId": "accounts-add-tag",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/accounts-add-tag"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          },
          {
            "name": "account-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "meta": {
                    "properties": {
                      "tag-name": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/account"
                    },
                    "included": {
                      "$ref": "#/components/schemas/empty-included-objects"
                    }
                  },
                  "type": "object"
                },
                "examples": {
                  "Result": {
                    "summary": "OK",
                    "$ref": "#/components/examples/account"
                  }
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Add tag to an Account",
        "tags": [
          "Accounts"
        ]
      }
    },
    "/accounts/{account-id}/consolidate": {
      "post": {
        "description": "Consolidates several source Accounts' information into one target Account. Any Persona resource associated with the source Account will be transferred over to the destination Account. However, the Account's attributes will **not** be transferred. After consolidation, you can update the destination Account's attributes using the [Account update endpoint](https://docs.withpersona.com/reference/update-an-account).\n\nThis endpoint can be used to clean up duplicate Accounts.\n\nNote: A source account can only be consolidated once. Afterwards, the source account will be archived.",
        "operationId": "consolidate-into-an-account",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/consolidate-into-an-account"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          },
          {
            "description": "Destination Account ID",
            "in": "path",
            "name": "account-id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "meta": {
                    "properties": {
                      "source-account-ids": {
                        "description": "A list of Account IDs that need to be consolidated into the destination Account.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "Accepted",
                    "$ref": "#/components/examples/account"
                  }
                },
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/account"
                    },
                    "included": {
                      "$ref": "#/components/schemas/empty-included-objects"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Accepted"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Consolidate Accounts",
        "tags": [
          "Accounts"
        ]
      }
    },
    "/accounts/{account-id}/remove-tag": {
      "post": {
        "description": "Removes an existing tag from an Account",
        "operationId": "accounts-remove-tag",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/accounts-remove-tag"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          },
          {
            "name": "account-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "meta": {
                    "properties": {
                      "tag-name": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/account"
                    },
                    "included": {
                      "$ref": "#/components/schemas/empty-included-objects"
                    }
                  },
                  "type": "object"
                },
                "examples": {
                  "Result": {
                    "summary": "OK",
                    "$ref": "#/components/examples/account"
                  }
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Remove tag from an Account",
        "tags": [
          "Accounts"
        ]
      }
    },
    "/accounts/{account-id}/set-tags": {
      "post": {
        "description": "Sets all tags on an Account. Any tags that are not provided in the request will be removed.",
        "operationId": "accounts-set-all-tags",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/accounts-set-all-tags"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          },
          {
            "name": "account-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "meta": {
                    "properties": {
                      "tag-name": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/account"
                    },
                    "included": {
                      "$ref": "#/components/schemas/empty-included-objects"
                    }
                  },
                  "type": "object"
                },
                "examples": {
                  "Result": {
                    "summary": "OK",
                    "$ref": "#/components/examples/account"
                  }
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Set tags on an Account",
        "tags": [
          "Accounts"
        ]
      }
    },
    "/api-keys": {
      "get": {
        "description": "Returns a list of your organization's API keys.",
        "operationId": "list-all-api-keys",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/list-all-api-keys"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          },
          {
            "in": "query",
            "name": "page",
            "style": "deepObject",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/nested-pagination-query-params"
                },
                {
                  "type": "object",
                  "properties": {
                    "after": {
                      "example": "api_ABC123"
                    },
                    "before": {
                      "example": "api_ABC123"
                    }
                  }
                }
              ]
            }
          },
          {
            "in": "query",
            "name": "filter",
            "style": "deepObject",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Filter API keys by name"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "OK",
                    "$ref": "#/components/examples/api-key-list"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/api-key"
                      },
                      "type": "array",
                      "description": "An array of API Keys"
                    },
                    "links": {
                      "properties": {
                        "next": {
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "prev": {
                          "type": [
                            "string",
                            "null"
                          ]
                        }
                      },
                      "type": "object"
                    },
                    "included": {
                      "$ref": "#/components/schemas/empty-included-objects"
                    }
                  }
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "List all API keys",
        "tags": [
          "API Keys"
        ]
      },
      "post": {
        "description": "Creates a new API key with response defaults and permissions.",
        "operationId": "create-an-api-key",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/create-an-api-key"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/api-key-request"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "OK",
                    "$ref": "#/components/examples/api-key-with-value"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/api-key-with-value"
                    },
                    "included": {
                      "$ref": "#/components/schemas/empty-included-objects"
                    }
                  }
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Create an API key",
        "tags": [
          "API Keys"
        ]
      }
    },
    "/api-keys/{api-key-id}": {
      "get": {
        "description": "Retrieves the information for an existing API key, including its value.",
        "operationId": "retrieve-an-api-key",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/retrieve-an-api-key"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          },
          {
            "description": "API key's ID (starts with \"api_\")",
            "in": "path",
            "name": "api-key-id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "OK",
                    "$ref": "#/components/examples/api-key-with-value"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/api-key-with-value"
                    },
                    "included": {
                      "$ref": "#/components/schemas/empty-included-objects"
                    }
                  }
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Retrieve an API key",
        "tags": [
          "API Keys"
        ]
      },
      "patch": {
        "description": "Updates an existing API key.",
        "operationId": "update-an-api-key",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/update-an-api-key"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          },
          {
            "description": "API key's ID (starts with \"api_\")",
            "in": "path",
            "name": "api-key-id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/api-key-request"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "OK",
                    "$ref": "#/components/examples/api-key"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/api-key"
                    },
                    "included": {
                      "$ref": "#/components/schemas/empty-included-objects"
                    }
                  }
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Update an API key",
        "tags": [
          "API Keys"
        ]
      }
    },
    "/api-keys/{api-key-id}/expire": {
      "post": {
        "description": "Deactivates an API key within some time period",
        "operationId": "expire-an-api-key",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/expire-an-api-key"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          },
          {
            "description": "API key's ID (starts with \"api_\")",
            "in": "path",
            "name": "api-key-id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "meta": {
                    "properties": {
                      "expires-in-seconds": {
                        "description": "Number of seconds from now to expire the key (max of 30 days)",
                        "type": "integer"
                      }
                    },
                    "required": [
                      "expires-in-seconds"
                    ],
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "OK",
                    "$ref": "#/components/examples/api-key"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/api-key"
                    },
                    "included": {
                      "$ref": "#/components/schemas/empty-included-objects"
                    }
                  }
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Expire an API key",
        "tags": [
          "API Keys"
        ]
      }
    },
    "/api-logs": {
      "get": {
        "description": "Returns a list of your organization's API Logs.",
        "operationId": "list-all-api-logs",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/list-all-api-logs"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          },
          {
            "in": "query",
            "name": "page",
            "style": "deepObject",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/nested-pagination-query-params"
                },
                {
                  "type": "object",
                  "properties": {
                    "after": {
                      "example": "req_ABC123"
                    },
                    "before": {
                      "example": "req_ABC123"
                    }
                  }
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "OK",
                    "$ref": "#/components/examples/api-log-list"
                  }
                },
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/api-log"
                      },
                      "type": "array",
                      "description": "An array of API Logs"
                    },
                    "links": {
                      "properties": {
                        "next": {
                          "examples": [
                            "/api/v1/api-logs?page%5Bafter%5D=req_19pQg1NHfYeUdpIvYZ54xmDz"
                          ],
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "prev": {
                          "examples": [
                            "/api/v1/api-logs?page%5Bbefore%5D=req_1ePP8j3pyznPCEuw4TCjWWD0"
                          ],
                          "type": [
                            "string",
                            "null"
                          ]
                        }
                      },
                      "type": "object"
                    },
                    "included": {
                      "$ref": "#/components/schemas/empty-included-objects"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "List all API Logs",
        "tags": [
          "API Logs"
        ]
      }
    },
    "/api-logs/{api-log-id}": {
      "get": {
        "description": "Retrieves the details of an existing API Log.",
        "operationId": "retrieve-an-api-log",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/retrieve-an-api-log"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          },
          {
            "name": "api-log-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "OK",
                    "$ref": "#/components/examples/api-log"
                  }
                },
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/api-log"
                    },
                    "included": {
                      "$ref": "#/components/schemas/empty-included-objects"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Retrieve an API Log",
        "tags": [
          "API Logs"
        ]
      }
    },
    "/cases": {
      "get": {
        "description": "Returns a list of your organization's cases.\n\nNote that this endpoint aggregates cases across all <<glossary:case template>>(s). See [Pagination](https://docs.withpersona.com/reference/pagination)for more details about handling the response.",
        "operationId": "list-all-cases",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/list-all-cases"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "in": "query",
            "name": "page",
            "style": "deepObject",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/nested-pagination-query-params"
                },
                {
                  "type": "object",
                  "properties": {
                    "after": {
                      "example": "case_ABC123"
                    },
                    "before": {
                      "example": "case_ABC123"
                    }
                  }
                }
              ]
            }
          },
          {
            "in": "query",
            "name": "filter",
            "style": "deepObject",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "description": "Filter cases by status",
                  "examples": [
                    "Open"
                  ],
                  "type": "string"
                },
                "resolution": {
                  "description": "Filter cases by resolution",
                  "type": "string"
                },
                "case-template-id": {
                  "description": "Filter cases by case template ID",
                  "examples": [
                    "ctmpl_ABC123"
                  ],
                  "type": "string"
                },
                "account-id": {
                  "description": "Filter cases by account ID",
                  "examples": [
                    "act_ABC123"
                  ],
                  "type": "string"
                },
                "inquiry-id": {
                  "description": "Filter cases by inquiry ID",
                  "examples": [
                    "inq_ABC123"
                  ],
                  "type": "string"
                },
                "report-id": {
                  "description": "Filter cases by report ID",
                  "examples": [
                    "rep_ABC123"
                  ],
                  "type": "string"
                }
              }
            }
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "OK",
                    "value": {
                      "data": [
                        {
                          "type": "case",
                          "id": "case_KsFU1Vxv9oK3ztnwQuD7MaJo",
                          "attributes": {
                            "status": "open",
                            "name": "KCAS-1",
                            "resolution": null,
                            "created-at": "2021-03-24T04:59:21.764Z",
                            "updated-at": "2021-03-24T04:59:21.764Z",
                            "assigned-at": null,
                            "resolved-at": null,
                            "redacted-at": null,
                            "sla-expires-at": null,
                            "creator-id": "case_creator@withpersona.com",
                            "creator-type": "user",
                            "assignee-id": "case_assignee@withpersona.com",
                            "assigner-id": "case_assigner@withpersona.com",
                            "assigner-type": "user",
                            "resolver-id": null,
                            "resolver-type": null,
                            "updater-id": "case_updater@withpersona.com",
                            "updater-type": "user",
                            "tags": [],
                            "fields": {}
                          },
                          "relationships": {
                            "case-template": {
                              "data": {
                                "type": "case-template",
                                "id": "ctmpl_336jV1uVaaY84GAqvG91oiy9"
                              }
                            },
                            "case-comments": {
                              "data": []
                            },
                            "accounts": {
                              "data": []
                            },
                            "inquiries": {
                              "data": [
                                {
                                  "type": "inquiry",
                                  "id": "inq_eGK41TM6GjcZgdcoox7x8Hh0"
                                }
                              ]
                            },
                            "reports": {
                              "data": []
                            },
                            "verifications": {
                              "data": []
                            },
                            "txns": {
                              "data": []
                            }
                          }
                        }
                      ],
                      "links": {
                        "prev": null,
                        "next": "/api/v1/cases?page%5Bafter%5D=case_19pQg1NHfYeUdpIvYZ54xmDz"
                      }
                    }
                  }
                },
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/case"
                      },
                      "type": "array",
                      "description": "An array of Cases"
                    },
                    "links": {
                      "properties": {
                        "next": {
                          "examples": [
                            "/api/v1/cases?page%5Bafter%5D=case_19pQg1NHfYeUdpIvYZ54xmDz"
                          ],
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "prev": {
                          "examples": [
                            "/api/v1/cases?page%5Bbefore%5D=case_1ePP8j3pyznPCEuw4TCjWWD0"
                          ],
                          "type": [
                            "string",
                            "null"
                          ]
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "List all Cases",
        "tags": [
          "Cases"
        ]
      },
      "post": {
        "description": "Creates a new case in your organization.",
        "operationId": "create-a-case",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/create-a-case"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "data": {
                    "properties": {
                      "attributes": {
                        "description": "Properties can include Case Template ID, creator email address, and fields configured on your Case Template.",
                        "properties": {
                          "case-template-id": {
                            "description": "ID of the case template for this case",
                            "type": "string"
                          },
                          "creator-email-address": {
                            "description": "Email of the user creating this case in the organization",
                            "type": "string"
                          }
                        },
                        "additionalProperties": true,
                        "required": [
                          "case-template-id"
                        ],
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "meta": {
                    "properties": {
                      "object-ids": {
                        "description": "Array of Persona object IDs that should be related to this case",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "sla-expires-in-seconds": {
                        "description": "Number of seconds from now when SLA expires (max of 90 days).",
                        "examples": [
                          7200
                        ],
                        "type": [
                          "null",
                          "number"
                        ]
                      }
                    },
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "Created",
                    "value": {
                      "data": {
                        "type": "case",
                        "id": "case_gqe7rH38FvxtzhGBQmDBsjkB",
                        "attributes": {
                          "status": "open",
                          "name": "MRR-3",
                          "resolution": null,
                          "created-at": "2021-09-28T05:18:36.200Z",
                          "updated-at": "2021-09-28T05:18:36.200Z",
                          "assigned-at": null,
                          "resolved-at": null,
                          "redacted-at": null,
                          "sla-expires-at": "2021-09-28T07:18:36.200Z",
                          "creator-id": "case_creator@withpersona.com",
                          "creator-type": "user",
                          "assignee-id": null,
                          "assigner-id": null,
                          "assigner-type": null,
                          "resolver-id": null,
                          "resolver-type": null,
                          "updater-id": null,
                          "updater-type": null,
                          "tags": [],
                          "fields": {}
                        },
                        "relationships": {
                          "case-template": {
                            "data": {
                              "type": "case-template",
                              "id": "ctmpl_Jumm3K4zHwaLBBdyLUCnHbBC"
                            }
                          },
                          "case-comments": {
                            "data": []
                          },
                          "accounts": {
                            "data": []
                          },
                          "inquiries": {
                            "data": [
                              {
                                "type": "inquiry",
                                "id": "inq_KHK4MJCE4QvfocWB2intQ3YE"
                              }
                            ]
                          },
                          "reports": {
                            "data": []
                          },
                          "verifications": {
                            "data": []
                          },
                          "txns": {
                            "data": []
                          }
                        }
                      },
                      "included": [
                        {
                          "type": "inquiry",
                          "id": "inq_b6UPkf7mNC1qBtLXnfaWyUbA",
                          "attributes": {
                            "status": "expired",
                            "reference-id": null,
                            "note": null,
                            "behaviors": {
                              "request-spoof-attempts": null,
                              "user-agent-spoof-attempts": null,
                              "distraction-events": null,
                              "hesitation-baseline": null,
                              "hesitation-count": null,
                              "hesitation-time": null,
                              "shortcut-copies": null,
                              "shortcut-pastes": null,
                              "autofill-cancels": null,
                              "autofill-starts": null,
                              "devtools-open": null,
                              "completion-time": null,
                              "hesitation-percentage": null,
                              "behavior-threat-level": null
                            },
                            "tags": [],
                            "creator": "case_creator@withpersona.com",
                            "reviewer-comment": null,
                            "created-at": "2023-03-29T19:06:45.000Z",
                            "started-at": "2023-03-30T19:07:01.000Z",
                            "completed-at": null,
                            "failed-at": null,
                            "marked-for-review-at": null,
                            "decisioned-at": null,
                            "expired-at": "2023-03-30T19:07:02.000Z",
                            "redacted-at": null,
                            "previous-step-name": "start",
                            "next-step-name": "verification_document",
                            "name-first": null,
                            "name-middle": null,
                            "name-last": null,
                            "birthdate": null,
                            "address-street-1": null,
                            "address-street-2": null,
                            "address-city": null,
                            "address-subdivision": null,
                            "address-subdivision-abbr": null,
                            "address-postal-code": null,
                            "address-postal-code-abbr": null,
                            "social-security-number": null,
                            "identification-number": null,
                            "email-address": null,
                            "phone-number": null,
                            "fields": {
                              "name-first": {
                                "type": "string",
                                "value": null
                              },
                              "name-middle": {
                                "type": "string",
                                "value": null
                              },
                              "name-last": {
                                "type": "string",
                                "value": null
                              },
                              "address-street-1": {
                                "type": "string",
                                "value": null
                              },
                              "address-street-2": {
                                "type": "string",
                                "value": null
                              },
                              "address-city": {
                                "type": "string",
                                "value": null
                              },
                              "address-subdivision": {
                                "type": "string",
                                "value": null
                              },
                              "address-postal-code": {
                                "type": "string",
                                "value": null
                              },
                              "address-country-code": {
                                "type": "string",
                                "value": null
                              },
                              "birthdate": {
                                "type": "date",
                                "value": null
                              },
                              "email-address": {
                                "type": "string",
                                "value": null
                              },
                              "phone-number": {
                                "type": "string",
                                "value": null
                              },
                              "identification-number": {
                                "type": "string",
                                "value": null
                              }
                            }
                          },
                          "relationships": {
                            "account": {
                              "data": {
                                "type": "account",
                                "id": "act_RNwaSKFUDTzxUakAEuE2xmhZ"
                              }
                            },
                            "template": {
                              "data": {
                                "type": "template",
                                "id": "blu_biqYXr3aNfHuLeXUdJUNFNET"
                              }
                            },
                            "inquiry-template": {
                              "data": {}
                            },
                            "inquiry-template-version": {
                              "data": {}
                            },
                            "reviewer": {
                              "data": {}
                            },
                            "reports": {
                              "data": []
                            },
                            "verifications": {
                              "data": []
                            },
                            "sessions": {
                              "data": []
                            },
                            "documents": {
                              "data": []
                            },
                            "selfies": {
                              "data": []
                            }
                          }
                        }
                      ]
                    }
                  }
                },
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/case"
                    },
                    "included": {
                      "type": "array",
                      "items": {
                        "discriminator": {
                          "propertyName": "type",
                          "mapping": {
                            "inquiry": "#/components/schemas/inquiry",
                            "account": "#/components/schemas/account",
                            "report": "#/components/schemas/report"
                          }
                        },
                        "anyOf": [
                          {
                            "$ref": "#/components/schemas/account"
                          },
                          {
                            "$ref": "#/components/schemas/inquiry"
                          },
                          {
                            "$ref": "#/components/schemas/report"
                          }
                        ]
                      }
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Create a Case",
        "tags": [
          "Cases"
        ]
      }
    },
    "/cases/{case-id}": {
      "delete": {
        "description": "Permanently redacts a <<glossary:Case>> and its fields. Case objects must be redacted individually. **This action cannot be undone**.",
        "operationId": "redact-a-case",
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          },
          {
            "name": "case-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": {
                      "data": {
                        "type": "case",
                        "id": "case_KsFU1Vxv9oK3ztnwQuD7MaJo",
                        "attributes": {
                          "status": "Approved",
                          "name": "KCAS-1",
                          "resolution": null,
                          "created-at": "2021-03-24T04:59:21.764Z",
                          "updated-at": "2021-03-24T04:59:21.764Z",
                          "assigned-at": null,
                          "resolved-at": "2021-03-25T04:59:21.764Z",
                          "redacted-at": "2021-03-26T04:59:21.764Z",
                          "sla-expires-at": "2021-03-26T06:59:21.764Z",
                          "creator-id": "case_creator@withpersona.com",
                          "creator-type": "user",
                          "assignee-id": null,
                          "assigner-id": null,
                          "assigner-type": null,
                          "resolver-id": "case_resolver@withpersona.com",
                          "resolver-type": "user",
                          "updater-id": "case_updater@withpersona.com",
                          "updater-type": "user",
                          "tags": [],
                          "fields": {}
                        },
                        "relationships": {
                          "case-template": {
                            "data": {
                              "type": "case-template",
                              "id": "ctmpl_336jV1uVaaY84GAqvG91oiy9"
                            }
                          },
                          "case-comments": {
                            "data": [
                              {
                                "type": "case-comment",
                                "id": "cscm_yd2urRmjaCWcSSxqTSHvUcsn"
                              }
                            ]
                          },
                          "accounts": {
                            "data": [
                              {
                                "type": "account",
                                "id": "act_RNwaSKFUDTzxUakAEuE2xmhZ"
                              }
                            ]
                          },
                          "inquiries": {
                            "data": [
                              {
                                "type": "inquiry",
                                "id": "inq_b6UPkf7mNC1qBtLXnfaWyUbY"
                              }
                            ]
                          },
                          "reports": {
                            "data": []
                          },
                          "verifications": {
                            "data": []
                          },
                          "txns": {
                            "data": []
                          }
                        }
                      },
                      "included": [
                        {
                          "type": "account",
                          "id": "act_RNwaSKFUDTzxUakAEuE2xmhZ",
                          "attributes": {
                            "reference-id": null,
                            "created-at": "2021-03-24T04:59:06.000Z",
                            "updated-at": "2021-03-24T04:59:06.000Z",
                            "tags": []
                          }
                        },
                        {
                          "type": "inquiry",
                          "id": "inq_b6UPkf7mNC1qBtLXnfaWyUbA",
                          "attributes": {
                            "status": "expired",
                            "reference-id": null,
                            "note": null,
                            "behaviors": {
                              "request-spoof-attempts": null,
                              "user-agent-spoof-attempts": null,
                              "distraction-events": null,
                              "hesitation-baseline": null,
                              "hesitation-count": null,
                              "hesitation-time": null,
                              "shortcut-copies": null,
                              "shortcut-pastes": null,
                              "autofill-cancels": null,
                              "autofill-starts": null,
                              "devtools-open": null,
                              "completion-time": null,
                              "hesitation-percentage": null,
                              "behavior-threat-level": null
                            },
                            "tags": [],
                            "creator": "case_creator@withpersona.com",
                            "reviewer-comment": null,
                            "created-at": "2023-03-29T19:06:45.000Z",
                            "started-at": "2023-03-30T19:07:01.000Z",
                            "completed-at": null,
                            "failed-at": null,
                            "marked-for-review-at": null,
                            "decisioned-at": null,
                            "expired-at": "2023-03-30T19:07:02.000Z",
                            "redacted-at": null,
                            "previous-step-name": "start",
                            "next-step-name": "verification_document",
                            "name-first": null,
                            "name-middle": null,
                            "name-last": null,
                            "birthdate": null,
                            "address-street-1": null,
                            "address-street-2": null,
                            "address-city": null,
                            "address-subdivision": null,
                            "address-subdivision-abbr": null,
                            "address-postal-code": null,
                            "address-postal-code-abbr": null,
                            "social-security-number": null,
                            "identification-number": null,
                            "email-address": null,
                            "phone-number": null,
                            "fields": {
                              "name-first": {
                                "type": "string",
                                "value": null
                              },
                              "name-middle": {
                                "type": "string",
                                "value": null
                              },
                              "name-last": {
                                "type": "string",
                                "value": null
                              },
                              "address-street-1": {
                                "type": "string",
                                "value": null
                              },
                              "address-street-2": {
                                "type": "string",
                                "value": null
                              },
                              "address-city": {
                                "type": "string",
                                "value": null
                              },
                              "address-subdivision": {
                                "type": "string",
                                "value": null
                              },
                              "address-postal-code": {
                                "type": "string",
                                "value": null
                              },
                              "address-country-code": {
                                "type": "string",
                                "value": null
                              },
                              "birthdate": {
                                "type": "date",
                                "value": null
                              },
                              "email-address": {
                                "type": "string",
                                "value": null
                              },
                              "phone-number": {
                                "type": "string",
                                "value": null
                              },
                              "identification-number": {
                                "type": "string",
                                "value": null
                              }
                            }
                          },
                          "relationships": {
                            "account": {
                              "data": {
                                "type": "account",
                                "id": "act_RNwaSKFUDTzxUakAEuE2xmhZ"
                              }
                            },
                            "template": {
                              "data": {
                                "type": "template",
                                "id": "blu_biqYXr3aNfHuLeXUdJUNFNET"
                              }
                            },
                            "inquiry-template": {
                              "data": {}
                            },
                            "inquiry-template-version": {
                              "data": {}
                            },
                            "reviewer": {
                              "data": {}
                            },
                            "reports": {
                              "data": []
                            },
                            "verifications": {
                              "data": []
                            },
                            "sessions": {
                              "data": []
                            },
                            "documents": {
                              "data": []
                            },
                            "selfies": {
                              "data": []
                            }
                          }
                        },
                        {
                          "type": "case-comment",
                          "id": "cscm_yd2urRmjaCWcSSxqTSHvUcsn",
                          "attributes": {
                            "message": "This is a case comment",
                            "created-at": "2021-03-25T07:04:16.667Z",
                            "updated-at": "2021-03-25T07:04:16.667Z",
                            "commenter-id": "admin@acme.com",
                            "commenter-type": "user"
                          }
                        }
                      ]
                    }
                  }
                },
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/case"
                    },
                    "included": {
                      "type": "array",
                      "items": {
                        "discriminator": {
                          "propertyName": "type",
                          "mapping": {
                            "inquiry": "#/components/schemas/inquiry",
                            "account": "#/components/schemas/account",
                            "case-comment": "#/components/schemas/case-comment",
                            "report": "#/components/schemas/report",
                            "verification": "#/components/schemas/verification"
                          }
                        },
                        "anyOf": [
                          {
                            "$ref": "#/components/schemas/account"
                          },
                          {
                            "$ref": "#/components/schemas/inquiry"
                          },
                          {
                            "$ref": "#/components/schemas/case-comment"
                          },
                          {
                            "$ref": "#/components/schemas/report"
                          },
                          {
                            "$ref": "#/components/schemas/verification"
                          }
                        ]
                      }
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Redact a Case",
        "tags": [
          "Cases"
        ]
      },
      "get": {
        "description": "Retrieves the details of an existing <<glossary:Case>>.",
        "operationId": "retrieve-case",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/retrieve-case"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          },
          {
            "name": "case-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "OK",
                    "value": {
                      "data": {
                        "type": "case",
                        "id": "case_KsFU1Vxv9oK3ztnwQuD7MaJo",
                        "attributes": {
                          "status": "Approved",
                          "name": "KCAS-1",
                          "resolution": null,
                          "created-at": "2021-03-24T04:59:21.764Z",
                          "updated-at": "2021-03-24T04:59:21.764Z",
                          "assigned-at": null,
                          "resolved-at": "2021-03-25T04:59:21.764Z",
                          "redacted-at": null,
                          "sla-expires-at": null,
                          "creator-id": "case_creator@withpersona.com",
                          "creator-type": "user",
                          "assignee-id": null,
                          "assigner-id": null,
                          "assigner-type": null,
                          "resolver-id": "case_resolver@withpersona.com",
                          "resolver-type": "user",
                          "updater-id": "case_updater@withpersona.com",
                          "updater-type": "user",
                          "tags": [],
                          "fields": {}
                        },
                        "relationships": {
                          "case-template": {
                            "data": {
                              "type": "case-template",
                              "id": "ctmpl_336jV1uVaaY84GAqvG91oiy9"
                            }
                          },
                          "case-comments": {
                            "data": [
                              {
                                "type": "case-comment",
                                "id": "cscm_yd2urRmjaCWcSSxqTSHvUcsn"
                              }
                            ]
                          },
                          "accounts": {
                            "data": [
                              {
                                "type": "account",
                                "id": "act_RNwaSKFUDTzxUakAEuE2xmhZ"
                              }
                            ]
                          },
                          "inquiries": {
                            "data": [
                              {
                                "type": "inquiry",
                                "id": "inq_b6UPkf7mNC1qBtLXnfaWyUbY"
                              }
                            ]
                          },
                          "reports": {
                            "data": []
                          },
                          "verifications": {
                            "data": []
                          },
                          "txns": {
                            "data": []
                          }
                        }
                      },
                      "included": [
                        {
                          "type": "account",
                          "id": "act_RNwaSKFUDTzxUakAEuE2xmhZ",
                          "attributes": {
                            "reference-id": null,
                            "created-at": "2021-03-24T04:59:06.000Z",
                            "updated-at": "2021-03-24T04:59:06.000Z",
                            "tags": []
                          }
                        },
                        {
                          "type": "inquiry",
                          "id": "inq_b6UPkf7mNC1qBtLXnfaWyUbY",
                          "attributes": {
                            "status": "created",
                            "reference-id": null,
                            "note": null,
                            "tags": [],
                            "reviewer-comment": null,
                            "created-at": "2021-03-24T04:59:06.000Z",
                            "started-at": null,
                            "completed-at": null,
                            "failed-at": null,
                            "decisioned-at": null,
                            "expired-at": null
                          },
                          "relationships": {
                            "account": {
                              "data": {
                                "type": "account",
                                "id": "act_RNwaSKFUDTzxUakAEuE2xmhZ"
                              }
                            },
                            "template": {
                              "data": {
                                "type": "template",
                                "id": "blu_biqYXr3aNfHuLeXUdJUNFNET"
                              }
                            },
                            "reports": {
                              "data": []
                            },
                            "verifications": {
                              "data": []
                            },
                            "sessions": {
                              "data": []
                            },
                            "documents": {
                              "data": []
                            },
                            "selfies": {
                              "data": []
                            }
                          }
                        },
                        {
                          "type": "case-comment",
                          "id": "cscm_yd2urRmjaCWcSSxqTSHvUcsn",
                          "attributes": {
                            "message": "This is a case comment",
                            "created-at": "2021-03-25T07:04:16.667Z",
                            "updated-at": "2021-03-25T07:04:16.667Z",
                            "commenter-id": "admin@acme.com",
                            "commenter-type": "user"
                          }
                        }
                      ]
                    }
                  }
                },
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/case"
                    },
                    "included": {
                      "type": "array",
                      "items": {
                        "discriminator": {
                          "propertyName": "type",
                          "mapping": {
                            "inquiry": "#/components/schemas/inquiry",
                            "account": "#/components/schemas/account",
                            "case-comment": "#/components/schemas/case-comment",
                            "report": "#/components/schemas/report",
                            "verification": "#/components/schemas/verification"
                          }
                        },
                        "anyOf": [
                          {
                            "$ref": "#/components/schemas/account"
                          },
                          {
                            "$ref": "#/components/schemas/inquiry"
                          },
                          {
                            "$ref": "#/components/schemas/case-comment"
                          },
                          {
                            "$ref": "#/components/schemas/report"
                          },
                          {
                            "$ref": "#/components/schemas/verification"
                          }
                        ]
                      }
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Retrieve a Case",
        "tags": [
          "Cases"
        ]
      },
      "patch": {
        "description": "Updates the fields and add attachments on a <<glossary:Case>> that has been previously created.",
        "operationId": "update-a-case",
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          },
          {
            "description": "ID of the case to update",
            "in": "path",
            "name": "case-id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "data": {
                    "properties": {
                      "attributes": {
                        "properties": {
                          "attachments": {
                            "description": "List of PDF and image files to add to this case.",
                            "items": {
                              "properties": {
                                "data": {
                                  "description": "base 64 encoded file",
                                  "type": "string"
                                },
                                "filename": {
                                  "description": "Name of the file",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          },
                          "fields": {
                            "description": "Note: field names and data types used here will depend on the configurations for your Case Template.",
                            "examples": [
                              {
                                "preferred-name": "Albert"
                              }
                            ],
                            "additionalProperties": true,
                            "type": "object"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "meta": {
                    "properties": {
                      "sla-expires-in-seconds": {
                        "description": "Number of seconds from now when SLA expires (max of 90 days). Set to null to clear SLA.",
                        "examples": [
                          7200,
                          null
                        ],
                        "type": [
                          "null",
                          "number"
                        ]
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "OK",
                    "value": {
                      "data": {
                        "type": "case",
                        "id": "case_3maVhdLzdGftRZCvxfqazVL1",
                        "attributes": {
                          "status": "open",
                          "name": "WATC-16",
                          "resolution": null,
                          "created-at": "2021-06-30T20:37:18.678Z",
                          "updated-at": "2021-08-26T18:24:19.695Z",
                          "assigned-at": null,
                          "resolved-at": null,
                          "redacted-at": null,
                          "sla-expires-at": "2021-06-30T22:37:18.678Z",
                          "creator-id": "wfl_yKynZZiuPz1R5qm9JFyBnnLB",
                          "creator-type": "workflow-run",
                          "assignee-id": "foo@bar.com",
                          "assigner-id": "foo@bar.com",
                          "assigner-type": "user",
                          "resolver-id": null,
                          "resolver-type": null,
                          "updater-id": null,
                          "updater-type": null,
                          "tags": [],
                          "fields": {}
                        },
                        "relationships": {
                          "case-template": {
                            "data": {
                              "type": "case-template",
                              "id": "ctmpl_6HheND7s14a2o7fg33iHqhg7"
                            }
                          },
                          "case-comments": {
                            "data": []
                          },
                          "accounts": {
                            "data": []
                          },
                          "inquiries": {
                            "data": [
                              {
                                "type": "inquiry",
                                "id": "inq_29Yd6kF6xWVFgemm5WTxhxvf"
                              }
                            ]
                          },
                          "reports": {
                            "data": [
                              {
                                "type": "report/watchlist",
                                "id": "rep_PN3xspEwWCWWRp1eGpedaSNj"
                              }
                            ]
                          },
                          "verifications": {
                            "data": []
                          },
                          "txns": {
                            "data": []
                          }
                        }
                      }
                    }
                  }
                },
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/case"
                    },
                    "included": {
                      "type": "array",
                      "items": {
                        "discriminator": {
                          "propertyName": "type",
                          "mapping": {
                            "inquiry": "#/components/schemas/inquiry",
                            "account": "#/components/schemas/account",
                            "case-comment": "#/components/schemas/case-comment",
                            "report": "#/components/schemas/report"
                          }
                        },
                        "anyOf": [
                          {
                            "$ref": "#/components/schemas/account"
                          },
                          {
                            "$ref": "#/components/schemas/inquiry"
                          },
                          {
                            "$ref": "#/components/schemas/case-comment"
                          },
                          {
                            "$ref": "#/components/schemas/report"
                          }
                        ]
                      }
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Update a Case",
        "tags": [
          "Cases"
        ]
      }
    },
    "/cases/{case-id}/add-objects": {
      "post": {
        "description": "Adds Persona objects (such as inquiries, accounts, or reports) to a <<glossary:Case>>",
        "operationId": "add-persona-objects",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/add-persona-objects"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          },
          {
            "description": "ID of the case to update",
            "in": "path",
            "name": "case-id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "meta": {
                    "properties": {
                      "object-ids": {
                        "description": "Array of Persona object IDs to attach to this case",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "OK",
                    "value": {
                      "data": {
                        "type": "case",
                        "id": "case_3maVhdLzdGftRZCvxfqazVL1",
                        "attributes": {
                          "status": "resolved",
                          "name": "WATC-16",
                          "resolution": "Escalated",
                          "created-at": "2021-06-30T20:37:18.678Z",
                          "updated-at": "2021-08-26T18:24:19.695Z",
                          "assigned-at": null,
                          "resolved-at": "2021-08-26T18:24:19.000Z",
                          "redacted-at": null,
                          "sla-expires-at": null,
                          "creator-id": "wfl_yKynZZiuPz1R5qm9JFyBnnLB",
                          "creator-type": "workflow-run",
                          "assignee-id": null,
                          "assigner-id": null,
                          "assigner-type": null,
                          "resolver-id": null,
                          "resolver-type": null,
                          "updater-id": null,
                          "updater-type": null,
                          "tags": [],
                          "fields": {}
                        },
                        "relationships": {
                          "case-template": {
                            "data": {
                              "type": "case-template",
                              "id": "ctmpl_6HheND7s14a2o7fg33iHqhg7"
                            }
                          },
                          "case-comments": {
                            "data": []
                          },
                          "accounts": {
                            "data": []
                          },
                          "inquiries": {
                            "data": [
                              {
                                "type": "inquiry",
                                "id": "inq_29Yd6kF6xWVFgemm5WTxhxvf"
                              }
                            ]
                          },
                          "reports": {
                            "data": [
                              {
                                "type": "report/watchlist",
                                "id": "rep_PN3xspEwWCWWRp1eGpedaSNj"
                              }
                            ]
                          },
                          "verifications": {
                            "data": []
                          },
                          "txns": {
                            "data": []
                          }
                        }
                      }
                    }
                  }
                },
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/case"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Add Persona objects to a Case",
        "tags": [
          "Cases"
        ]
      }
    },
    "/cases/{case-id}/assign": {
      "post": {
        "description": "Assigns a <<glossary:Case>> to a Persona user.",
        "operationId": "assign-a-case",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/assign-a-case"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          },
          {
            "description": "ID of the case to update",
            "in": "path",
            "name": "case-id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "meta": {
                    "properties": {
                      "user-email-address": {
                        "description": "Email address of the Persona user to whom to assign this case",
                        "type": "string"
                      }
                    },
                    "required": [
                      "user-email-address"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "meta"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "OK",
                    "value": {
                      "data": {
                        "type": "case",
                        "id": "case_3maVhdLzdGftRZCvxfqazVL1",
                        "attributes": {
                          "status": "open",
                          "name": "WATC-16",
                          "resolution": null,
                          "created-at": "2021-06-30T20:37:18.678Z",
                          "updated-at": "2021-08-26T18:24:19.695Z",
                          "assigned-at": null,
                          "resolved-at": null,
                          "redacted-at": null,
                          "sla-expires-at": null,
                          "creator-id": "wfl_yKynZZiuPz1R5qm9JFyBnnLB",
                          "creator-type": "workflow-run",
                          "assignee-id": "foo@bar.com",
                          "assigner-id": "foo@bar.com",
                          "assigner-type": "user",
                          "resolver-id": null,
                          "resolver-type": null,
                          "updater-id": null,
                          "updater-type": null,
                          "tags": [],
                          "fields": {}
                        },
                        "relationships": {
                          "case-template": {
                            "data": {
                              "type": "case-template",
                              "id": "ctmpl_6HheND7s14a2o7fg33iHqhg7"
                            }
                          },
                          "case-comments": {
                            "data": []
                          },
                          "accounts": {
                            "data": []
                          },
                          "inquiries": {
                            "data": [
                              {
                                "type": "inquiry",
                                "id": "inq_29Yd6kF6xWVFgemm5WTxhxvf"
                              }
                            ]
                          },
                          "reports": {
                            "data": [
                              {
                                "type": "report/watchlist",
                                "id": "rep_PN3xspEwWCWWRp1eGpedaSNj"
                              }
                            ]
                          },
                          "verifications": {
                            "data": []
                          },
                          "txns": {
                            "data": []
                          }
                        }
                      }
                    }
                  }
                },
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/case"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Assign a Case",
        "tags": [
          "Cases"
        ]
      }
    },
    "/cases/{case-id}/set-status": {
      "post": {
        "description": "Sets the status of a Case.",
        "operationId": "set-status-for-a-case",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/set-status-for-a-case"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          },
          {
            "description": "ID of the case to update status",
            "in": "path",
            "name": "case-id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "Request Example": {
                  "value": {
                    "meta": {
                      "status": "Approved"
                    }
                  }
                }
              },
              "schema": {
                "properties": {
                  "meta": {
                    "properties": {
                      "status": {
                        "type": "string",
                        "description": "Status to update case to"
                      }
                    },
                    "required": [
                      "status"
                    ],
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "OK",
                    "value": {
                      "data": {
                        "type": "case",
                        "id": "case_3maVhdLzdGftRZCvxfqazVL1",
                        "attributes": {
                          "status": "Approved",
                          "name": "WATC-16",
                          "resolution": null,
                          "created-at": "2021-06-30T20:37:18.678Z",
                          "updated-at": "2021-08-26T18:24:19.695Z",
                          "assigned-at": null,
                          "resolved-at": null,
                          "redacted-at": null,
                          "sla-expires-at": null,
                          "creator-id": "wfl_yKynZZiuPz1R5qm9JFyBnnLB",
                          "creator-type": "workflow-run",
                          "assignee-id": "foo@bar.com",
                          "assigner-id": "foo@bar.com",
                          "assigner-type": "user",
                          "resolver-id": null,
                          "resolver-type": null,
                          "updater-id": null,
                          "updater-type": null,
                          "tags": [],
                          "fields": {}
                        },
                        "relationships": {
                          "case-template": {
                            "data": {
                              "type": "case-template",
                              "id": "ctmpl_6HheND7s14a2o7fg33iHqhg7"
                            }
                          },
                          "case-comments": {
                            "data": []
                          },
                          "accounts": {
                            "data": []
                          },
                          "inquiries": {
                            "data": [
                              {
                                "type": "inquiry",
                                "id": "inq_29Yd6kF6xWVFgemm5WTxhxvf"
                              }
                            ]
                          },
                          "reports": {
                            "data": [
                              {
                                "type": "report/watchlist",
                                "id": "rep_PN3xspEwWCWWRp1eGpedaSNj"
                              }
                            ]
                          },
                          "verifications": {
                            "data": []
                          },
                          "txns": {
                            "data": []
                          }
                        }
                      }
                    }
                  }
                },
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/case"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Set status on a Case",
        "tags": [
          "Cases"
        ]
      }
    },
    "/cases/{case-id}/add-tag": {
      "post": {
        "description": "Adds a new tag to a <<glossary:Case>>",
        "operationId": "add-tag",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/add-tag"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          },
          {
            "description": "ID of the case to update.",
            "in": "path",
            "name": "case-id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "meta": {
                    "properties": {
                      "tag-name": {
                        "type": "string",
                        "description": "Name of the tag to add to the Case."
                      }
                    },
                    "required": [
                      "tag-name"
                    ],
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": {
                      "data": {
                        "type": "case",
                        "id": "case_3maVhdLzdGftRZCvxfqazVL1",
                        "attributes": {
                          "status": "Open",
                          "name": "KYC-6",
                          "resolution": null,
                          "created-at": "2021-06-30T20:37:18.678Z",
                          "updated-at": "2021-08-26T18:24:19.695Z",
                          "assigned-at": "2021-08-26T18:24:19.695Z",
                          "resolved-at": null,
                          "redacted-at": null,
                          "sla-expires-at": null,
                          "creator-id": "wfl_yKynZZiuPz1R5qm9JFyBnnLB",
                          "creator-type": "workflow-run",
                          "assignee-id": "case_assignee@withpersona.com",
                          "assigner-id": "case_assigner@withpersona.com",
                          "assigner-type": "user",
                          "resolver-id": null,
                          "resolver-type": null,
                          "updater-id": null,
                          "updater-type": null,
                          "tags": [
                            "FRAUD"
                          ],
                          "fields": {}
                        },
                        "relationships": {
                          "case-template": {
                            "data": {
                              "type": "case-template",
                              "id": "ctmpl_6HheND7s14a2o7fg33iHqhg7"
                            }
                          },
                          "case-comments": {
                            "data": []
                          },
                          "accounts": {
                            "data": []
                          },
                          "inquiries": {
                            "data": [
                              {
                                "type": "inquiry",
                                "id": "inq_29Yd6kF6xWVFgemm5WTxhxvf"
                              }
                            ]
                          },
                          "reports": {
                            "data": [
                              {
                                "type": "report/watchlist",
                                "id": "rep_PN3xspEwWCWWRp1eGpedaSNj"
                              }
                            ]
                          },
                          "verifications": {
                            "data": []
                          },
                          "txns": {
                            "data": []
                          }
                        }
                      }
                    }
                  }
                },
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/case"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Add tag to a Case",
        "tags": [
          "Cases"
        ]
      }
    },
    "/cases/{case-id}/remove-tag": {
      "post": {
        "description": "Removes an existing tag from a <<glossary:Case>>",
        "operationId": "remove-tag",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/remove-tag"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          },
          {
            "description": "ID of the case to update.",
            "in": "path",
            "name": "case-id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "meta": {
                    "properties": {
                      "tag-name": {
                        "type": "string",
                        "description": "Name of the tag to remove from the Case."
                      }
                    },
                    "required": [
                      "tag-name"
                    ],
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": {
                      "data": {
                        "type": "case",
                        "id": "case_3maVhdLzdGftRZCvxfqazVL1",
                        "attributes": {
                          "status": "Open",
                          "name": "KYC-6",
                          "resolution": null,
                          "created-at": "2021-06-30T20:37:18.678Z",
                          "updated-at": "2021-08-26T18:24:19.695Z",
                          "assigned-at": "2021-08-26T18:24:19.695Z",
                          "resolved-at": null,
                          "redacted-at": null,
                          "sla-expires-at": null,
                          "creator-id": "wfl_yKynZZiuPz1R5qm9JFyBnnLB",
                          "creator-type": "workflow-run",
                          "assignee-id": "case_assignee@withpersona.com",
                          "assigner-id": "case_assigner@withpersona.com",
                          "assigner-type": "user",
                          "resolver-id": null,
                          "resolver-type": null,
                          "updater-id": null,
                          "updater-type": null,
                          "tags": [],
                          "fields": {}
                        },
                        "relationships": {
                          "case-template": {
                            "data": {
                              "type": "case-template",
                              "id": "ctmpl_6HheND7s14a2o7fg33iHqhg7"
                            }
                          },
                          "case-comments": {
                            "data": []
                          },
                          "accounts": {
                            "data": []
                          },
                          "inquiries": {
                            "data": [
                              {
                                "type": "inquiry",
                                "id": "inq_29Yd6kF6xWVFgemm5WTxhxvf"
                              }
                            ]
                          },
                          "reports": {
                            "data": [
                              {
                                "type": "report/watchlist",
                                "id": "rep_PN3xspEwWCWWRp1eGpedaSNj"
                              }
                            ]
                          },
                          "verifications": {
                            "data": []
                          },
                          "txns": {
                            "data": []
                          }
                        }
                      }
                    }
                  }
                },
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/case"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Remove tag from a Case",
        "tags": [
          "Cases"
        ]
      }
    },
    "/cases/{case-id}/set-tags": {
      "post": {
        "description": "Sets all tags on a <<glossary:Case>>. Any tags that are not provided in the request will be removed.",
        "operationId": "set-tags",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/set-tags"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          },
          {
            "description": "ID of the case to update.",
            "in": "path",
            "name": "case-id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "meta": {
                    "properties": {
                      "tag-name": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": {
                      "data": {
                        "type": "case",
                        "id": "case_3maVhdLzdGftRZCvxfqazVL1",
                        "attributes": {
                          "status": "Open",
                          "name": "KYC-6",
                          "resolution": null,
                          "created-at": "2021-06-30T20:37:18.678Z",
                          "updated-at": "2021-08-26T18:24:19.695Z",
                          "assigned-at": "2021-08-26T18:24:19.695Z",
                          "resolved-at": null,
                          "redacted-at": null,
                          "sla-expires-at": null,
                          "creator-id": "wfl_yKynZZiuPz1R5qm9JFyBnnLB",
                          "creator-type": "workflow-run",
                          "assignee-id": "case_assignee@withpersona.com",
                          "assigner-id": "case_assigner@withpersona.com",
                          "assigner-type": "user",
                          "resolver-id": null,
                          "resolver-type": null,
                          "updater-id": null,
                          "updater-type": null,
                          "tags": [
                            "FRAUD",
                            "IMPERSONATING CELEBRITY"
                          ],
                          "fields": {}
                        },
                        "relationships": {
                          "case-template": {
                            "data": {
                              "type": "case-template",
                              "id": "ctmpl_6HheND7s14a2o7fg33iHqhg7"
                            }
                          },
                          "case-comments": {
                            "data": []
                          },
                          "accounts": {
                            "data": []
                          },
                          "inquiries": {
                            "data": [
                              {
                                "type": "inquiry",
                                "id": "inq_29Yd6kF6xWVFgemm5WTxhxvf"
                              }
                            ]
                          },
                          "reports": {
                            "data": [
                              {
                                "type": "report/watchlist",
                                "id": "rep_PN3xspEwWCWWRp1eGpedaSNj"
                              }
                            ]
                          },
                          "verifications": {
                            "data": []
                          },
                          "txns": {
                            "data": []
                          }
                        }
                      }
                    }
                  }
                },
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/case"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Set tags on a Case",
        "tags": [
          "Cases"
        ]
      }
    },
    "/devices": {
      "get": {
        "description": "Retrieves a list of Devices.",
        "operationId": "list-all-devices",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/list-all-devices"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          },
          {
            "in": "query",
            "name": "filter",
            "required": true,
            "style": "deepObject",
            "schema": {
              "type": "object",
              "properties": {
                "inquiry-session-id": {
                  "description": "Filter devices by inquiry session ID",
                  "type": "string",
                  "example": "iqse_ABC123"
                }
              },
              "required": [
                "inquiry-session-id"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "OK",
                    "$ref": "#/components/examples/device-list"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/device"
                      }
                    },
                    "links": {
                      "type": "object",
                      "properties": {
                        "prev": {
                          "type": [
                            "string",
                            "null"
                          ],
                          "examples": [
                            "/api/v1/devices?page%5Bbefore%5D=dev_ABC123"
                          ]
                        },
                        "next": {
                          "type": [
                            "string",
                            "null"
                          ],
                          "examples": [
                            "/api/v1/devices?page%5Bafter%5D=dev_ABC123"
                          ]
                        }
                      }
                    },
                    "included": {
                      "$ref": "#/components/schemas/empty-included-objects"
                    }
                  }
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "List all Devices",
        "tags": [
          "Devices"
        ]
      }
    },
    "/devices/{device-id}": {
      "get": {
        "description": "Retrieves details of a specific Device.",
        "operationId": "retrieve-a-device",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/retrieve-a-device"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          },
          {
            "description": "Device ID",
            "in": "path",
            "name": "device-id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "OK",
                    "$ref": "#/components/examples/device"
                  }
                },
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/device"
                    },
                    "included": {
                      "$ref": "#/components/schemas/empty-included-objects"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Retrieve a Device",
        "tags": [
          "Devices"
        ]
      }
    },
    "/document/generics": {
      "post": {
        "description": "Creates a new generic document.",
        "operationId": "create-a-document",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/create-a-document"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "data": {
                    "properties": {
                      "attributes": {
                        "properties": {
                          "files": {
                            "description": "Files to upload for this document. Files may be images or PDFs.",
                            "items": {
                              "properties": {
                                "data": {
                                  "description": "Base64 encoded file.",
                                  "format": "binary",
                                  "type": "string"
                                },
                                "filename": {
                                  "description": "Name of file.",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "data",
                                "filename"
                              ],
                              "type": "object"
                            },
                            "type": "array"
                          },
                          "inquiry-id": {
                            "examples": [
                              "inq_GC7xwqnhgNHwomz5yT3geLrT"
                            ],
                            "type": "string"
                          },
                          "account-id": {
                            "examples": [
                              "act_bcTxPLyAYy5edxp29abcvpng"
                            ],
                            "type": "string"
                          },
                          "kind": {
                            "description": "Identifier for this document, e.g. \"proof_of_employment\"",
                            "type": "string"
                          }
                        },
                        "required": [
                          "kind"
                        ],
                        "type": "object"
                      }
                    },
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "Created",
                    "$ref": "#/components/examples/document-generic"
                  }
                },
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/document-generic"
                    },
                    "included": {
                      "$ref": "#/components/schemas/document-included-objects"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Create a Generic Document",
        "tags": [
          "Documents"
        ]
      }
    },
    "/document/generics/{document-id}": {
      "get": {
        "description": "Retrieves the details of a generic document that has been previously created.",
        "operationId": "retrieve-a-generic-document",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/retrieve-a-generic-document"
        },
        "parameters": [
          {
            "in": "path",
            "name": "document-id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "OK",
                    "$ref": "#/components/examples/document-generic"
                  }
                },
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/document-generic"
                    },
                    "included": {
                      "$ref": "#/components/schemas/document-included-objects"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Retrieve a Generic Document",
        "tags": [
          "Documents"
        ]
      },
      "patch": {
        "description": "Updates an existing generic document. Can only update `initiated` documents.",
        "operationId": "update-a-document",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/update-a-document"
        },
        "parameters": [
          {
            "in": "path",
            "name": "document-id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "data": {
                    "properties": {
                      "attributes": {
                        "properties": {
                          "files": {
                            "description": "Files to upload for this document.",
                            "items": {
                              "type": [
                                "array",
                                "object"
                              ]
                            },
                            "type": "array"
                          },
                          "kind": {
                            "description": "Identifier for this document, e.g. \"proof_of_employment\"",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "OK",
                    "$ref": "#/components/examples/document-generic"
                  }
                },
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/document-generic"
                    },
                    "included": {
                      "$ref": "#/components/schemas/document-included-objects"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Update a Generic Document",
        "tags": [
          "Documents"
        ]
      }
    },
    "/document/generics/{document-id}/submit": {
      "post": {
        "description": "Submits a generic document for processing. Can only submit `initiated` documents with files attached.",
        "operationId": "submit-a-document",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/submit-a-document"
        },
        "parameters": [
          {
            "in": "path",
            "name": "document-id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "OK",
                    "$ref": "#/components/examples/document-generic"
                  }
                },
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/document-generic"
                    },
                    "included": {
                      "$ref": "#/components/schemas/document-included-objects"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Submit a Generic Document",
        "tags": [
          "Documents"
        ]
      }
    },
    "/document/government-ids": {
      "post": {
        "description": "Creates a new government ID document",
        "operationId": "create-a-government-id-document",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/create-a-government-id-document"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "data": {
                    "properties": {
                      "attributes": {
                        "properties": {
                          "back-photo": {
                            "description": "Back of ID.",
                            "properties": {
                              "data": {
                                "description": "Government ID photo data, must be images. Can provide more than one image and we will pick the best for processing. Can also be provided as uploaded file(s) such as with multipart/form-data requests instead of this object(s). Images must be between 10KB and 15MB.",
                                "properties": {
                                  "data": {
                                    "description": "Base64 encoded file.",
                                    "format": "binary",
                                    "type": "string"
                                  },
                                  "filename": {
                                    "description": "Name of file.",
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "data",
                                  "filename"
                                ],
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          "country-code": {
                            "description": "ISO 3166-1 alpha-2 code of the ID’s issuing country.",
                            "type": "string"
                          },
                          "front-photo": {
                            "description": "Front of ID.",
                            "properties": {
                              "data": {
                                "description": "Government ID photo data, must be images. Can provide more than one image and we will pick the best for processing. Can also be provided as uploaded file(s) such as with multipart/form-data requests instead of this object(s). Images must be between 10KB and 15MB.",
                                "properties": {
                                  "data": {
                                    "description": "Base64 encoded file.",
                                    "format": "binary",
                                    "type": "string"
                                  },
                                  "filename": {
                                    "description": "Name of file.",
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "data",
                                  "filename"
                                ],
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          "inquiry-id": {
                            "type": "string"
                          },
                          "selected-id-class": {
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          }
                        },
                        "required": [
                          "inquiry-id",
                          "country-code"
                        ],
                        "type": "object"
                      }
                    },
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "Created",
                    "$ref": "#/components/examples/document-government-id"
                  }
                },
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/document-government-id"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Create a Government ID Document",
        "tags": [
          "Documents"
        ]
      }
    },
    "/document/government-ids/{document-id}": {
      "patch": {
        "description": "Updates an existing government ID document. Can only update `initiated` documents.",
        "operationId": "update-a-government-id-document",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/update-a-government-id-document"
        },
        "parameters": [
          {
            "in": "path",
            "name": "document-id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "data": {
                    "properties": {
                      "attributes": {
                        "properties": {
                          "back-photo": {
                            "description": "Back of ID.",
                            "properties": {
                              "data": {
                                "description": "Government ID photo data, must be images. Can provide more than one image and we will pick the best for processing. Can also be provided as uploaded file(s) such as with multipart/form-data requests instead of this object(s). Images must be between 10KB and 15MB.",
                                "properties": {
                                  "data": {
                                    "description": "Base64 encoded file.",
                                    "format": "binary",
                                    "type": "string"
                                  },
                                  "filename": {
                                    "description": "Name of file.",
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "data",
                                  "filename"
                                ],
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          "front-photo": {
                            "description": "Front of ID.",
                            "properties": {
                              "data": {
                                "description": "Government ID photo data, must be images. Can provide more than one image and we will pick the best for processing. Can also be provided as uploaded file(s) such as with multipart/form-data requests instead of this object(s). Images must be between 10KB and 15MB.",
                                "properties": {
                                  "data": {
                                    "description": "Base64 encoded file.",
                                    "format": "binary",
                                    "type": "string"
                                  },
                                  "filename": {
                                    "description": "Name of file.",
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "data",
                                  "filename"
                                ],
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          "selected-id-class": {
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "OK",
                    "$ref": "#/components/examples/document-government-id"
                  }
                },
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/document-government-id"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Update a Government ID Document",
        "tags": [
          "Documents"
        ]
      }
    },
    "/document/government-ids/{document-id}/submit": {
      "post": {
        "description": "Submits a government ID document for processing. Can only submit `initiated` documents with photos of the ID attached.",
        "operationId": "submit-a-government-id-document",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/submit-a-government-id-document"
        },
        "parameters": [
          {
            "in": "path",
            "name": "document-id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "OK",
                    "$ref": "#/components/examples/document-government-id"
                  }
                },
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/document-government-id"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Submit a Government ID Document",
        "tags": [
          "Documents"
        ]
      }
    },
    "/documents/{document-id}": {
      "get": {
        "description": "Retrieves the details of a Document.",
        "operationId": "retrieve-a-document",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/retrieve-a-document"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          },
          {
            "name": "document-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "OK",
                    "$ref": "#/components/examples/document-generic"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/document"
                    },
                    "included": {
                      "$ref": "#/components/schemas/document-included-objects"
                    }
                  }
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Retrieve a Document",
        "tags": [
          "Documents"
        ]
      }
    },
    "/events": {
      "get": {
        "description": "Returns a list of your organization's events.",
        "operationId": "list-all-events",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/list-all-events"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "in": "query",
            "name": "page",
            "style": "deepObject",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/nested-pagination-query-params"
                },
                {
                  "type": "object",
                  "properties": {
                    "after": {
                      "example": "evt_ABC123"
                    },
                    "before": {
                      "example": "evt_ABC123"
                    }
                  }
                }
              ]
            }
          },
          {
            "in": "query",
            "name": "filter",
            "style": "deepObject",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "description": "Comma separated list of event names",
                  "type": "string"
                },
                "object-id": {
                  "description": "Comma separated list of object ids",
                  "type": "string"
                },
                "id": {
                  "description": "Comma separated list of event ids",
                  "type": "string"
                }
              }
            }
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "OK",
                    "value": {
                      "data": [
                        {
                          "type": "event",
                          "id": "evt_ABC123",
                          "attributes": {
                            "name": "inquiry.expired",
                            "payload": {
                              "data": {
                                "type": "inquiry",
                                "id": "inq_ABC123",
                                "attributes": {}
                              }
                            },
                            "created-at": "2023-09-23T17:14:01.918Z"
                          }
                        },
                        {
                          "type": "event",
                          "id": "evt_ABC123",
                          "attributes": {
                            "name": "account.tag-added",
                            "payload": {
                              "data": {
                                "type": "account",
                                "id": "act_ABC123",
                                "attributes": {}
                              }
                            },
                            "created-at": "2023-09-23T00:46:41.877Z"
                          }
                        }
                      ],
                      "links": {
                        "prev": null,
                        "next": null
                      }
                    }
                  }
                },
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "description": "An array of Events",
                      "items": {
                        "$ref": "#/components/schemas/event"
                      }
                    },
                    "links": {
                      "type": "object",
                      "properties": {
                        "prev": {
                          "type": [
                            "string",
                            "null"
                          ],
                          "examples": [
                            "/api/v1/events?page%5Bbefore%5D=evt_ABC123"
                          ]
                        },
                        "next": {
                          "type": [
                            "string",
                            "null"
                          ],
                          "examples": [
                            "/api/v1/events?page%5Bafter%5D=evt_ABC123"
                          ]
                        }
                      }
                    },
                    "included": {
                      "$ref": "#/components/schemas/empty-included-objects"
                    }
                  }
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "List all Events",
        "tags": [
          "Events"
        ]
      }
    },
    "/events/{event-id}": {
      "get": {
        "description": "Retrieves the details of an existing event.",
        "operationId": "retrieve-an-event",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/retrieve-an-event"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          },
          {
            "name": "event-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "OK",
                    "value": {
                      "data": {
                        "type": "event",
                        "id": "evt_ABC123",
                        "attributes": {
                          "name": "inquiry.expired",
                          "payload": {
                            "data": {
                              "type": "inquiry",
                              "id": "inq_ABC123",
                              "attributes": {}
                            }
                          },
                          "created-at": "2023-09-23T17:14:01.918Z"
                        }
                      }
                    }
                  }
                },
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/event"
                    },
                    "included": {
                      "$ref": "#/components/schemas/empty-included-objects"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Retrieve an Event",
        "tags": [
          "Events"
        ]
      }
    },
    "/importers/{importer-id}": {
      "get": {
        "description": "Retrieve the details of an existing importer.",
        "operationId": "retrieve-an-importer",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/retrieve-an-importer"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          },
          {
            "description": "String ID of the importer to fetch",
            "in": "path",
            "name": "importer-id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "OK",
                    "value": {
                      "data": {
                        "type": "importer/account",
                        "id": "mprt_TKqquVbHaSVYqgWhxNjuYDjQ",
                        "attributes": {
                          "status": "pending",
                          "created-at": "2020-07-12T17:16:54.656Z",
                          "completed-at": null,
                          "error-count": 0,
                          "successful-count": 0,
                          "duplicate-count": 0
                        }
                      }
                    }
                  }
                },
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "type": {
                          "x-polymorphic": true,
                          "examples": [
                            "importer/account"
                          ],
                          "type": "string"
                        },
                        "id": {
                          "examples": [
                            "mprt_TKqquVbHaSVYqgWhxNjuYDjQ"
                          ],
                          "type": "string"
                        },
                        "attributes": {
                          "properties": {
                            "completed-at": {},
                            "created-at": {
                              "examples": [
                                "2020-07-12T17:16:54.656Z"
                              ],
                              "type": "string"
                            },
                            "duplicate-count": {
                              "default": 0,
                              "examples": [
                                0
                              ],
                              "type": "integer"
                            },
                            "error-count": {
                              "default": 0,
                              "examples": [
                                0
                              ],
                              "type": "integer"
                            },
                            "status": {
                              "examples": [
                                "pending"
                              ],
                              "type": "string"
                            },
                            "successful-count": {
                              "default": 0,
                              "examples": [
                                0
                              ],
                              "type": "integer"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Retrieve an Importer",
        "tags": [
          "Importers"
        ]
      }
    },
    "/importer/accounts": {
      "post": {
        "description": "Bulk import accounts by uploading a CSV file.\n\nEach row should be the details for a new account. The columns we allow are:\n  - reference_id\n  - name_first\n  - name_middle\n  - name_last\n  - birthdate\n  - social_security_number\n  - tags",
        "operationId": "import-an-account",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/import-an-account"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "data": {
                    "properties": {
                      "file": {
                        "type": "string",
                        "contentMediaType": "application/octet-stream"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            },
            "application/json": {
              "schema": {
                "properties": {
                  "data": {
                    "properties": {
                      "file": {
                        "properties": {
                          "data": {
                            "description": "Base64 encoded file",
                            "format": "binary",
                            "type": "string"
                          },
                          "filename": {
                            "description": "Name of file",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "Created",
                    "value": {
                      "data": {
                        "type": "importer/account",
                        "id": "mprt_TKqquVbHaSVYqgWhxNjuYDjQ",
                        "attributes": {
                          "status": "pending",
                          "created-at": "2020-07-12T17:16:54.656Z",
                          "completed-at": null,
                          "error-count": 0,
                          "successful-count": 0,
                          "duplicate-count": 0
                        }
                      }
                    }
                  }
                },
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "type": {
                          "const": "importer/account",
                          "description": "importer/account",
                          "type": "string"
                        },
                        "id": {
                          "examples": [
                            "mprt_TKqquVbHaSVYqgWhxNjuYDjQ"
                          ],
                          "type": "string"
                        },
                        "attributes": {
                          "properties": {
                            "completed-at": {},
                            "created-at": {
                              "examples": [
                                "2020-07-12T17:16:54.656Z"
                              ],
                              "type": "string"
                            },
                            "duplicate-count": {
                              "default": 0,
                              "examples": [
                                0
                              ],
                              "type": "integer"
                            },
                            "error-count": {
                              "default": 0,
                              "examples": [
                                0
                              ],
                              "type": "integer"
                            },
                            "status": {
                              "examples": [
                                "pending"
                              ],
                              "type": "string"
                            },
                            "successful-count": {
                              "default": 0,
                              "examples": [
                                0
                              ],
                              "type": "integer"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Import Accounts",
        "tags": [
          "Importers"
        ]
      }
    },
    "/importer/list-item/email-addresses": {
      "post": {
        "description": "Bulk import email address List Items by uploading a CSV file.\n\nEach row should be the details for a new List Item. The columns we allow are:\n  - value\n  - match_type (either 'email_address' or 'domain')\n\nA match_type of 'email_address' will need to match the entire email address of an individual, while a match_type of 'domain' will match on the email address domain of an individual (i.e. all email addresses with domain 'gmail.com').",
        "operationId": "import-email-address-lists",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/import-email-address-lists"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/list-item-importer-csv-request"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "Created",
                    "value": {
                      "data": {
                        "type": "importer/list-item/email-address",
                        "id": "mprt_TKqquVbHaSVYqgWhxNjuYDjQ",
                        "attributes": {
                          "status": "pending",
                          "created-at": "2020-07-12T17:16:54.656Z",
                          "completed-at": null,
                          "error-count": 0,
                          "successful-count": 0,
                          "duplicate-count": 0
                        }
                      }
                    }
                  }
                },
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "type": {
                          "const": "importer/list-item/email-address",
                          "description": "importer/list-item/email-address",
                          "type": "string"
                        },
                        "id": {
                          "examples": [
                            "mprt_TKqquVbHaSVYqgWhxNjuYDjQ"
                          ],
                          "type": "string"
                        },
                        "attributes": {
                          "properties": {
                            "completed-at": {},
                            "created-at": {
                              "examples": [
                                "2020-07-12T17:16:54.656Z"
                              ],
                              "type": "string"
                            },
                            "duplicate-count": {
                              "default": 0,
                              "examples": [
                                0
                              ],
                              "type": "integer"
                            },
                            "error-count": {
                              "default": 0,
                              "examples": [
                                0
                              ],
                              "type": "integer"
                            },
                            "status": {
                              "examples": [
                                "pending"
                              ],
                              "type": "string"
                            },
                            "successful-count": {
                              "default": 0,
                              "examples": [
                                0
                              ],
                              "type": "integer"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Import Email Address Lists",
        "tags": [
          "Importers"
        ]
      }
    },
    "/importer/list-item/faces": {
      "post": {
        "description": "Bulk import face List Items by uploading image files.\n\nEach file being a new List Item. We recommend uploading max 50 images (with average image size of 500KB) at a time.",
        "operationId": "import-face-lists",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/import-face-lists"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "data": {
                    "properties": {
                      "attributes": {
                        "properties": {
                          "image-files": {
                            "items": {},
                            "type": "array"
                          },
                          "list-id": {
                            "type": "string"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            },
            "application/json": {
              "schema": {
                "properties": {
                  "data": {
                    "properties": {
                      "attributes": {
                        "properties": {
                          "image-files": {
                            "items": {
                              "properties": {
                                "data": {
                                  "description": "Base64 encoded file",
                                  "format": "binary",
                                  "type": "string"
                                },
                                "filename": {
                                  "description": "Name of file",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          },
                          "list-id": {
                            "type": "string"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "Created",
                    "value": {
                      "data": {
                        "type": "importer/list-item/face",
                        "id": "mprt_TKqquVbHaSVYqgWhxNjuYDjQ",
                        "attributes": {
                          "status": "pending",
                          "created-at": "2020-07-12T17:16:54.656Z",
                          "completed-at": null,
                          "error-count": 0,
                          "successful-count": 0,
                          "duplicate-count": 0
                        }
                      }
                    }
                  }
                },
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "type": {
                          "const": "importer/list-item/face",
                          "description": "importer/list-item/face",
                          "type": "string"
                        },
                        "id": {
                          "examples": [
                            "mprt_TKqquVbHaSVYqgWhxNjuYDjQ"
                          ],
                          "type": "string"
                        },
                        "attributes": {
                          "properties": {
                            "completed-at": {},
                            "created-at": {
                              "examples": [
                                "2020-07-12T17:16:54.656Z"
                              ],
                              "type": "string"
                            },
                            "duplicate-count": {
                              "default": 0,
                              "examples": [
                                0
                              ],
                              "type": "integer"
                            },
                            "error-count": {
                              "default": 0,
                              "examples": [
                                0
                              ],
                              "type": "integer"
                            },
                            "status": {
                              "examples": [
                                "pending"
                              ],
                              "type": "string"
                            },
                            "successful-count": {
                              "default": 0,
                              "examples": [
                                0
                              ],
                              "type": "integer"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Import Face Lists",
        "tags": [
          "Importers"
        ]
      }
    },
    "/importer/list-item/geolocations": {
      "post": {
        "description": "Bulk import geolocation List Items by uploading a CSV file.\n\nEach row should be the details for a new List Item. The columns we allow are:\n  - latitude\n  - longitude\n  - radius_meters",
        "operationId": "import-geolocation-lists",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/import-geolocation-lists"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/list-item-importer-csv-request"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "Created",
                    "value": {
                      "data": {
                        "type": "importer/list-item/geolocation",
                        "id": "mprt_TKqquVbHaSVYqgWhxNjuYDjQ",
                        "attributes": {
                          "status": "pending",
                          "created-at": "2020-07-12T17:16:54.656Z",
                          "completed-at": null,
                          "error-count": 0,
                          "successful-count": 0,
                          "duplicate-count": 0
                        }
                      }
                    }
                  }
                },
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "type": {
                          "const": "importer/list-item/geolocation",
                          "description": "importer/list-item/geolocation",
                          "type": "string"
                        },
                        "id": {
                          "examples": [
                            "mprt_TKqquVbHaSVYqgWhxNjuYDjQ"
                          ],
                          "type": "string"
                        },
                        "attributes": {
                          "properties": {
                            "completed-at": {},
                            "created-at": {
                              "examples": [
                                "2020-07-12T17:16:54.656Z"
                              ],
                              "type": "string"
                            },
                            "duplicate-count": {
                              "default": 0,
                              "examples": [
                                0
                              ],
                              "type": "integer"
                            },
                            "error-count": {
                              "default": 0,
                              "examples": [
                                0
                              ],
                              "type": "integer"
                            },
                            "status": {
                              "examples": [
                                "pending"
                              ],
                              "type": "string"
                            },
                            "successful-count": {
                              "default": 0,
                              "examples": [
                                0
                              ],
                              "type": "integer"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Import Geolocation Lists",
        "tags": [
          "Importers"
        ]
      }
    },
    "/importer/list-item/government-id-numbers": {
      "post": {
        "description": "Bulk import government ID number List Items by uploading a CSV file.\n\nEach row should be the details for a new List Item. The columns we allow are:\n  - id_number\n  - id_class\n\nCommon values for id_class include `pp` for passport and `dl` for driver license. Please contact us or reach out to [support@withpersona.com](mailto:support@withpersona.com) if you need help getting id_class values.",
        "operationId": "import-government-id-number-lists",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/import-government-id-number-lists"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/list-item-importer-csv-request"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "Created",
                    "value": {
                      "data": {
                        "type": "importer/list-item/government-id-number",
                        "id": "mprt_TKqquVbHaSVYqgWhxNjuYDjQ",
                        "attributes": {
                          "status": "pending",
                          "created-at": "2020-07-12T17:16:54.656Z",
                          "completed-at": null,
                          "error-count": 0,
                          "successful-count": 0,
                          "duplicate-count": 0
                        }
                      }
                    }
                  }
                },
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "type": {
                          "type": "string",
                          "const": "importer/list-item/government-id-number",
                          "description": "importer/list-item/government-id-number"
                        },
                        "id": {
                          "examples": [
                            "mprt_TKqquVbHaSVYqgWhxNjuYDjQ"
                          ],
                          "type": "string"
                        },
                        "attributes": {
                          "properties": {
                            "completed-at": {},
                            "created-at": {
                              "examples": [
                                "2020-07-12T17:16:54.656Z"
                              ],
                              "type": "string"
                            },
                            "duplicate-count": {
                              "default": 0,
                              "examples": [
                                0
                              ],
                              "type": "integer"
                            },
                            "error-count": {
                              "default": 0,
                              "examples": [
                                0
                              ],
                              "type": "integer"
                            },
                            "status": {
                              "examples": [
                                "pending"
                              ],
                              "type": "string"
                            },
                            "successful-count": {
                              "default": 0,
                              "examples": [
                                0
                              ],
                              "type": "integer"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Import Government ID Number Lists",
        "tags": [
          "Importers"
        ]
      }
    },
    "/importer/list-item/ip-addresses": {
      "post": {
        "description": "Bulk import IP address List Items by uploading a CSV file.\n\nEach row should be the details for a new List Item. The columns we allow are:\n  - value\n\nBoth IPv4 and IPv6 are supported.",
        "operationId": "import-ip-address-lists",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/import-ip-address-lists"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/list-item-importer-csv-request"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "Created",
                    "value": {
                      "data": {
                        "type": "importer/list-item/ip-address",
                        "id": "mprt_TKqquVbHaSVYqgWhxNjuYDjQ",
                        "attributes": {
                          "status": "pending",
                          "created-at": "2020-07-12T17:16:54.656Z",
                          "completed-at": null,
                          "error-count": 0,
                          "successful-count": 0,
                          "duplicate-count": 0
                        }
                      }
                    }
                  }
                },
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "type": {
                          "const": "importer/list-item/ip-address",
                          "description": "importer/list-item/ip-address",
                          "type": "string"
                        },
                        "id": {
                          "examples": [
                            "mprt_TKqquVbHaSVYqgWhxNjuYDjQ"
                          ],
                          "type": "string"
                        },
                        "attributes": {
                          "properties": {
                            "completed-at": {},
                            "created-at": {
                              "examples": [
                                "2020-07-12T17:16:54.656Z"
                              ],
                              "type": "string"
                            },
                            "duplicate-count": {
                              "default": 0,
                              "examples": [
                                0
                              ],
                              "type": "integer"
                            },
                            "error-count": {
                              "default": 0,
                              "examples": [
                                0
                              ],
                              "type": "integer"
                            },
                            "status": {
                              "examples": [
                                "pending"
                              ],
                              "type": "string"
                            },
                            "successful-count": {
                              "default": 0,
                              "examples": [
                                0
                              ],
                              "type": "integer"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Import IP Address Lists",
        "tags": [
          "Importers"
        ]
      }
    },
    "/importer/list-item/names": {
      "post": {
        "description": "Bulk import name List Items by uploading a CSV file.\n\nEach row should be the details for a new list item. The columns we allow are:\n  - name_first\n  - name_last",
        "operationId": "import-name-lists",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/import-name-lists"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/list-item-importer-csv-request"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "Created",
                    "value": {
                      "data": {
                        "type": "importer/list-item/name",
                        "id": "mprt_TKqquVbHaSVYqgWhxNjuYDjQ",
                        "attributes": {
                          "status": "pending",
                          "created-at": "2020-07-12T17:16:54.656Z",
                          "completed-at": null,
                          "error-count": 0,
                          "successful-count": 0,
                          "duplicate-count": 0
                        }
                      }
                    }
                  }
                },
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "type": {
                          "const": "importer/list-item/name",
                          "description": "importer/list-item/name",
                          "type": "string"
                        },
                        "id": {
                          "examples": [
                            "mprt_TKqquVbHaSVYqgWhxNjuYDjQ"
                          ],
                          "type": "string"
                        },
                        "attributes": {
                          "properties": {
                            "completed-at": {},
                            "created-at": {
                              "examples": [
                                "2020-07-12T17:16:54.656Z"
                              ],
                              "type": "string"
                            },
                            "duplicate-count": {
                              "default": 0,
                              "examples": [
                                0
                              ],
                              "type": "integer"
                            },
                            "error-count": {
                              "default": 0,
                              "examples": [
                                0
                              ],
                              "type": "integer"
                            },
                            "status": {
                              "examples": [
                                "pending"
                              ],
                              "type": "string"
                            },
                            "successful-count": {
                              "default": 0,
                              "examples": [
                                0
                              ],
                              "type": "integer"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Import Name Lists",
        "tags": [
          "Importers"
        ]
      }
    },
    "/importer/list-item/phone-numbers": {
      "post": {
        "description": "Bulk import phone number List Items by uploading a CSV file.\n\nEach row should be the details for a new list item. The columns we allow are:\n  - value",
        "operationId": "import-phone-number-lists",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/import-phone-number-lists"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/list-item-importer-csv-request"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "Created",
                    "value": {
                      "data": {
                        "type": "importer/list-item/phone-number",
                        "id": "mprt_TKqquVbHaSVYqgWhxNjuYDjQ",
                        "attributes": {
                          "status": "pending",
                          "created-at": "2020-07-12T17:16:54.656Z",
                          "completed-at": null,
                          "error-count": 0,
                          "successful-count": 0,
                          "duplicate-count": 0
                        }
                      }
                    }
                  }
                },
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "type": {
                          "const": "importer/list-item/phone-number",
                          "description": "importer/list-item/phone-number",
                          "type": "string"
                        },
                        "id": {
                          "examples": [
                            "mprt_TKqquVbHaSVYqgWhxNjuYDjQ"
                          ],
                          "type": "string"
                        },
                        "attributes": {
                          "properties": {
                            "completed-at": {},
                            "created-at": {
                              "examples": [
                                "2020-07-12T17:16:54.656Z"
                              ],
                              "type": "string"
                            },
                            "duplicate-count": {
                              "default": 0,
                              "examples": [
                                0
                              ],
                              "type": "integer"
                            },
                            "error-count": {
                              "default": 0,
                              "examples": [
                                0
                              ],
                              "type": "integer"
                            },
                            "status": {
                              "examples": [
                                "pending"
                              ],
                              "type": "string"
                            },
                            "successful-count": {
                              "default": 0,
                              "examples": [
                                0
                              ],
                              "type": "integer"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Import Phone Number Lists",
        "tags": [
          "Importers"
        ]
      }
    },
    "/inquiries": {
      "get": {
        "description": "Returns a list of your organization's inquiries.\n\nNote that this endpoint aggregates inquiries across all <<glossary:inquiry template>>(s). See [Pagination](https://docs.withpersona.com/reference/pagination) for more details about handling the response.",
        "operationId": "list-all-inquiries",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/list-all-inquiries"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "in": "query",
            "name": "page",
            "style": "deepObject",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/nested-pagination-query-params"
                },
                {
                  "type": "object",
                  "properties": {
                    "after": {
                      "example": "inq_ABC123"
                    },
                    "before": {
                      "example": "inq_ABC123"
                    }
                  }
                }
              ]
            }
          },
          {
            "in": "query",
            "name": "filter",
            "style": "deepObject",
            "schema": {
              "type": "object",
              "properties": {
                "account-id": {
                  "description": "Filter inquiries by account ID",
                  "examples": [
                    "act_ABC123"
                  ],
                  "type": "string"
                },
                "note": {
                  "description": "Filter inquiries by note. Must be the only filter.",
                  "examples": [
                    "A note saved on an Inquiry"
                  ],
                  "type": "string"
                },
                "reference-id": {
                  "description": "Filter inquiries by reference ID",
                  "examples": [
                    "abc-123"
                  ],
                  "type": "string"
                },
                "template-id": {
                  "description": "Filter inquiries by template ID (use this field if your template ID starts with `tmpl_`)",
                  "examples": [
                    "tmpl_ABC123"
                  ],
                  "type": "string"
                },
                "inquiry-template-id": {
                  "description": "Filter inquiries by inquiry template ID (use this field if your template ID starts with `itmpl_`)",
                  "examples": [
                    "itmpl_ABC123"
                  ],
                  "type": "string"
                },
                "created-at-start": {
                  "description": "Filter inquiries by creation date, equal to or later than",
                  "examples": [
                    "2023-10-11T04:59:21.764Z"
                  ],
                  "format": "date-time",
                  "type": "string"
                },
                "created-at-end": {
                  "description": "Filter inquiries by creation date, earlier than or equal to",
                  "examples": [
                    "2023-10-20T04:59:21.764Z"
                  ],
                  "format": "date-time",
                  "type": "string"
                }
              }
            }
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "OK",
                    "$ref": "#/components/examples/inquiry-list"
                  }
                },
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/inquiry"
                      },
                      "type": "array",
                      "description": "An array of Inquiries"
                    },
                    "links": {
                      "properties": {
                        "prev": {
                          "examples": [
                            "/api/v1/inquiries?page%5Bafter%5D=inq_ABC123"
                          ],
                          "type": [
                            "null",
                            "string"
                          ],
                          "description": "URL pointing to the previous page of data, or null if on the first page."
                        },
                        "next": {
                          "examples": [
                            "/api/v1/inquiries?page%5Bafter%5D=inq_ABC123"
                          ],
                          "type": [
                            "null",
                            "string"
                          ],
                          "description": "URL pointing to the next page of data, or null if on the last page."
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "List all Inquiries",
        "tags": [
          "Inquiries"
        ]
      },
      "post": {
        "description": "Creates a new inquiry with optional pre-filled attributes.\n\nSee [Sessions](https://docs.withpersona.com/docs/inquiry-sessions) for how to continue the inquiry in [Embedded Flow](https://docs.withpersona.com/docs/embedded-flow) or [Hosted Flow](https://docs.withpersona.com/docs/hosted-flow).",
        "operationId": "create-an-inquiry",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/create-an-inquiry"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "data": {
                    "properties": {
                      "attributes": {
                        "properties": {
                          "template-id": {
                            "description": "Template ID for flow requirements (use this field if your template ID starts with `tmpl_`). *You must pass in either template-id OR inquiry-template-id OR inquiry-template-version-id*",
                            "examples": [
                              "tmpl_ABC123"
                            ],
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "inquiry-template-id": {
                            "description": "Template ID for flow requirements (use this field if your template ID starts with `itmpl_`). *You must pass in either template-id OR inquiry-template-id OR inquiry-template-version-id*",
                            "examples": [
                              "itmpl_ABC123"
                            ],
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "inquiry-template-version-id": {
                            "description": "Template Version ID for flow requirements (begins with `itmplv_`). *You must pass in either template-id OR inquiry-template-id OR inquiry-template-version-id*",
                            "examples": [
                              "itmplv_ABC123"
                            ],
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "reference-id": {
                            "description": "Reference ID to refer to an entity in your user model. This field is deprecated in favor of `meta.auto-create-account-reference-id`.",
                            "deprecated": true,
                            "examples": [
                              "abc-123"
                            ],
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "account-id": {
                            "description": "Account ID to associate with this inquiry",
                            "examples": [
                              "act_ABC123"
                            ],
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "creator-email-address": {
                            "description": "Email of the user creating this inquiry in the organization",
                            "examples": [
                              "creator@withpersona.com"
                            ],
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "theme-id": {
                            "description": "Theme ID for styling. Only available for Legacy 2.0 Inquiries.",
                            "examples": [
                              "the_ABC123"
                            ],
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "theme-set-id": {
                            "description": "BETA FEATURE -- Theme Set ID for styling. Only available for Dynamic Flow Inquiries.",
                            "examples": [
                              "theset_ABC123"
                            ],
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "redirect-uri": {
                            "description": "If using the Hosted flow, redirect to this URL after completion",
                            "examples": [
                              "https://yoururl.com/redirect"
                            ],
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "note": {
                            "description": "Unstructured field for your custom use",
                            "examples": [
                              "A note about this inquiry"
                            ],
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "fields": {
                            "$ref": "#/components/schemas/inquiry-fields"
                          },
                          "tags": {
                            "description": "A list of tag names to be associated with the Inquiry.",
                            "items": {
                              "type": "string"
                            },
                            "type": [
                              "array",
                              "null"
                            ]
                          }
                        },
                        "type": "object"
                      }
                    },
                    "required": [
                      "attributes"
                    ],
                    "type": "object"
                  },
                  "meta": {
                    "properties": {
                      "auto-create-account": {
                        "description": "If true, automatically create an Account for the user if one does not exist. Default is true.",
                        "examples": [
                          true
                        ],
                        "type": "boolean"
                      },
                      "auto-create-account-type-id": {
                        "description": "If `auto-create-account` is true, the type ID to use for the Account. If not provided, the default type ID for the organization will be used.\nIf `auto-create-account-reference-id` is present and corresponds to an existing Account, `auto-create-account-type-id` will be ignored.\nWill error if passed when `auto-create-account` is false.",
                        "examples": [
                          "acttp_ABC123"
                        ],
                        "type": "string"
                      },
                      "auto-create-account-reference-id": {
                        "description": "If `auto-create-account` is true, this Inquiry will be attached to the Account with this reference ID, or a new Account will be created with this reference ID if one does not exist.\nWill error if passed when `auto-create-account` is false.",
                        "examples": [
                          "my_reference_id"
                        ],
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "Created",
                    "$ref": "#/components/examples/inquiry"
                  }
                },
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/inquiry"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Create an Inquiry",
        "tags": [
          "Inquiries"
        ]
      }
    },
    "/inquiries/{inquiry-id}": {
      "delete": {
        "description": "Permanently deletes personally identifiable information (PII) for an Inquiry and all associated Verifications, Reports, or other Persona resources. **This action cannot be undone**.\n\nThis endpoint can be used to comply with privacy regulations such as GDPR / CCPA or to enforce data privacy.",
        "operationId": "redact-an-inquiry",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/redact-an-inquiry"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          },
          {
            "name": "inquiry-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "OK",
                    "$ref": "#/components/examples/inquiry"
                  }
                },
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/inquiry"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Redact an Inquiry",
        "tags": [
          "Inquiries"
        ]
      },
      "get": {
        "description": "Retrieves the details of an existing Inquiry.\n\nIn the [Embedded Flow](https://docs.withpersona.com/docs/embedded-flow), the `inquiry-id` is the first parameter of the onStart callback. In the [Hosted Flow](https://docs.withpersona.com/docs/hosted-flow), the `inquiry-id` is a query parameter in the onComplete callback.\n\nTemplate information will be found in `data.relationships.inquiry-template` if the inquiry is a Dynamic Flow inquiry, and in `data.relationships.template` if the inquiry is a Legacy 2.0 inquiry. For more information, see [Dynamic Flow vs. Legacy Templates](https://docs.withpersona.com/docs/inquiry-templates#dynamic-flow-vs-legacy-templates).",
        "operationId": "retrieve-an-inquiry",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/retrieve-an-inquiry"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          },
          {
            "name": "inquiry-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "OK",
                    "$ref": "#/components/examples/inquiry-retrieve"
                  }
                },
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/inquiry"
                    },
                    "included": {
                      "description": "Included by default:\n- Reports\n- Verifications\n- Inquiry Sessions\n- Documents\n- Inquiry Template\n\nAnything else must be explicitly requested with the `include` query parameter.",
                      "$ref": "#/components/schemas/inquiry-included-objects"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Retrieve an Inquiry",
        "tags": [
          "Inquiries"
        ]
      },
      "patch": {
        "description": "Updates an existing Inquiry.\n\nNote that if you use webhooks, updates to inquiries that are not in progress can result in data getting out of sync. For example, updating a completed Inquiry will not cause your Inquiry completed webhook to retrigger.\n\nInquiries represent a snapshot of data collected from an individual, so we generally do not recommend updating an Inquiry's data after the Inquiry has been finalized.",
        "operationId": "update-an-inquiry",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/update-an-inquiry"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          },
          {
            "name": "inquiry-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "data": {
                    "properties": {
                      "attributes": {
                        "properties": {
                          "note": {
                            "description": "Unstructured field for your custom use",
                            "examples": [
                              "A note about this inquiry"
                            ],
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "fields": {
                            "$ref": "#/components/schemas/inquiry-fields"
                          },
                          "tags": {
                            "description": "A list of tag names to be associated with the Inquiry.",
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "OK",
                    "$ref": "#/components/examples/inquiry"
                  }
                },
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/inquiry"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Update an Inquiry",
        "tags": [
          "Inquiries"
        ]
      }
    },
    "/inquiries/{inquiry-id}/add-tag": {
      "post": {
        "description": "Adds a new tag to an Inquiry.",
        "operationId": "inquiries-add-tag",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/inquiries-add-tag"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          },
          {
            "name": "inquiry-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/inquiries-tag-request"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "OK",
                    "$ref": "#/components/examples/inquiry"
                  }
                },
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/inquiry"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Add tag to an Inquiry",
        "tags": [
          "Inquiries"
        ]
      }
    },
    "/inquiries/{inquiry-id}/approve": {
      "post": {
        "description": "Approves an <<glossary:Inquiry>>.\n\nNote that this action will trigger any associated workflows and webhooks.",
        "operationId": "approve-an-inquiry",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/approve-an-inquiry"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          },
          {
            "name": "inquiry-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/inquiries-review-request"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "OK",
                    "$ref": "#/components/examples/inquiry"
                  }
                },
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/inquiry"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Approve an Inquiry",
        "tags": [
          "Inquiries"
        ]
      }
    },
    "/inquiries/{inquiry-id}/decline": {
      "post": {
        "description": "Declines an <<glossary:Inquiry>>.\nNote that this action will trigger any associated workflows and webhooks.",
        "operationId": "decline-an-inquiry",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/decline-an-inquiry"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          },
          {
            "name": "inquiry-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/inquiries-review-request"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "OK",
                    "$ref": "#/components/examples/inquiry"
                  }
                },
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/inquiry"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Decline an Inquiry",
        "tags": [
          "Inquiries"
        ]
      }
    },
    "/inquiries/{inquiry-id}/expire": {
      "post": {
        "description": "Expires an Inquiry and all sessions on the Inquiry. Cancels any pending Verifications on the inquiry.\n\nThe Inquiry can still be resumed after expiry.",
        "operationId": "expire-an-inquiry",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/expire-an-inquiry"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          },
          {
            "name": "inquiry-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "OK",
                    "$ref": "#/components/examples/inquiry"
                  }
                },
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/inquiry"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Expire an Inquiry",
        "tags": [
          "Inquiries"
        ]
      }
    },
    "/inquiries/{inquiry-id}/generate-one-time-link": {
      "post": {
        "description": "Creates a new inquiry session and returns `meta.one-time-link`.",
        "operationId": "generate-a-one-time-link",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/generate-a-one-time-link"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          },
          {
            "description": "Inquiry ID (starts with \"inq_\")",
            "in": "path",
            "name": "inquiry-id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "meta": {
                    "properties": {
                      "expires-in-seconds": {
                        "description": "Number of seconds from now to expire the key (must be greater than 0). If not provided, the one-time link expiration setting from the inquiry template version will apply. Default expiry is 24 hours.",
                        "examples": [
                          3600
                        ],
                        "format": "int32",
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "OK",
                    "$ref": "#/components/examples/inquiry-one-time-link"
                  }
                },
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/inquiry"
                    },
                    "meta": {
                      "properties": {
                        "one-time-link": {
                          "examples": [
                            "https://withpersona.com/verify?code=us1-asdf"
                          ],
                          "type": "string"
                        },
                        "one-time-link-short": {
                          "examples": [
                            "https://perso.na/verify?code=ABC123"
                          ],
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Generate a one-time link for an Inquiry",
        "tags": [
          "Inquiries"
        ]
      }
    },
    "/inquiries/{inquiry-id}/print": {
      "get": {
        "description": "Prints an Inquiry as PDF.",
        "operationId": "print-an-inquiry-pdf",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/print-an-inquiry-pdf"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          },
          {
            "name": "inquiry-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/pdf": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Print Inquiry PDF",
        "tags": [
          "Inquiries"
        ]
      }
    },
    "/inquiries/{inquiry-id}/remove-tag": {
      "post": {
        "description": "Removes an existing tag from an Inquiry.",
        "operationId": "inquiries-remove-tag",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/inquiries-remove-tag"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          },
          {
            "name": "inquiry-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/inquiries-tag-request"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "OK",
                    "$ref": "#/components/examples/inquiry"
                  }
                },
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/inquiry"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Remove tag from an Inquiry",
        "tags": [
          "Inquiries"
        ]
      }
    },
    "/inquiries/{inquiry-id}/resume": {
      "post": {
        "description": "Creates a new inquiry session and returns `meta.session-token`. If the inquiry's status is `expired`, changes the status to `pending`. The `session-token` must be included when loading the inquiry flow if the inquiry's status is `pending`. For more information, see [Resuming Inquiries](https://docs.withpersona.com/docs/inquiries-resuming-inquiries).",
        "operationId": "resume-an-inquiry",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/resume-an-inquiry"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          },
          {
            "name": "inquiry-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "OK",
                    "$ref": "#/components/examples/inquiry-resume"
                  }
                },
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/inquiry"
                    },
                    "meta": {
                      "properties": {
                        "session-token": {
                          "examples": [
                            "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJpcXNlX1Q4UHJxcG9FaHdoVVYxd0hSZXVVOW9mcyIsImF1ZCI6InBlcnNvbmEtdmVyaWZ5IiwiaXNzIjoic3RhZ2luZy53aXRocGVyc29uYS5jb20iLCJpYXQiOjE1NzM4NTI2NjEsIm5iZiI6MTU3Mzg1MjY2MSwiZXhwIjoxNTczOTM5MDYxLCJqdGkiOiI5NWRlNjhkOS1hZjI4LTRiMzItOWIxYi03MjA4MTg3NTI3N2IiLCJzaWQiOiJpcXNlX1Q4UHJxcG9FaHdoVVYxd0hSZXVVOW9mcyJ9.LN6DEnfjP5cZoZ3w41RgyX5QVmutmjHja_bRHOmDjg0"
                          ],
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Resume an Inquiry",
        "tags": [
          "Inquiries"
        ]
      }
    },
    "/inquiries/{inquiry-id}/set-tags": {
      "post": {
        "description": "Sets all tags on an Inquiry. Any tags that are not provided in the request will be removed.",
        "operationId": "inquiries-set-all-tags",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/inquiries-set-all-tags"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          },
          {
            "name": "inquiry-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "meta": {
                    "properties": {
                      "tag-name": {
                        "items": {
                          "type": "string"
                        },
                        "examples": [
                          [
                            "apple",
                            "banana"
                          ],
                          [
                            "orange"
                          ]
                        ],
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "OK",
                    "$ref": "#/components/examples/inquiry"
                  }
                },
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/inquiry"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Set tags on an Inquiry",
        "tags": [
          "Inquiries"
        ]
      }
    },
    "/inquiries/{inquiry-id}/perform-simulate-actions": {
      "post": {
        "description": "Performs a series of simulated actions on a Sandbox Inquiry.",
        "operationId": "inquiries-perform-simulate-actions",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/inquiries-perform-simulate-actions"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          },
          {
            "name": "inquiry-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "meta": {
                    "properties": {
                      "simulate-actions": {
                        "items": {
                          "anyOf": [
                            {
                              "$ref": "#/components/schemas/inquiry-status-action"
                            },
                            {
                              "$ref": "#/components/schemas/create-verification-action"
                            }
                          ],
                          "type": "object"
                        },
                        "example": [
                          {
                            "type": "start_inquiry"
                          },
                          {
                            "type": "create_failed_verification",
                            "data": {
                              "verification-template-id": "vtmpl_CCLT7pvBZM8z5fumdb3QvW5cSrdr"
                            }
                          },
                          {
                            "type": "create_passed_verification",
                            "data": {
                              "verification-template-id": "vtmpl_CCLT7pvBZM8z5fumdb3QvW5cSrdr"
                            }
                          },
                          {
                            "type": "complete_inquiry"
                          },
                          {
                            "type": "approve_inquiry"
                          }
                        ],
                        "type": "array"
                      }
                    },
                    "required": [
                      "simulate-actions"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "meta"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "OK",
                    "$ref": "#/components/examples/inquiry"
                  }
                },
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/inquiry"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Perform Simulate Actions",
        "tags": [
          "Inquiries"
        ]
      }
    },
    "/inquiry-sessions": {
      "get": {
        "description": "Retrieves a list of Inquiry Sessions.",
        "operationId": "list-all-inquiry-sessions",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/list-all-inquiry-sessions"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          },
          {
            "in": "query",
            "name": "filter",
            "style": "deepObject",
            "schema": {
              "type": "object",
              "properties": {
                "inquiry-id": {
                  "description": "Filter inquiry sessions by inquiry ID",
                  "type": "string",
                  "example": "inq_ABC123"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "OK",
                    "value": {
                      "data": [
                        {
                          "type": "inquiry-session",
                          "id": "iqse_ABC123",
                          "attributes": {
                            "status": "expired",
                            "created-at": "2023-07-25T04:15:20.000Z",
                            "started-at": "2023-07-25T05:14:50.000Z",
                            "expired-at": "2023-07-26T05:14:50.000Z",
                            "ip-address": "127.0.0.1",
                            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36",
                            "os-name": "Mac",
                            "os-full-version": "10.15.7",
                            "device-type": "desktop",
                            "device-name": null,
                            "browser-name": "Chrome",
                            "browser-full-version": "115.0.0.0",
                            "mobile-sdk-name": null,
                            "mobile-sdk-full-version": null,
                            "device-handoff-method": null,
                            "is-proxy": false,
                            "is-tor": false,
                            "is-datacenter": false,
                            "threat-level": "low",
                            "country-code": "US",
                            "country-name": "United States",
                            "region-code": "CA",
                            "region-name": "California",
                            "latitude": 37.7688,
                            "longitude": -122.262
                          },
                          "relationships": {
                            "inquiry": {
                              "data": {
                                "type": "inquiry",
                                "id": "inq_ABC123"
                              }
                            }
                          }
                        }
                      ],
                      "links": {
                        "prev": null,
                        "next": null
                      }
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/inquiry-session"
                      }
                    },
                    "links": {
                      "type": "object",
                      "properties": {
                        "prev": {
                          "type": [
                            "string",
                            "null"
                          ],
                          "examples": [
                            "/api/v1/inquiry-sessions?page%5Bbefore%5D=iqse_ABC123"
                          ]
                        },
                        "next": {
                          "type": [
                            "string",
                            "null"
                          ],
                          "examples": [
                            "/api/v1/inquiry-sessions?page%5Bafter%5D=iqse_ABC123"
                          ]
                        }
                      }
                    }
                  }
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "List all Inquiry Sessions",
        "tags": [
          "Inquiry Sessions"
        ]
      },
      "post": {
        "description": "Creates a new Inquiry Session.",
        "operationId": "create-an-inquiry-session",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/create-an-inquiry-session"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "data": {
                    "properties": {
                      "attributes": {
                        "properties": {
                          "inquiry-id": {
                            "description": "Inquiry ID of the session",
                            "type": "string"
                          }
                        },
                        "required": [
                          "inquiry-id"
                        ],
                        "type": "object"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "Created",
                    "$ref": "#/components/examples/inquiry-session"
                  }
                },
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/inquiry-session"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Create an Inquiry Session",
        "tags": [
          "Inquiry Sessions"
        ]
      }
    },
    "/inquiry-sessions/expire-all": {
      "post": {
        "description": "Expires all active Inquiry Sessions for a given set of Inquiries.",
        "operationId": "expire-inquiry-sessions",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/expire-inquiry-sessions"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "meta": {
                    "properties": {
                      "inquiry-ids": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object",
                    "required": [
                      "inquiry-ids"
                    ]
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "OK",
                    "value": {
                      "data": [
                        {
                          "type": "inquiry-session",
                          "id": "iqse_ABC123",
                          "attributes": {
                            "status": "expired",
                            "created-at": "2023-07-25T04:15:20.000Z",
                            "started-at": "2023-07-25T05:14:50.000Z",
                            "expired-at": "2023-07-26T05:14:50.000Z",
                            "ip-address": "127.0.0.1",
                            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36",
                            "os-name": "Mac",
                            "os-full-version": "10.15.7",
                            "device-type": "desktop",
                            "device-name": null,
                            "browser-name": "Chrome",
                            "browser-full-version": "115.0.0.0",
                            "mobile-sdk-name": null,
                            "mobile-sdk-full-version": null,
                            "device-handoff-method": null,
                            "is-proxy": false,
                            "is-tor": false,
                            "is-datacenter": false,
                            "threat-level": "low",
                            "country-code": "US",
                            "country-name": "United States",
                            "region-code": "CA",
                            "region-name": "California",
                            "latitude": 37.7688,
                            "longitude": -122.262
                          },
                          "relationships": {
                            "inquiry": {
                              "data": {
                                "type": "inquiry",
                                "id": "inq_ABC123"
                              }
                            }
                          }
                        }
                      ]
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/inquiry-session"
                      }
                    }
                  }
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Expire Inquiry Sessions",
        "tags": [
          "Inquiry Sessions"
        ]
      }
    },
    "/inquiry-sessions/{inquiry-session-id}": {
      "get": {
        "description": "Retrieves details of a specific Inquiry Session.",
        "operationId": "retrieve-an-inquiry-session",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/retrieve-an-inquiry-session"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          },
          {
            "description": "Inquiry session ID",
            "in": "path",
            "name": "inquiry-session-id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "OK",
                    "$ref": "#/components/examples/inquiry-session"
                  }
                },
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/inquiry-session"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Retrieve an Inquiry Session",
        "tags": [
          "Inquiry Sessions"
        ]
      }
    },
    "/inquiry-sessions/{inquiry-session-id}/expire": {
      "post": {
        "description": "Expires a specific Inquiry Session.",
        "operationId": "expire-an-inquiry-session",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/expire-an-inquiry-session"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          },
          {
            "name": "inquiry-session-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "OK",
                    "$ref": "#/components/examples/inquiry-session"
                  }
                },
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/inquiry-session"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Expire an Inquiry Session",
        "tags": [
          "Inquiry Sessions"
        ]
      }
    },
    "/inquiry-sessions/{inquiry-session-id}/generate-one-time-link": {
      "post": {
        "description": "Generates a one-time link for a specific Inquiry Session.",
        "operationId": "generate-a-one-time-link-for-an-inquiry-session",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/generate-a-one-time-link-for-an-inquiry-session"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          },
          {
            "name": "inquiry-session-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "OK",
                    "value": {
                      "data": {
                        "type": "inquiry-session",
                        "id": "iqse_ABC123",
                        "attributes": {
                          "status": "expired",
                          "created-at": "2023-07-25T04:15:20.000Z",
                          "started-at": "2023-07-25T05:14:50.000Z",
                          "expired-at": "2023-07-26T05:14:50.000Z",
                          "ip-address": "127.0.0.1",
                          "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36",
                          "os-name": "Mac",
                          "os-full-version": "10.15.7",
                          "device-type": "desktop",
                          "device-name": null,
                          "browser-name": "Chrome",
                          "browser-full-version": "115.0.0.0",
                          "mobile-sdk-name": null,
                          "mobile-sdk-full-version": null,
                          "device-handoff-method": null,
                          "is-proxy": false,
                          "is-tor": false,
                          "is-datacenter": false,
                          "threat-level": "low",
                          "country-code": "US",
                          "country-name": "United States",
                          "region-code": "CA",
                          "region-name": "California",
                          "latitude": 37.7688,
                          "longitude": -122.262
                        },
                        "relationships": {
                          "inquiry": {
                            "data": {
                              "type": "inquiry",
                              "id": "inq_ABC123"
                            }
                          }
                        }
                      },
                      "meta": {
                        "one-time-link": "https://withpersona.com/verify?code=CODE",
                        "one-time-link-short": "https://perso.na/CODE"
                      }
                    }
                  }
                },
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/inquiry-session"
                    },
                    "meta": {
                      "properties": {
                        "one-time-link": {
                          "type": "string"
                        },
                        "one-time-link-short": {
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Generate a one-time link for Inquiry Session",
        "tags": [
          "Inquiry Sessions"
        ]
      }
    },
    "/list-item/browser-fingerprints": {
      "post": {
        "description": "Create a new item in a <<glossary:list>>.",
        "operationId": "create-a-browser-fingerprint-list-item",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/create-a-browser-fingerprint-list-item"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "data": {
                    "properties": {
                      "attributes": {
                        "properties": {
                          "list-id": {
                            "description": "ID of the list to add this item to. List must be a Browser Fingerprint List.",
                            "type": "string"
                          },
                          "value": {
                            "description": "Browser fingerprint to add to list.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "Created",
                    "$ref": "#/components/examples/list-item-browser-fingerprint"
                  }
                },
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/list-item-browser-fingerprint"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Create a Browser Fingerprint List Item",
        "tags": [
          "List Items"
        ]
      }
    },
    "/list-item/browser-fingerprints/{list-item-id}": {
      "delete": {
        "description": "Archived items are not matched against new inquiries.",
        "operationId": "archive-a-browser-fingerprint-list-item",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/archive-a-browser-fingerprint-list-item"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          },
          {
            "description": "ID of list item to archive.",
            "in": "path",
            "name": "list-item-id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "OK",
                    "$ref": "#/components/examples/list-item-browser-fingerprint-archived"
                  }
                },
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/list-item-browser-fingerprint"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Archive a Browser Fingerprint List Item",
        "tags": [
          "List Items"
        ]
      }
    },
    "/list-item/countries": {
      "post": {
        "description": "Create a new item in a <<glossary:list>>.",
        "operationId": "create-a-country-list-item",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/create-a-country-list-item"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "data": {
                    "properties": {
                      "attributes": {
                        "properties": {
                          "country-code": {
                            "description": "Country code to add to list.",
                            "type": "string"
                          },
                          "list-id": {
                            "description": "ID of the list to add this item to. List must be a Country List.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "Created",
                    "$ref": "#/components/examples/list-item-country"
                  }
                },
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/list-item-country"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Create a Country List Item",
        "tags": [
          "List Items"
        ]
      }
    },
    "/list-item/countries/{list-item-id}": {
      "delete": {
        "description": "Archived items are not matched against new inquiries.",
        "operationId": "archive-a-country-list-item",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/archive-a-country-list-item"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          },
          {
            "description": "ID of list item to archive.",
            "in": "path",
            "name": "list-item-id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "OK",
                    "$ref": "#/components/examples/list-item-country-archived"
                  }
                },
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/list-item-country"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Archive a Country List Item",
        "tags": [
          "List Items"
        ]
      }
    },
    "/list-item/email-addresses": {
      "post": {
        "description": "Create a new item in a <<glossary:list>>.",
        "operationId": "create-an-email-address-list-item",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/create-an-email-address-list-item"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "data": {
                    "properties": {
                      "attributes": {
                        "properties": {
                          "list-id": {
                            "description": "ID of the list to add this item to. List must be an Email Address List.",
                            "type": "string"
                          },
                          "match-type": {
                            "description": "Can be either `email_address` or `domain`.",
                            "type": "string"
                          },
                          "value": {
                            "description": "Email address to add.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "Created",
                    "$ref": "#/components/examples/list-item-email-address"
                  }
                },
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/list-item-email-address"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Create an Email Address List Item",
        "tags": [
          "List Items"
        ]
      }
    },
    "/list-item/email-addresses/{list-item-id}": {
      "delete": {
        "description": "Archived items are not matched against new inquiries.",
        "operationId": "archive-an-email-address-list-item",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/archive-an-email-address-list-item"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          },
          {
            "description": "ID of list item to archive.",
            "in": "path",
            "name": "list-item-id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "OK",
                    "$ref": "#/components/examples/list-item-email-address-archived"
                  }
                },
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/list-item-email-address"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Archive an Email Address List Item",
        "tags": [
          "List Items"
        ]
      }
    },
    "/list-item/faces": {
      "post": {
        "description": "Create a new item in a <<glossary:list>>.",
        "operationId": "create-a-face-list-item",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/create-a-face-list-item"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "data": {
                    "properties": {
                      "attributes": {
                        "properties": {
                          "face-photo": {
                            "properties": {
                              "data": {
                                "description": "Base64 encoded file",
                                "format": "binary",
                                "type": "string"
                              },
                              "filename": {
                                "description": "Name of file",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "list-id": {
                            "description": "ID of the list to add this item to. List must be a Face List.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "Created",
                    "$ref": "#/components/examples/list-item-face"
                  }
                },
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/list-item-face"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Create a Face List Item",
        "tags": [
          "List Items"
        ]
      }
    },
    "/list-item/faces/{list-item-id}": {
      "delete": {
        "description": "Archived items are not matched against new inquiries.",
        "operationId": "archive-a-face-list-item",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/archive-a-face-list-item"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          },
          {
            "description": "ID of list item to archive.",
            "in": "path",
            "name": "list-item-id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "OK",
                    "$ref": "#/components/examples/list-item-face-archived"
                  }
                },
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/list-item-face"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Archive a Face List Item",
        "tags": [
          "List Items"
        ]
      }
    },
    "/list-item/fields": {
      "post": {
        "description": "Create a new item in a <<glossary:list>>.",
        "operationId": "create-a-field-list-item",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/create-a-field-list-item"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "data": {
                    "properties": {
                      "attributes": {
                        "properties": {
                          "list-id": {
                            "description": "ID of the list to add this item to. List must be a Field List.",
                            "type": "string"
                          },
                          "field-value": {
                            "description": "Field value to add to the list.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "Created",
                    "$ref": "#/components/examples/list-item-field"
                  }
                },
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/list-item-field"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Create a Field List Item",
        "tags": [
          "List Items"
        ]
      }
    },
    "/list-item/fields/{list-item-id}": {
      "delete": {
        "description": "Archived items are not matched against new inquiries.",
        "operationId": "archive-a-field-list-item",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/archive-a-field-list-item"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          },
          {
            "description": "ID of list item to archive.",
            "in": "path",
            "name": "list-item-id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "OK",
                    "$ref": "#/components/examples/list-item-field-archived"
                  }
                },
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/list-item-field"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Archive a Field List Item",
        "tags": [
          "List Items"
        ]
      }
    },
    "/list-item/geolocations": {
      "post": {
        "description": "Create a new item in a <<glossary:list>>.",
        "operationId": "create-a-geolocation-list-item",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/create-a-geolocation-list-item"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "data": {
                    "properties": {
                      "attributes": {
                        "properties": {
                          "latitude": {
                            "description": "Latitude of the geolocation item (-90 to 90).",
                            "format": "float",
                            "type": "number"
                          },
                          "list-id": {
                            "description": "ID of the list to add this item to. List must be a Geolocation List.",
                            "type": "string"
                          },
                          "longitude": {
                            "description": "Longitude of geolocation item (-180 to 180).",
                            "format": "float",
                            "type": "number"
                          },
                          "radius-meters": {
                            "description": "Radius in meters from point to be considered for match distance.",
                            "format": "float",
                            "type": "number"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "Created",
                    "$ref": "#/components/examples/list-item-geolocation"
                  }
                },
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/list-item-geolocation"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Create a Geolocation List Item",
        "tags": [
          "List Items"
        ]
      }
    },
    "/list-item/geolocations/{list-item-id}": {
      "delete": {
        "description": "Archived items are not matched against new inquiries.",
        "operationId": "archive-a-geolocation-list-item",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/archive-a-geolocation-list-item"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          },
          {
            "description": "ID of list item to archive.",
            "in": "path",
            "name": "list-item-id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "OK",
                    "$ref": "#/components/examples/list-item-geolocation-archived"
                  }
                },
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/list-item-geolocation"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Archive a Geolocation List Item",
        "tags": [
          "List Items"
        ]
      }
    },
    "/list-item/government-id-numbers": {
      "post": {
        "description": "Create a new item in a <<glossary:list>>.",
        "operationId": "create-a-government-id-number-list-item",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/create-a-government-id-number-list-item"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "data": {
                    "properties": {
                      "attributes": {
                        "properties": {
                          "id-class": {
                            "description": "Common values for id-class include `'pp'` for passport and`'dl'` for driver license.",
                            "type": "string"
                          },
                          "id-number": {
                            "description": "Number of the ID.",
                            "type": "string"
                          },
                          "list-id": {
                            "description": "ID of the list to add this item to. List must be a Government ID Number List.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "Created",
                    "$ref": "#/components/examples/list-item-government-id-number"
                  }
                },
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/list-item-government-id-number"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Create a Government ID Number List Item",
        "tags": [
          "List Items"
        ]
      }
    },
    "/list-item/government-id-numbers/{list-item-id}": {
      "delete": {
        "description": "Archived items are not matched against new inquiries.",
        "operationId": "archive-a-government-id-number-list-item",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/archive-a-government-id-number-list-item"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          },
          {
            "description": "ID of list item to archive.",
            "in": "path",
            "name": "list-item-id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "OK",
                    "$ref": "#/components/examples/list-item-government-id-number-archived"
                  }
                },
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/list-item-government-id-number"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Archive a Government ID Number List Item",
        "tags": [
          "List Items"
        ]
      }
    },
    "/list-item/ip-addresses": {
      "post": {
        "description": "Create a new item in a <<glossary:list>>.",
        "operationId": "create-an-ip-address-list-item",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/create-an-ip-address-list-item"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "data": {
                    "properties": {
                      "attributes": {
                        "properties": {
                          "list-id": {
                            "description": "ID of the list to add this item to. List must be an IP Address List.",
                            "type": "string"
                          },
                          "value": {
                            "description": "IP address to add. IPv4 and IPv6 are supported.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "Created",
                    "$ref": "#/components/examples/list-item-ip-address"
                  }
                },
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/list-item-ip-address"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Create an IP Address List Item",
        "tags": [
          "List Items"
        ]
      }
    },
    "/list-item/ip-addresses/{list-item-id}": {
      "delete": {
        "description": "Archived items are not matched against new inquiries.",
        "operationId": "archive-an-ip-address-list-item",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/archive-an-ip-address-list-item"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          },
          {
            "description": "ID of list item to archive.",
            "in": "path",
            "name": "list-item-id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "OK",
                    "$ref": "#/components/examples/list-item-address-archived"
                  }
                },
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/list-item-ip-address"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Archive an IP Address List Item",
        "tags": [
          "List Items"
        ]
      }
    },
    "/list-item/names": {
      "post": {
        "description": "Create a new item in a <<glossary:list>>.",
        "operationId": "create-a-name-list-item",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/create-a-name-list-item"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "data": {
                    "properties": {
                      "attributes": {
                        "properties": {
                          "list-id": {
                            "description": "ID of the list to add this item to. List must be a Name List.",
                            "type": "string"
                          },
                          "name-first": {
                            "description": "First name of the name to add to the list.",
                            "type": "string"
                          },
                          "name-last": {
                            "description": "Last name of the name to add to the list.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "Created",
                    "$ref": "#/components/examples/list-item-name"
                  }
                },
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/list-item-name"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Create a Name List Item",
        "tags": [
          "List Items"
        ]
      }
    },
    "/list-item/names/{list-item-id}": {
      "delete": {
        "description": "Archived items are not matched against new inquiries.",
        "operationId": "archive-a-name-list-item",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/archive-a-name-list-item"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          },
          {
            "description": "ID of list item to archive.",
            "in": "path",
            "name": "list-item-id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "OK",
                    "$ref": "#/components/examples/list-item-name-archived"
                  }
                },
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/list-item-name"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Archive a Name List Item",
        "tags": [
          "List Items"
        ]
      }
    },
    "/list-item/phone-numbers": {
      "post": {
        "description": "Create a new item in a <<glossary:list>>.",
        "operationId": "create-a-phone-number-list-item",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/create-a-phone-number-list-item"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "data": {
                    "properties": {
                      "attributes": {
                        "properties": {
                          "list-id": {
                            "description": "ID of the list to add this item to. List must be a Name List.",
                            "type": "string"
                          },
                          "value": {
                            "description": "Phone number to add.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "Created",
                    "$ref": "#/components/examples/list-item-phone-number"
                  }
                },
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/list-item-phone-number"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Create a Phone Number List Item",
        "tags": [
          "List Items"
        ]
      }
    },
    "/list-item/phone-numbers/{list-item-id}": {
      "delete": {
        "description": "Archived items are not matched against new inquiries.",
        "operationId": "archive-a-phone-number-list-item",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/archive-a-phone-number-list-item"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          },
          {
            "description": "ID of list item to archive.",
            "in": "path",
            "name": "list-item-id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "OK",
                    "$ref": "#/components/examples/list-item-phone-number-archived"
                  }
                },
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/list-item-phone-number"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Archive a Phone Number List Item",
        "tags": [
          "List Items"
        ]
      }
    },
    "/list-item/strings": {
      "post": {
        "description": "Create a new item in a <<glossary:list>>.",
        "operationId": "create-a-string-list-item",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/create-a-string-list-item"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "data": {
                    "properties": {
                      "attributes": {
                        "properties": {
                          "list-id": {
                            "description": "ID of the list to add this item to. List must be a String List.",
                            "type": "string"
                          },
                          "value": {
                            "description": "String value to add to the list.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "Created",
                    "$ref": "#/components/examples/list-item-string"
                  }
                },
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/list-item-string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Create a String List Item",
        "tags": [
          "List Items"
        ]
      }
    },
    "/list-item/strings/{list-item-id}": {
      "delete": {
        "description": "Archived items are not matched against new inquiries.",
        "operationId": "archive-a-string-list-item",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/archive-a-string-list-item"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          },
          {
            "description": "ID of list item to archive.",
            "in": "path",
            "name": "list-item-id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "OK",
                    "$ref": "#/components/examples/list-item-string-archived"
                  }
                },
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/list-item-string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Archive a String List Item",
        "tags": [
          "List Items"
        ]
      }
    },
    "/list/browser-fingerprints": {
      "post": {
        "summary": "Create a Browser Fingerprint List",
        "tags": [
          "Lists"
        ],
        "description": "Create a new <<glossary:list>> for your organization.",
        "operationId": "create-a-browser-fingerprint-list",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/create-a-browser-fingerprint-list"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "data": {
                    "properties": {
                      "attributes": {
                        "properties": {
                          "name": {
                            "description": "Name of the list",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "examples": {
                "exampleRequest": {
                  "summary": "Example Request",
                  "value": {
                    "data": {
                      "attributes": {
                        "name": "My New List"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "type": {
                          "const": "list/browser-fingerprint",
                          "description": "list/browser-fingerprint",
                          "type": "string"
                        },
                        "id": {
                          "type": "string"
                        },
                        "attributes": {
                          "properties": {
                            "name": {
                              "type": "string"
                            },
                            "status": {
                              "type": "string"
                            },
                            "archived-at": {
                              "type": [
                                "null",
                                "string"
                              ]
                            },
                            "created-at": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "updated-at": {
                              "type": "string",
                              "format": "date-time"
                            }
                          }
                        },
                        "relationships": {
                          "properties": {
                            "list-items": {
                              "properties": {
                                "data": {
                                  "type": "array",
                                  "items": {},
                                  "description": "List items associated with this list. This should always be empty when creating a new list."
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Result": {
                    "summary": "Created",
                    "value": {
                      "data": {
                        "type": "list/browser-fingerprint",
                        "id": "lst_kRcKDJ4c8wF2AmAghggtYxboX",
                        "attributes": {
                          "name": "My New List",
                          "status": "active",
                          "archived-at": null,
                          "created-at": "2023-08-30T20:22:07.000Z",
                          "updated-at": "2023-08-30T20:22:07.000Z"
                        },
                        "relationships": {
                          "list-items": {
                            "data": []
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        }
      }
    },
    "/list/countries": {
      "post": {
        "summary": "Create a Country List",
        "tags": [
          "Lists"
        ],
        "description": "Create a new <<glossary:list>> for your organization.",
        "operationId": "create-a-country-list",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/create-a-country-list"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "data": {
                    "properties": {
                      "attributes": {
                        "properties": {
                          "name": {
                            "description": "Name of the list",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "examples": {
                "exampleRequest": {
                  "summary": "Example Request",
                  "value": {
                    "data": {
                      "attributes": {
                        "name": "My New List"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "type": {
                          "const": "list/country",
                          "description": "list/country",
                          "type": "string"
                        },
                        "id": {
                          "type": "string"
                        },
                        "attributes": {
                          "properties": {
                            "name": {
                              "type": "string"
                            },
                            "status": {
                              "type": "string"
                            },
                            "archived-at": {
                              "type": [
                                "null",
                                "string"
                              ]
                            },
                            "created-at": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "updated-at": {
                              "type": "string",
                              "format": "date-time"
                            }
                          }
                        },
                        "relationships": {
                          "properties": {
                            "list-items": {
                              "properties": {
                                "data": {
                                  "type": "array",
                                  "items": {},
                                  "description": "List items associated with this list. This should always be empty when creating a new list."
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Result": {
                    "summary": "Created",
                    "value": {
                      "data": {
                        "type": "list/country",
                        "id": "lst_kRcKDJ4c8wF2AmAghggtYxboX",
                        "attributes": {
                          "name": "My New List",
                          "status": "active",
                          "archived-at": null,
                          "created-at": "2023-08-30T20:22:07.000Z",
                          "updated-at": "2023-08-30T20:22:07.000Z"
                        },
                        "relationships": {
                          "list-items": {
                            "data": []
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        }
      }
    },
    "/list/email-addresses": {
      "post": {
        "summary": "Create an Email Address List",
        "tags": [
          "Lists"
        ],
        "description": "Create a new <<glossary:list>> for your organization.",
        "operationId": "create-an-email-address-list",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/create-an-email-address-list"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "data": {
                    "properties": {
                      "attributes": {
                        "properties": {
                          "name": {
                            "description": "Name of the list",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "examples": {
                "exampleRequest": {
                  "summary": "Example Request",
                  "value": {
                    "data": {
                      "attributes": {
                        "name": "My New List"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "type": {
                          "const": "list/email-address",
                          "description": "list/email-address",
                          "type": "string"
                        },
                        "id": {
                          "type": "string"
                        },
                        "attributes": {
                          "properties": {
                            "name": {
                              "type": "string"
                            },
                            "status": {
                              "type": "string"
                            },
                            "archived-at": {
                              "type": [
                                "null",
                                "string"
                              ]
                            },
                            "created-at": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "updated-at": {
                              "type": "string",
                              "format": "date-time"
                            }
                          }
                        },
                        "relationships": {
                          "properties": {
                            "list-items": {
                              "properties": {
                                "data": {
                                  "type": "array",
                                  "items": {},
                                  "description": "List items associated with this list. This should always be empty when creating a new list."
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Result": {
                    "summary": "Created",
                    "value": {
                      "data": {
                        "type": "list/email-address",
                        "id": "lst_kRcKDJ4c8wF2AmAghggtYxboX",
                        "attributes": {
                          "name": "My New List",
                          "status": "active",
                          "archived-at": null,
                          "created-at": "2023-08-30T20:22:07.000Z",
                          "updated-at": "2023-08-30T20:22:07.000Z"
                        },
                        "relationships": {
                          "list-items": {
                            "data": []
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        }
      }
    },
    "/list/faces": {
      "post": {
        "summary": "Create a Face List",
        "tags": [
          "Lists"
        ],
        "description": "Create a new <<glossary:list>> for your organization.",
        "operationId": "create-a-face-list",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/create-a-face-list"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "data": {
                    "properties": {
                      "attributes": {
                        "properties": {
                          "name": {
                            "description": "Name of the list",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "examples": {
                "exampleRequest": {
                  "summary": "Example Request",
                  "value": {
                    "data": {
                      "attributes": {
                        "name": "My New List"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "type": {
                          "const": "list/face",
                          "description": "list/face",
                          "type": "string"
                        },
                        "id": {
                          "type": "string"
                        },
                        "attributes": {
                          "properties": {
                            "name": {
                              "type": "string"
                            },
                            "status": {
                              "type": "string"
                            },
                            "archived-at": {
                              "type": [
                                "null",
                                "string"
                              ]
                            },
                            "created-at": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "updated-at": {
                              "type": "string",
                              "format": "date-time"
                            }
                          }
                        },
                        "relationships": {
                          "properties": {
                            "list-items": {
                              "properties": {
                                "data": {
                                  "type": "array",
                                  "items": {},
                                  "description": "List items associated with this list. This should always be empty when creating a new list."
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Result": {
                    "summary": "Created",
                    "value": {
                      "data": {
                        "type": "list/face",
                        "id": "lst_kRcKDJ4c8wF2AmAghggtYxboX",
                        "attributes": {
                          "name": "My New List",
                          "status": "active",
                          "archived-at": null,
                          "created-at": "2023-08-30T20:22:07.000Z",
                          "updated-at": "2023-08-30T20:22:07.000Z"
                        },
                        "relationships": {
                          "list-items": {
                            "data": []
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        }
      }
    },
    "/list/geolocations": {
      "post": {
        "summary": "Create a Geolocation List",
        "tags": [
          "Lists"
        ],
        "description": "Create a new <<glossary:list>> for your organization.",
        "operationId": "create-a-geolocation-list",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/create-a-geolocation-list"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "data": {
                    "properties": {
                      "attributes": {
                        "properties": {
                          "name": {
                            "description": "Name of the list",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "examples": {
                "exampleRequest": {
                  "summary": "Example Request",
                  "value": {
                    "data": {
                      "attributes": {
                        "name": "My New List"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "type": {
                          "const": "list/geolocation",
                          "description": "list/geolocation",
                          "type": "string"
                        },
                        "id": {
                          "type": "string"
                        },
                        "attributes": {
                          "properties": {
                            "name": {
                              "type": "string"
                            },
                            "status": {
                              "type": "string"
                            },
                            "archived-at": {
                              "type": [
                                "null",
                                "string"
                              ]
                            },
                            "created-at": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "updated-at": {
                              "type": "string",
                              "format": "date-time"
                            }
                          }
                        },
                        "relationships": {
                          "properties": {
                            "list-items": {
                              "properties": {
                                "data": {
                                  "type": "array",
                                  "items": {},
                                  "description": "List items associated with this list. This should always be empty when creating a new list."
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Result": {
                    "summary": "Created",
                    "value": {
                      "data": {
                        "type": "list/geolocation",
                        "id": "lst_kRcKDJ4c8wF2AmAghggtYxboX",
                        "attributes": {
                          "name": "My New List",
                          "status": "active",
                          "archived-at": null,
                          "created-at": "2023-08-30T20:22:07.000Z",
                          "updated-at": "2023-08-30T20:22:07.000Z"
                        },
                        "relationships": {
                          "list-items": {
                            "data": []
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        }
      }
    },
    "/list/government-id-numbers": {
      "post": {
        "summary": "Create a Government ID Number List",
        "tags": [
          "Lists"
        ],
        "description": "Create a new <<glossary:list>> for your organization.",
        "operationId": "create-a-government-id-number-list",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/create-a-government-id-number-list"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "data": {
                    "properties": {
                      "attributes": {
                        "properties": {
                          "name": {
                            "description": "Name of the list",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "examples": {
                "exampleRequest": {
                  "summary": "Example Request",
                  "value": {
                    "data": {
                      "attributes": {
                        "name": "My New List"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "type": {
                          "const": "list/government-id-number",
                          "description": "list/government-id-number",
                          "type": "string"
                        },
                        "id": {
                          "type": "string"
                        },
                        "attributes": {
                          "properties": {
                            "name": {
                              "type": "string"
                            },
                            "status": {
                              "type": "string"
                            },
                            "archived-at": {
                              "type": [
                                "null",
                                "string"
                              ]
                            },
                            "created-at": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "updated-at": {
                              "type": "string",
                              "format": "date-time"
                            }
                          }
                        },
                        "relationships": {
                          "properties": {
                            "list-items": {
                              "properties": {
                                "data": {
                                  "type": "array",
                                  "items": {},
                                  "description": "List items associated with this list. This should always be empty when creating a new list."
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Result": {
                    "summary": "Created",
                    "value": {
                      "data": {
                        "type": "list/government-id-number",
                        "id": "lst_kRcKDJ4c8wF2AmAghggtYxboX",
                        "attributes": {
                          "name": "My New List",
                          "status": "active",
                          "archived-at": null,
                          "created-at": "2023-08-30T20:22:07.000Z",
                          "updated-at": "2023-08-30T20:22:07.000Z"
                        },
                        "relationships": {
                          "list-items": {
                            "data": []
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        }
      }
    },
    "/list/ip-addresses": {
      "post": {
        "summary": "Create an IP Address List",
        "tags": [
          "Lists"
        ],
        "description": "Create a new <<glossary:list>> for your organization.",
        "operationId": "create-an-ip-address-list",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/create-an-ip-address-list"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "data": {
                    "properties": {
                      "attributes": {
                        "properties": {
                          "name": {
                            "description": "Name of the list",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "examples": {
                "exampleRequest": {
                  "summary": "Example Request",
                  "value": {
                    "data": {
                      "attributes": {
                        "name": "My New List"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "type": {
                          "const": "list/ip-address",
                          "description": "list/ip-address",
                          "type": "string"
                        },
                        "id": {
                          "type": "string"
                        },
                        "attributes": {
                          "properties": {
                            "name": {
                              "type": "string"
                            },
                            "status": {
                              "type": "string"
                            },
                            "archived-at": {
                              "type": [
                                "null",
                                "string"
                              ]
                            },
                            "created-at": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "updated-at": {
                              "type": "string",
                              "format": "date-time"
                            }
                          }
                        },
                        "relationships": {
                          "properties": {
                            "list-items": {
                              "properties": {
                                "data": {
                                  "type": "array",
                                  "items": {},
                                  "description": "List items associated with this list. This should always be empty when creating a new list."
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Result": {
                    "summary": "Created",
                    "value": {
                      "data": {
                        "type": "list/ip-address",
                        "id": "lst_kRcKDJ4c8wF2AmAghggtYxboX",
                        "attributes": {
                          "name": "My New List",
                          "status": "active",
                          "archived-at": null,
                          "created-at": "2023-08-30T20:22:07.000Z",
                          "updated-at": "2023-08-30T20:22:07.000Z"
                        },
                        "relationships": {
                          "list-items": {
                            "data": []
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        }
      }
    },
    "/list/names": {
      "post": {
        "summary": "Create a Name List",
        "tags": [
          "Lists"
        ],
        "description": "Create a new <<glossary:list>> for your organization.",
        "operationId": "create-a-name-list",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/create-a-name-list"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "data": {
                    "properties": {
                      "attributes": {
                        "properties": {
                          "allow-fuzzy-name-first": {
                            "description": "Flag to determine if the list should use fuzzy matching for first name",
                            "type": "boolean"
                          },
                          "name": {
                            "description": "Name of the list",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "examples": {
                "exampleRequest": {
                  "summary": "Example Request",
                  "value": {
                    "data": {
                      "attributes": {
                        "name": "My New List",
                        "allow-fuzzy-name-first": true
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "type": {
                          "const": "list/name",
                          "description": "list/name",
                          "type": "string"
                        },
                        "id": {
                          "type": "string"
                        },
                        "attributes": {
                          "properties": {
                            "name": {
                              "type": "string"
                            },
                            "status": {
                              "type": "string"
                            },
                            "archived-at": {
                              "type": [
                                "null",
                                "string"
                              ]
                            },
                            "created-at": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "updated-at": {
                              "type": "string",
                              "format": "date-time"
                            }
                          }
                        },
                        "relationships": {
                          "properties": {
                            "list-items": {
                              "properties": {
                                "data": {
                                  "type": "array",
                                  "items": {},
                                  "description": "List items associated with this list. This should always be empty when creating a new list."
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Result": {
                    "summary": "Created",
                    "value": {
                      "data": {
                        "type": "list/name",
                        "id": "lst_kRcKDJ4c8wF2AmAghggtYxboX",
                        "attributes": {
                          "name": "My New List",
                          "status": "active",
                          "archived-at": null,
                          "created-at": "2023-08-30T20:22:07.000Z",
                          "updated-at": "2023-08-30T20:22:07.000Z"
                        },
                        "relationships": {
                          "list-items": {
                            "data": []
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        }
      }
    },
    "/list/phone-numbers": {
      "post": {
        "summary": "Create a Phone Number List",
        "tags": [
          "Lists"
        ],
        "description": "Create a new <<glossary:list>> for your organization.",
        "operationId": "create-a-phone-number-list",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/create-a-phone-number-list"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "data": {
                    "properties": {
                      "attributes": {
                        "properties": {
                          "name": {
                            "description": "Name of the list",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "examples": {
                "exampleRequest": {
                  "summary": "Example Request",
                  "value": {
                    "data": {
                      "attributes": {
                        "name": "My New List"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "type": {
                          "const": "list/phone-number",
                          "description": "list/phone-number",
                          "type": "string"
                        },
                        "id": {
                          "type": "string",
                          "examples": [
                            "lst_kRcKDJ4c8wF2AmAghggtYxboX"
                          ]
                        },
                        "attributes": {
                          "properties": {
                            "name": {
                              "type": "string"
                            },
                            "status": {
                              "type": "string"
                            },
                            "archived-at": {
                              "type": [
                                "null",
                                "string"
                              ]
                            },
                            "created-at": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "updated-at": {
                              "type": "string",
                              "format": "date-time"
                            }
                          }
                        },
                        "relationships": {
                          "properties": {
                            "list-items": {
                              "properties": {
                                "data": {
                                  "type": "array",
                                  "items": {},
                                  "description": "List items associated with this list. This should always be empty when creating a new list."
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Result": {
                    "summary": "Created",
                    "value": {
                      "data": {
                        "type": "list/phone-number",
                        "id": "lst_kRcKDJ4c8wF2AmAghggtYxboX",
                        "attributes": {
                          "name": "My New List",
                          "status": "active",
                          "archived-at": null,
                          "created-at": "2023-08-30T20:22:07.000Z",
                          "updated-at": "2023-08-30T20:22:07.000Z"
                        },
                        "relationships": {
                          "list-items": {
                            "data": []
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        }
      }
    },
    "/lists": {
      "get": {
        "summary": "List all Lists",
        "tags": [
          "Lists"
        ],
        "description": "Returns a list of your organization's <<glossary: list>>s.",
        "operationId": "list-all-lists",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/list-all-lists"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "in": "query",
            "name": "page",
            "style": "deepObject",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/nested-pagination-query-params"
                },
                {
                  "type": "object",
                  "properties": {
                    "after": {
                      "example": "lst_ABC123"
                    },
                    "before": {
                      "example": "lst_ABC123"
                    }
                  }
                }
              ]
            }
          },
          {
            "in": "query",
            "name": "filter",
            "style": "deepObject",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "description": "Filter lists by status",
                  "type": "string",
                  "enum": [
                    "active",
                    "archived"
                  ]
                }
              }
            }
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "description": "An array of Events",
                      "items": {
                        "$ref": "#/components/schemas/list"
                      }
                    },
                    "links": {
                      "type": "object",
                      "properties": {
                        "prev": {
                          "type": [
                            "null",
                            "string"
                          ],
                          "description": "URL pointing to the previous page of data, or null if on the first page."
                        },
                        "next": {
                          "type": "string",
                          "description": "URL pointing to the next page of data, or null if on the last page."
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Result": {
                    "summary": "OK",
                    "value": {
                      "data": [
                        {
                          "type": "list/phone-number",
                          "id": "lst_kRcKDJ4c8wF2AmAghggtYxboX",
                          "attributes": {
                            "name": "My List",
                            "status": "active",
                            "archived-at": null,
                            "created-at": "2023-08-30T21:31:06.000Z",
                            "updated-at": "2023-08-30T21:31:06.000Z"
                          },
                          "relationships": {
                            "list-items": {
                              "data": []
                            }
                          }
                        }
                      ],
                      "links": {
                        "prev": null,
                        "next": "/api/v1/lists?page%5Bafter%5D=lst_3DS1z7bME8vWqqxmdCDqHwLm"
                      }
                    }
                  }
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        }
      }
    },
    "/lists/{list-id}": {
      "delete": {
        "summary": "Archive a List",
        "tags": [
          "Lists"
        ],
        "description": "Archive an existing <<glossary:list>>. Archived lists are still retrievable, but will no longer match on inquiries.",
        "operationId": "archive-a-list",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/archive-a-list"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          },
          {
            "description": "ID of the list to archive",
            "in": "path",
            "name": "list-id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/list"
                    }
                  }
                },
                "examples": {
                  "Result": {
                    "summary": "OK",
                    "value": {
                      "data": {
                        "type": "list/phone-number",
                        "id": "lst_kRcKDJ4c8wF2AmAghggtYxboX",
                        "attributes": {
                          "name": "My List",
                          "status": "archived",
                          "archived-at": "2023-01-01T00:00:00.000Z",
                          "created-at": "2023-01-01T00:00:00.000Z",
                          "updated-at": "2023-01-01T00:00:00.000Z"
                        },
                        "relationships": {
                          "list-items": {
                            "data": []
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        }
      },
      "get": {
        "summary": "Retrieve a List",
        "tags": [
          "Lists"
        ],
        "description": "Retrieves the details of an existing <<glossary:list>>.",
        "operationId": "retrieve-a-list",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/retrieve-a-list"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          },
          {
            "description": "ID of the list to retrieve",
            "in": "path",
            "name": "list-id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/list"
                    }
                  }
                },
                "examples": {
                  "Result": {
                    "summary": "OK",
                    "value": {
                      "data": {
                        "type": "list/phone-number",
                        "id": "lst_kRcKDJ4c8wF2AmAghggtYxboX",
                        "attributes": {
                          "name": "My List",
                          "status": "archived",
                          "archived-at": "2023-01-01T00:00:00.000Z",
                          "created-at": "2023-01-01T00:00:00.000Z",
                          "updated-at": "2023-01-01T00:00:00.000Z"
                        },
                        "relationships": {
                          "list-items": {
                            "data": []
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        }
      }
    },
    "/oauth/authorize": {
      "post": {
        "description": "Authorizes another Organization to access your Inquiry, Verifications, or other Persona resources.",
        "operationId": "create-authorization",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/create-authorization"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "client-id": {
                    "description": "Organization (`org_`) to authorize",
                    "type": "string"
                  },
                  "response-type": {
                    "default": "code",
                    "description": "Must be set to 'code'",
                    "type": "string"
                  },
                  "scope": {
                    "description": "Space-separated list of 'permission:object' combinations (i.e. `inquiry.read:inq_uX7kRTiBxsJ1sZqPLAsjdP9j verification.read:ver_ynYuWdrjwwjiHJ2rgHfSoHeT`",
                    "type": "string"
                  }
                },
                "required": [
                  "client-id",
                  "response-type",
                  "scope"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "Created",
                    "value": {
                      "code": "8qaA6Q9GQnPjqiWB8BPed9MC6twE",
                      "expires-in": 599
                    }
                  }
                },
                "schema": {
                  "properties": {
                    "code": {
                      "description": "Authorization Code that is only usable by the Organization specified by the client-id",
                      "examples": [
                        "8qaA6Q9GQnPjqiWB8BPed9MC6twE"
                      ],
                      "type": "string"
                    },
                    "expires-in": {
                      "description": "Number of seconds until the authorization code expires.",
                      "default": 0,
                      "examples": [
                        599
                      ],
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Create Authorization",
        "tags": [
          "OAuth"
        ]
      }
    },
    "/oauth/token": {
      "post": {
        "description": "Creates an access token using an authorization code.",
        "operationId": "create-access-token",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/create-access-token"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "description": "Authorization Code",
            "in": "query",
            "name": "code",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Must be set to 'authorization_code'",
            "in": "query",
            "name": "grant-type",
            "required": true,
            "schema": {
              "default": "authorization_code",
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "Created",
                    "value": {
                      "access-token": "persona_access_token_d8b7f084-385f-4ff0-930e-1580ccefa16d",
                      "token-type": "bearer",
                      "expires-in": 3599,
                      "scope": "inquiry.read:inq_uX7kRTiBxsJ1sZqPLAsjdP9j inquiry.read:inq_1Uy5ruZb5yZy4zX21KesbtfK"
                    }
                  }
                },
                "schema": {
                  "properties": {
                    "access-token": {
                      "description": "Access Token that can be used wherever an API Key would be used.",
                      "examples": [
                        "persona_access_token_d8b7f084-385f-4ff0-930e-1580ccefa16d"
                      ],
                      "type": "string"
                    },
                    "expires-in": {
                      "description": "Number of seconds until the access token expires.",
                      "default": 0,
                      "examples": [
                        3599
                      ],
                      "type": "integer"
                    },
                    "scope": {
                      "description": "Space-separated list of 'permission:object' combinations (i.e. `inquiry.read:inq_uX7kRTiBxsJ1sZqPLAsjdP9j verification.read:ver_ynYuWdrjwwjiHJ2rgHfSoHeT`",
                      "examples": [
                        "inquiry.read:inq_uX7kRTiBxsJ1sZqPLAsjdP9j inquiry.read:inq_1Uy5ruZb5yZy4zX21KesbtfK"
                      ],
                      "type": "string"
                    },
                    "token-type": {
                      "examples": [
                        "bearer"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Create Access Token",
        "tags": [
          "OAuth"
        ]
      }
    },
    "/reports": {
      "get": {
        "description": "Returns a list of all your organization's Reports.",
        "operationId": "list-all-reports",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/list-all-reports"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "in": "query",
            "name": "page",
            "style": "deepObject",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/nested-pagination-query-params"
                },
                {
                  "type": "object",
                  "properties": {
                    "after": {
                      "example": "rep_ABC123"
                    },
                    "before": {
                      "example": "rep_ABC123"
                    }
                  }
                }
              ]
            }
          },
          {
            "in": "query",
            "name": "filter",
            "style": "deepObject",
            "schema": {
              "type": "object",
              "properties": {
                "reference-id": {
                  "description": "Filter reports by reference ID",
                  "type": "string"
                },
                "account-id": {
                  "description": "Filter reports by account ID",
                  "type": "string"
                }
              }
            }
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/report"
                      }
                    },
                    "links": {
                      "type": "object",
                      "properties": {
                        "prev": {
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "next": {
                          "type": [
                            "string",
                            "null"
                          ]
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Result": {
                    "summary": "OK",
                    "value": {
                      "data": [
                        {
                          "type": "report/address-lookup",
                          "id": "rep_YcNZJLxuwEuV8jUPbykYQyXG",
                          "attributes": {
                            "created-at": "2019-12-19T21:42:49.000Z",
                            "completed-at": "2019-12-19T21:42:49.000Z",
                            "status": "ready"
                          }
                        },
                        {
                          "type": "report/adverse-media",
                          "id": "rep_2wM8yufwLrbMV6kUtGPBxeGS",
                          "attributes": {
                            "created-at": "2019-12-18T22:43:03.000Z",
                            "completed-at": "2019-12-18T22:43:03.000Z"
                          }
                        },
                        {
                          "type": "report/email-address",
                          "id": "rep_LatvE1PdVhfiwcJWVLj4Z25j",
                          "attributes": {
                            "created-at": "2019-12-13T08:34:10.000Z",
                            "completed-at": "2019-12-13T08:34:10.000Z"
                          }
                        },
                        {
                          "type": "report/phone-number",
                          "id": "rep_RU3JgzXaAzVV2g2NYLd7ub12",
                          "attributes": {
                            "created-at": "2019-12-13T08:32:49.000Z",
                            "completed-at": "2019-12-13T08:33:29.000Z"
                          }
                        },
                        {
                          "type": "report/watchlist",
                          "id": "rep_6LRELcKmPcx9MxYGk6mdCPJo",
                          "attributes": {
                            "created-at": "2019-11-19T00:10:27.000Z",
                            "completed-at": "2019-11-19T00:10:27.000Z"
                          }
                        }
                      ],
                      "links": {
                        "prev": null,
                        "next": "/api/v1/reports?page%5Bafter%5D=rep_u2Dgz8U3CmxTVgqEH9qzezHi"
                      }
                    }
                  }
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "List all Reports",
        "tags": [
          "Reports"
        ]
      },
      "post": {
        "description": "Creates a new Report of any type.",
        "operationId": "create-a-report",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/create-a-report"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "data": {
                    "discriminator": {
                      "propertyName": "type",
                      "mapping": {
                        "report/watchlist": "#/components/schemas/report-watchlist-request",
                        "report/crypto-address-watchlist": "#/components/schemas/report-crypto-address-watchlist-request",
                        "report/adverse-media": "#/components/schemas/report-adverse-media-request",
                        "report/address-lookup": "#/components/schemas/report-address-lookup-request",
                        "report/politically-exposed-person": "#/components/schemas/report-politically-exposed-person-request",
                        "report/email-address": "#/components/schemas/report-email-address-request",
                        "report/phone-number": "#/components/schemas/report-phone-risk-request",
                        "report/social-media": "#/components/schemas/report-social-media-request",
                        "report/business-lookup": "#/components/schemas/report-business-lookup-request",
                        "report/sentilink-scores": "#/components/schemas/report-sentilink-scores-request"
                      }
                    },
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/report-watchlist-request"
                      },
                      {
                        "$ref": "#/components/schemas/report-crypto-address-watchlist-request"
                      },
                      {
                        "$ref": "#/components/schemas/report-adverse-media-request"
                      },
                      {
                        "$ref": "#/components/schemas/report-address-lookup-request"
                      },
                      {
                        "$ref": "#/components/schemas/report-politically-exposed-person-request"
                      },
                      {
                        "$ref": "#/components/schemas/report-email-address-request"
                      },
                      {
                        "$ref": "#/components/schemas/report-phone-risk-request"
                      },
                      {
                        "$ref": "#/components/schemas/report-social-media-request"
                      },
                      {
                        "$ref": "#/components/schemas/report-business-lookup-request"
                      },
                      {
                        "$ref": "#/components/schemas/report-sentilink-scores-request"
                      }
                    ]
                  },
                  "meta": {
                    "properties": {
                      "auto-create-account": {
                        "description": "If true, automatically create an Account for the user if one does not exist. Default is true.",
                        "examples": [
                          true
                        ],
                        "type": "boolean"
                      },
                      "auto-create-account-type-id": {
                        "description": "If `auto-create-account` is true, the type ID to use for the Account. If not provided, the default type ID for the organization will be used.",
                        "examples": [
                          "acttp_TOKEN"
                        ],
                        "type": "string"
                      },
                      "auto-create-account-reference-id": {
                        "description": "If `auto-create-account` is true, this Report will be attached to the Account with this reference ID, or a new Account will be created with this reference ID if one does not exist.",
                        "examples": [
                          "my_reference_id"
                        ],
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/report"
                    }
                  }
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Create a Report",
        "tags": [
          "Reports"
        ]
      }
    },
    "/reports/{report-id}": {
      "delete": {
        "description": "Permanently deletes personally identifiable information (PII) for a Report.\n\nThis endpoint can be used to comply with privacy regulations such as GDPR / CCPA or to enforce data privacy.\n\nNote that this will only delete the report -- it does not delete associated accounts, inquiries, verifications, or other Persona resources.",
        "operationId": "redact-a-report",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/redact-a-report"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          },
          {
            "name": "report-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/report"
                    }
                  }
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Redact a Report",
        "tags": [
          "Reports"
        ]
      },
      "get": {
        "description": "Retrieves the details of an existing Report.",
        "operationId": "retrieve-a-report",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/retrieve-a-report"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          },
          {
            "name": "report-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/report"
                    }
                  }
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Retrieve a Report",
        "tags": [
          "Reports"
        ]
      }
    },
    "/reports/{report-id}/add-tag": {
      "post": {
        "description": "Adds a new tag to the Report",
        "operationId": "reports-add-tag",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/reports-add-tag"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          },
          {
            "name": "report-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "meta": {
                    "properties": {
                      "tag-name": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "OK",
                    "value": {
                      "data": {
                        "type": "report/watchlist",
                        "id": "rep_EPehAHkBaZKUxxxLEDL1gv4h",
                        "attributes": {
                          "status": "ready",
                          "created-at": "2022-01-14T23:42:01.000Z",
                          "completed-at": "2022-01-14T23:42:01.000Z",
                          "redacted-at": null,
                          "report-template-version-name": "v1",
                          "term": "Alexander Sample",
                          "matched-lists": []
                        },
                        "relationships": {
                          "inquiry": {
                            "data": null
                          },
                          "account": {
                            "data": null
                          },
                          "report-template": {
                            "data": {
                              "type": "report-template/watchlist",
                              "id": "rptp_jfp2TAY28vijxxxCcn4WVqdX"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/report"
                    }
                  }
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Add tag to a Report",
        "tags": [
          "Reports"
        ]
      }
    },
    "/reports/{report-id}/dismiss": {
      "post": {
        "description": "Dismisses active matches for supported report types",
        "operationId": "dismiss-matches",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/dismiss-matches"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          },
          {
            "name": "report-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "data": {
                    "properties": {
                      "attributes": {
                        "properties": {
                          "dismiss-type": {
                            "description": "required in case of Adverse Media and Business Adverse Media. \"entity\" - refers to one of several individuals or businesses found by the report. \"media\" - refers to specific article about that \"entity\"",
                            "enum": [
                              "entity",
                              "media"
                            ],
                            "type": "string"
                          },
                          "entity-id": {
                            "description": "required in case of Adverse Media and Business Adverse Media. refers to id of the \"entity\" or the \"media\".",
                            "type": "string"
                          },
                          "reason": {
                            "description": "required",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "OK",
                    "value": {
                      "data": {
                        "type": "report/watchlist",
                        "id": "rep_EPehAHkBaZKUxxxLEDL1gv4h",
                        "attributes": {
                          "status": "ready",
                          "created-at": "2022-01-14T23:42:01.000Z",
                          "completed-at": "2022-01-14T23:42:01.000Z",
                          "redacted-at": null,
                          "report-template-version-name": "v1",
                          "term": "Alexander Sample",
                          "matched-lists": []
                        },
                        "relationships": {
                          "inquiry": {
                            "data": null
                          },
                          "account": {
                            "data": null
                          },
                          "report-template": {
                            "data": {
                              "type": "report-template/watchlist",
                              "id": "rptp_jfp2TAY28vijxxxCcn4WVqdX"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/report"
                    }
                  }
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Report Action: Dismiss Matches",
        "tags": [
          "Reports"
        ]
      }
    },
    "/reports/{report-id}/pause": {
      "post": {
        "description": "Pauses continuous monitoring on a report. Requires additional permissions.",
        "operationId": "report-action-pause-continuous-monitoring",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/report-action-pause-continuous-monitoring"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          },
          {
            "name": "report-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "OK",
                    "value": {
                      "data": {
                        "type": "report/watchlist",
                        "id": "rep_EPehAHkBaZKUxxxLEDL1gv4h",
                        "attributes": {
                          "status": "ready",
                          "created-at": "2022-01-14T23:42:01.000Z",
                          "completed-at": "2022-01-14T23:42:01.000Z",
                          "redacted-at": null,
                          "report-template-version-name": "v1",
                          "term": "Alexander Sample",
                          "matched-lists": []
                        },
                        "relationships": {
                          "inquiry": {
                            "data": null
                          },
                          "account": {
                            "data": null
                          },
                          "report-template": {
                            "data": {
                              "type": "report-template/watchlist",
                              "id": "rptp_jfp2TAY28vijxxxCcn4WVqdX"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/report"
                    }
                  }
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Report Action: Pause Continuous Monitoring",
        "tags": [
          "Reports"
        ]
      }
    },
    "/reports/{report-id}/print": {
      "get": {
        "description": "Prints a report in PDF format.",
        "operationId": "print-report-pdf",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/print-report-pdf"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          },
          {
            "name": "report-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/pdf": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Print Report PDF",
        "tags": [
          "Reports"
        ]
      }
    },
    "/reports/{report-id}/remove-tag": {
      "post": {
        "description": "Removes an existing tag from a Report.",
        "operationId": "reports-remove-tag",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/reports-remove-tag"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          },
          {
            "name": "report-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "meta": {
                    "properties": {
                      "tag-name": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "OK",
                    "value": {
                      "data": {
                        "type": "report/watchlist",
                        "id": "rep_EPehAHkBaZKUxxxLEDL1gv4h",
                        "attributes": {
                          "status": "ready",
                          "created-at": "2022-01-14T23:42:01.000Z",
                          "completed-at": "2022-01-14T23:42:01.000Z",
                          "redacted-at": null,
                          "report-template-version-name": "v1",
                          "term": "Alexander Sample",
                          "matched-lists": []
                        },
                        "relationships": {
                          "inquiry": {
                            "data": null
                          },
                          "account": {
                            "data": null
                          },
                          "report-template": {
                            "data": {
                              "type": "report-template/watchlist",
                              "id": "rptp_jfp2TAY28vijxxxCcn4WVqdX"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/report"
                    }
                  }
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Remove tag from a Report",
        "tags": [
          "Reports"
        ]
      }
    },
    "/reports/{report-id}/resume": {
      "post": {
        "description": "Resumes continuous monitoring on paused report. Requires additional permissions.",
        "operationId": "report-action-resume-continuous-monitoring",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/report-action-resume-continuous-monitoring"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          },
          {
            "name": "report-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "OK",
                    "value": {
                      "data": {
                        "type": "report/watchlist",
                        "id": "rep_EPehAHkBaZKUxxxLEDL1gv4h",
                        "attributes": {
                          "status": "ready",
                          "created-at": "2022-01-14T23:42:01.000Z",
                          "completed-at": "2022-01-14T23:42:01.000Z",
                          "redacted-at": null,
                          "report-template-version-name": "v1",
                          "term": "Alexander Sample",
                          "matched-lists": []
                        },
                        "relationships": {
                          "inquiry": {
                            "data": null
                          },
                          "account": {
                            "data": null
                          },
                          "report-template": {
                            "data": {
                              "type": "report-template/watchlist",
                              "id": "rptp_jfp2TAY28vijxxxCcn4WVqdX"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/report"
                    }
                  }
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Report Action: Resume Continuous Monitoring",
        "tags": [
          "Reports"
        ]
      }
    },
    "/reports/{report-id}/run": {
      "post": {
        "description": "Re-runs a continuously monitored report immediately, outside of its existing recurrence schedule.",
        "operationId": "report-action-re-run-report",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/report-action-re-run-report"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          },
          {
            "name": "report-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "OK",
                    "value": {
                      "data": {
                        "type": "report/watchlist",
                        "id": "rep_EPehAHkBaZKUxxxLEDL1gv4h",
                        "attributes": {
                          "status": "ready",
                          "created-at": "2022-01-14T23:42:01.000Z",
                          "completed-at": "2022-01-14T23:42:01.000Z",
                          "redacted-at": null,
                          "report-template-version-name": "v1",
                          "term": "Alexander Sample",
                          "matched-lists": []
                        },
                        "relationships": {
                          "inquiry": {
                            "data": null
                          },
                          "account": {
                            "data": null
                          },
                          "report-template": {
                            "data": {
                              "type": "report-template/watchlist",
                              "id": "rptp_jfp2TAY28vijxxxCcn4WVqdX"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/report"
                    }
                  }
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Report Action: Re-run Report",
        "tags": [
          "Reports"
        ]
      }
    },
    "/reports/{report-id}/set-tags": {
      "post": {
        "description": "Sets all tags on a Report. Any tags that are not provided in the request will be removed.",
        "operationId": "reports-set-all-tags",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/reports-set-all-tags"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          },
          {
            "name": "report-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "meta": {
                    "properties": {
                      "tag-name": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "OK",
                    "value": {
                      "data": {
                        "type": "report/watchlist",
                        "id": "rep_EPehAHkBaZKUxxxLEDL1gv4h",
                        "attributes": {
                          "status": "ready",
                          "created-at": "2022-01-14T23:42:01.000Z",
                          "completed-at": "2022-01-14T23:42:01.000Z",
                          "redacted-at": null,
                          "report-template-version-name": "v1",
                          "term": "Alexander Sample",
                          "matched-lists": []
                        },
                        "relationships": {
                          "inquiry": {
                            "data": null
                          },
                          "account": {
                            "data": null
                          },
                          "report-template": {
                            "data": {
                              "type": "report-template/watchlist",
                              "id": "rptp_jfp2TAY28vijxxxCcn4WVqdX"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/report"
                    }
                  }
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Set tags on a Report",
        "tags": [
          "Reports"
        ]
      }
    },
    "/transactions": {
      "post": {
        "summary": "Create a Transaction",
        "tags": [
          "Transactions"
        ],
        "description": "Creates a new <<glossary:Transaction>> for a specific <<glossary:transaction type>> in your organization.",
        "operationId": "create-a-transaction",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/create-a-transaction"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "attributes": {
                        "type": "object",
                        "properties": {
                          "transaction-type-id": {
                            "type": "string",
                            "description": "Transaction type ID to create the transaction for."
                          },
                          "fields": {
                            "description": "Key value pairs of field name to field value. Exact field names and data types will depend on the configurations for your <<glossary:transaction type>>.",
                            "examples": [
                              {
                                "external-integration-id": "ind_123"
                              }
                            ],
                            "type": "object",
                            "additionalProperties": true
                          },
                          "reference-id": {
                            "type": "string",
                            "description": "Reference ID on Account, refers to an entity in your user model."
                          },
                          "external-id": {
                            "type": "string",
                            "description": "External ID should be set to the ID for this transaction from your system. It can be used for lookup."
                          },
                          "tags": {
                            "description": "A list of tag names to be associated with the Transaction.",
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "Created",
                    "$ref": "#/components/examples/transaction"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/transaction"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        }
      },
      "get": {
        "summary": "List all Transactions",
        "tags": [
          "Transactions"
        ],
        "description": "Returns a list of your organization's transactions. Note that this endpoint aggregates transactions across all <<glossary:transaction type>>(s). See [Pagination](https://docs.withpersona.com/reference/pagination) for more details about handling the response.",
        "operationId": "list-all-transactions",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/list-all-transactions"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          },
          {
            "in": "query",
            "name": "page",
            "style": "deepObject",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/nested-pagination-query-params"
                },
                {
                  "type": "object",
                  "properties": {
                    "after": {
                      "example": "txn_ABC123"
                    },
                    "before": {
                      "example": "txn_ABC123"
                    }
                  }
                }
              ]
            }
          },
          {
            "in": "query",
            "name": "filter",
            "style": "deepObject",
            "schema": {
              "type": "object",
              "properties": {
                "reference-id": {
                  "description": "Filter transactions by reference ID.",
                  "type": "string"
                },
                "external-id": {
                  "description": "Filter transactions by external ID.",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "OK",
                    "$ref": "#/components/examples/transaction-list"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/transaction"
                      }
                    },
                    "links": {
                      "type": "object",
                      "properties": {
                        "prev": {
                          "type": [
                            "string",
                            "null"
                          ],
                          "examples": [
                            "/api/v1/transactions?page%before%5D=txn_ABC123"
                          ]
                        },
                        "next": {
                          "type": [
                            "string",
                            "null"
                          ],
                          "examples": [
                            "/api/v1/transactions?page%5Bafter%5D=txn_ABC123"
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        }
      }
    },
    "/transactions/{transaction-id}": {
      "get": {
        "summary": "Retrieve a Transaction",
        "tags": [
          "Transactions"
        ],
        "description": "Retrieves the details of an existing <<glossary:Transaction>>.",
        "operationId": "retrieve-a-transaction",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/retrieve-a-transaction"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          },
          {
            "name": "transaction-id",
            "in": "path",
            "description": "ID of the transaction to retrieve.",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "OK",
                    "$ref": "#/components/examples/transaction-retrieve"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/transaction"
                    },
                    "included": {
                      "items": {
                        "properties": {
                          "type": {
                            "x-polymorphic": true,
                            "examples": [
                              "account"
                            ],
                            "type": "string"
                          },
                          "id": {
                            "examples": [
                              "act_ABC123"
                            ],
                            "type": "string"
                          }
                        },
                        "additionalProperties": true,
                        "type": "object"
                      },
                      "type": "array"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        }
      },
      "patch": {
        "summary": "Update a Transaction",
        "tags": [
          "Transactions"
        ],
        "description": "Updates a <<glossary:Transaction>> that has been previously created.",
        "operationId": "update-a-transaction",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/update-a-transaction"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          },
          {
            "name": "transaction-id",
            "in": "path",
            "description": "ID of the transaction to update.",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "attributes": {
                        "type": "object",
                        "properties": {
                          "fields": {
                            "description": "Key value pairs of field name to field value. Exact field names and data types will depend on the configurations for your <<glossary:transaction type>>.",
                            "examples": [
                              {
                                "external-integration-id": "ind_123"
                              }
                            ],
                            "type": "object",
                            "additionalProperties": true
                          },
                          "status": {
                            "type": "string"
                          },
                          "reference-id": {
                            "type": "string",
                            "description": "Reference ID on Account, refers to an entity in your user model."
                          },
                          "external-id": {
                            "type": "string",
                            "description": "External ID should be set to the ID for this transaction from your system. It can be used for lookup."
                          },
                          "label": {
                            "type": "string"
                          },
                          "tags": {
                            "description": "A list of tag names to be associated with the Transaction.",
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "OK",
                    "$ref": "#/components/examples/transaction-with-label"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/transaction"
                    },
                    "included": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/transaction-label"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        }
      }
    },
    "/transactions/{transaction-id}/add-tag": {
      "post": {
        "summary": "Add tag to Transaction",
        "tags": [
          "Transactions"
        ],
        "description": "Adds a tag to a Transaction. Create a new tag if the tag does not already exist. No effect if the transaction already has the tag.",
        "operationId": "transactions-add-tag",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/transactions-add-tag"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          },
          {
            "name": "transaction-id",
            "in": "path",
            "description": "ID of the transaction to add tag on.",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "meta": {
                    "properties": {
                      "tag-name": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "examples": {
                "Example": {
                  "value": {
                    "meta": {
                      "tag-name": "new tag"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "OK",
                    "$ref": "#/components/examples/transaction"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/transaction"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        }
      }
    },
    "/transactions/{transaction-id}/label": {
      "post": {
        "summary": "Create a Transaction label",
        "tags": [
          "Transactions"
        ],
        "description": "Create a new label for an existing <<glossary:Transaction>>.",
        "operationId": "create-a-transaction-label",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/create-a-transaction-label"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          },
          {
            "name": "transaction-id",
            "in": "path",
            "description": "ID of the transaction to create a label for.",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "meta": {
                    "type": "object",
                    "properties": {
                      "label": {
                        "type": "string"
                      },
                      "score": {
                        "type": "number",
                        "format": "float"
                      },
                      "model-version": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "OK",
                    "$ref": "#/components/examples/transaction-with-label"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/transaction"
                    },
                    "included": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/transaction-label"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        }
      }
    },
    "/transactions/{transaction-id}/remove-tag": {
      "post": {
        "summary": "Remove tag from a Transaction",
        "tags": [
          "Transactions"
        ],
        "description": "Remove a tag from a transaction. No effect if the transaction does not have the tag.",
        "operationId": "transactions-remove-tag",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/transactions-remove-tag"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          },
          {
            "name": "transaction-id",
            "in": "path",
            "description": "ID of the transaction to remove tag from.",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "meta": {
                    "properties": {
                      "tag-name": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "examples": {
                "Example": {
                  "value": {
                    "meta": {
                      "tag-name": "new tag"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "OK",
                    "$ref": "#/components/examples/transaction"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/transaction"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        }
      }
    },
    "/transactions/{transaction-id}/set-tags": {
      "post": {
        "summary": "Sets tags on a Transaction",
        "tags": [
          "Transactions"
        ],
        "description": "Set the list of tags on a transaction. Remove all tags on the transaction that don't appear on the list. Add all tags on the transaction from the list.",
        "operationId": "transactions-set-tags",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/transactions-set-tags"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          },
          {
            "name": "transaction-id",
            "in": "path",
            "description": "ID of the transaction to set tags on.",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "meta": {
                    "properties": {
                      "tag-name": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "examples": {
                "Example": {
                  "value": {
                    "meta": {
                      "tag-name": [
                        "new tag 1",
                        "new tag 2"
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "OK",
                    "$ref": "#/components/examples/transaction"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/transaction"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        }
      }
    },
    "/user-audit-logs": {
      "get": {
        "description": "Returns a list of your organization's user audit logs.",
        "operationId": "list-all-user-audit-logs",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/list-all-user-audit-logs"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "in": "query",
            "name": "page",
            "style": "deepObject",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/nested-pagination-query-params"
                },
                {
                  "type": "object",
                  "properties": {
                    "after": {
                      "example": "ual_ABC123"
                    },
                    "before": {
                      "example": "ual_ABC123"
                    }
                  }
                }
              ]
            }
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "OK",
                    "value": {
                      "data": [
                        {
                          "type": "user-audit-log",
                          "id": "ual_ABC123ABC",
                          "attributes": {
                            "path": "/api/v1/inquiries",
                            "method": "GET",
                            "get-params": {},
                            "post-params": {},
                            "ip-address": "127.0.0.1",
                            "created-at": "2023-10-03T21:31:05.163Z",
                            "impersonator-email-address": null
                          },
                          "relationships": {
                            "user": {
                              "data": {
                                "type": "user",
                                "id": "user_ABC123"
                              }
                            }
                          }
                        },
                        {
                          "type": "user-audit-log",
                          "id": "ual_ABC123XYZ",
                          "attributes": {
                            "path": "/api/internal/dashboard/v1/user-sessions/uses_ABC123/expire",
                            "method": "GET",
                            "get-params": {},
                            "post-params": {
                              "data": {
                                "id": "uses_ABC123",
                                "type": "user-session"
                              }
                            },
                            "ip-address": "127.0.0.1",
                            "created-at": "2023-10-03T21:31:05.163Z",
                            "impersonator-email-address": null
                          },
                          "relationships": {
                            "user": {
                              "data": {
                                "type": "user",
                                "id": "user_ABC123"
                              }
                            }
                          }
                        }
                      ],
                      "links": {
                        "next": null,
                        "prev": null
                      },
                      "included": [
                        {
                          "type": "user",
                          "id": "user_ABC123",
                          "attributes": {
                            "email-address": "jane@doe.com",
                            "name-first": "Jane",
                            "name-last": "Doe"
                          }
                        }
                      ]
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/user-audit-log"
                      }
                    },
                    "links": {
                      "type": "object",
                      "properties": {
                        "prev": {
                          "type": [
                            "string",
                            "null"
                          ],
                          "examples": [
                            "/api/v1/user-audit-logs?page%5Bbefore%5D=ual_ABC123"
                          ]
                        },
                        "next": {
                          "type": [
                            "string",
                            "null"
                          ],
                          "examples": [
                            "/api/v1/user-audit-logs?page%5Bafter%5D=ual_ABC123"
                          ]
                        }
                      }
                    },
                    "included": {
                      "type": "array",
                      "description": "Objects that will be returned by default unless otherwise specified using the `include` query parameter in the request.",
                      "items": {
                        "$ref": "#/components/schemas/user"
                      }
                    }
                  }
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "List all User Audit Logs",
        "tags": [
          "User Audit Logs"
        ]
      }
    },
    "/user-audit-logs/{user-audit-log-id}": {
      "get": {
        "description": "Retrieves the details of an existing API Log.",
        "operationId": "retrieve-an-user-audit-log",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/retrieve-an-user-audit-log"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          },
          {
            "name": "user-audit-log-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "OK",
                    "value": {
                      "data": {
                        "type": "user-audit-log",
                        "id": "ual_ABC123",
                        "attributes": {
                          "path": "/api/v1/inquiries",
                          "method": "GET",
                          "get-params": {},
                          "post-params": {},
                          "ip-address": "127.0.0.1",
                          "created-at": "2023-10-03T21:31:05.163Z",
                          "impersonator-email-address": null
                        },
                        "relationships": {
                          "user": {
                            "data": {
                              "type": "user",
                              "id": "user_ABC123"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/user-audit-log"
                    },
                    "included": {
                      "type": "array",
                      "description": "Objects that _may_ be returned if specified via the `include` query parameter in the request.",
                      "items": {
                        "$ref": "#/components/schemas/user"
                      }
                    }
                  }
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Retrieve an User Audit Log",
        "tags": [
          "User Audit Logs"
        ]
      }
    },
    "/verification/database-phone-carriers/{verification-id}": {
      "get": {
        "description": "Retrieve a phone carrier database verification",
        "operationId": "retrieve-a-phone-carrier-database-verification",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/retrieve-a-phone-carrier-database-verification"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          },
          {
            "description": "ID of Verification to retrieve",
            "in": "path",
            "name": "verification-id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "OK",
                    "$ref": "#/components/examples/verification-database-phone-carrier"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/verification-database-phone-carrier"
                    }
                  }
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Retrieve a Phone Carrier Database Verification",
        "tags": [
          "Phone Carrier Database Verifications"
        ]
      }
    },
    "/verification/database-serpros/{verification-id}": {
      "get": {
        "description": "Retrieve a Serpro database verification",
        "operationId": "retrieve-a-serpro-database-verification",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/retrieve-a-serpro-database-verification"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          },
          {
            "description": "ID of Verification to retrieve",
            "in": "path",
            "name": "verification-id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "OK",
                    "value": {
                      "data": {
                        "type": "verification/database-serpro",
                        "id": "ver_b9uPLjR3xtihTQsSmdKceTx9",
                        "attributes": {
                          "status": "passed",
                          "created-at": "2022-08-03T03:42:20.000Z",
                          "created-at-ts": 1659498140,
                          "submitted-at": "2022-08-03T03:52:00.000Z",
                          "submitted-at-ts": 1659498720,
                          "completed-at": "2022-08-03T03:52:03.000Z",
                          "completed-at-ts": 1659498723,
                          "country-code": "BR",
                          "name-first": "ALEXANDER",
                          "checks": [
                            {
                              "name": "database_serpro_name_comparison",
                              "status": "passed",
                              "reasons": [],
                              "metadata": {}
                            },
                            {
                              "name": "database_serpro_birthdate_comparison",
                              "status": "passed",
                              "reasons": [],
                              "metadata": {}
                            },
                            {
                              "name": "database_serpro_cpf_comparison",
                              "status": "passed",
                              "reasons": [],
                              "metadata": {}
                            },
                            {
                              "name": "database_serpro_service_available_detection",
                              "status": "passed",
                              "reasons": [],
                              "metadata": {}
                            }
                          ]
                        },
                        "relationships": {
                          "inquiry": {
                            "data": null
                          }
                        }
                      }
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/verification-database-serpro"
                    }
                  }
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Retrieve a Serpro Database Verification",
        "tags": [
          "Serpro Database Verifications"
        ]
      }
    },
    "/verification/database-standards/{verification-id}": {
      "get": {
        "description": "Retrieve a database standard verification",
        "operationId": "retrieve-a-database-standard-verification",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/retrieve-a-database-standard-verification"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          },
          {
            "description": "ID of Verification to retrieve",
            "in": "path",
            "name": "verification-id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "OK",
                    "value": {
                      "data": {
                        "type": "verification/database-standard",
                        "id": "ver_1rWMmoV3hoy2qWv3wGPcH43c",
                        "attributes": {
                          "status": "passed",
                          "created-at": "2022-08-02T05:02:56.000Z",
                          "created-at-ts": 1659416576,
                          "submitted-at": "2022-08-02T05:03:02.000Z",
                          "submitted-at-ts": 1659416582,
                          "completed-at": "2022-08-02T05:03:02.000Z",
                          "completed-at-ts": 1659416582,
                          "country-code": "US",
                          "name-first": "ALEXANDER",
                          "name-middle": "JAMES",
                          "name-last": "HAMILTON",
                          "address-street-1": "555 Beverly Hills",
                          "address-street-2": "Apartment 123",
                          "address-city": "Los Angeles",
                          "address-subdivision": "CA",
                          "address-postal-code": "55555",
                          "normalized-address-street-1": "555 Beverly Hills",
                          "normalized-address-street-2": "Apt 123",
                          "normalized-address-city": "Los Angeles",
                          "normalized-address-subdivision": "CA",
                          "normalized-address-postal-code": "55555",
                          "checks": [
                            {
                              "name": "database_standard_identity_comparison",
                              "status": "passed",
                              "reasons": [],
                              "metadata": {
                                "check-requirements": [
                                  {
                                    "name": "name_first",
                                    "match-result": "partial",
                                    "status": "passed",
                                    "comparisons": [
                                      {
                                        "type": "string_similarity",
                                        "match-level-minimum": "partial",
                                        "match-result": "partial"
                                      },
                                      {
                                        "type": "nickname",
                                        "match-level-minimum": "partial",
                                        "match-result": "none"
                                      },
                                      {
                                        "type": "string_difference",
                                        "match-level-minimum": "partial",
                                        "match-result": "none"
                                      },
                                      {
                                        "type": "substring",
                                        "match-level-minimum": "partial",
                                        "match-result": "partial"
                                      },
                                      {
                                        "type": "tokenization",
                                        "match-level-minimum": "partial",
                                        "match-result": "partial"
                                      }
                                    ]
                                  },
                                  {
                                    "name": "name_last",
                                    "match-result": "full",
                                    "status": "passed",
                                    "comparisons": [
                                      {
                                        "type": "string_similarity",
                                        "match-level-minimum": "partial",
                                        "match-result": "full"
                                      },
                                      {
                                        "type": "string_difference",
                                        "match-level-minimum": "partial",
                                        "match-result": "full"
                                      },
                                      {
                                        "type": "substring",
                                        "match-level-minimum": "partial",
                                        "match-result": "full"
                                      },
                                      {
                                        "type": "tokenization",
                                        "match-level-minimum": "partial",
                                        "match-result": "partial"
                                      }
                                    ]
                                  },
                                  {
                                    "name": "address_postal_code",
                                    "match-result": "full",
                                    "status": "passed",
                                    "comparisons": [
                                      {
                                        "type": "string_difference",
                                        "match-level-minimum": "partial",
                                        "match-result": "full"
                                      }
                                    ]
                                  }
                                ]
                              }
                            }
                          ]
                        },
                        "relationships": {
                          "inquiry": {
                            "data": {}
                          }
                        }
                      }
                    }
                  }
                },
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "type": {
                          "const": "verification/database-standard",
                          "description": "verification/database-standard",
                          "type": "string"
                        },
                        "id": {
                          "examples": [
                            "ver_1rWMmoV3hoy2qWv3wGPcH43c"
                          ],
                          "type": "string"
                        },
                        "attributes": {
                          "properties": {},
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/default-fields"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "checks": {
                                  "items": {
                                    "properties": {
                                      "metadata": {
                                        "properties": {
                                          "check-requirements": {
                                            "items": {
                                              "properties": {
                                                "comparisons": {
                                                  "items": {
                                                    "properties": {
                                                      "match-level-minimum": {
                                                        "examples": [
                                                          "partial"
                                                        ],
                                                        "type": "string"
                                                      },
                                                      "match-result": {
                                                        "examples": [
                                                          "partial"
                                                        ],
                                                        "type": "string"
                                                      },
                                                      "type": {
                                                        "examples": [
                                                          "string_similarity"
                                                        ],
                                                        "type": "string"
                                                      }
                                                    },
                                                    "type": "object"
                                                  },
                                                  "type": "array"
                                                },
                                                "match-result": {
                                                  "examples": [
                                                    "partial"
                                                  ],
                                                  "type": "string"
                                                },
                                                "name": {
                                                  "examples": [
                                                    "John"
                                                  ],
                                                  "type": "string"
                                                },
                                                "status": {
                                                  "examples": [
                                                    "passed"
                                                  ],
                                                  "type": "string"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "type": "array"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "name": {
                                        "examples": [
                                          "database_standard_identity_comparison"
                                        ],
                                        "type": "string"
                                      },
                                      "reasons": {
                                        "items": {
                                          "examples": [
                                            "no_inquiry"
                                          ],
                                          "type": "string"
                                        },
                                        "type": "array"
                                      },
                                      "status": {
                                        "examples": [
                                          "not_applicable"
                                        ],
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "completed-at": {
                                  "examples": [
                                    "2022-08-02T05:03:02.000Z"
                                  ],
                                  "type": "string"
                                },
                                "completed-at-ts": {
                                  "default": 0,
                                  "examples": [
                                    1659416582
                                  ],
                                  "type": "integer"
                                },
                                "country-code": {
                                  "examples": [
                                    "US"
                                  ],
                                  "type": "string"
                                },
                                "created-at": {
                                  "examples": [
                                    "2022-08-02T05:02:56.000Z"
                                  ],
                                  "type": "string"
                                },
                                "created-at-ts": {
                                  "default": 0,
                                  "examples": [
                                    1659416576
                                  ],
                                  "type": "integer"
                                },
                                "normalized-address-city": {
                                  "examples": [
                                    "Los Angeles"
                                  ],
                                  "type": "string"
                                },
                                "normalized-address-postal-code": {
                                  "examples": [
                                    "55555"
                                  ],
                                  "type": "string"
                                },
                                "normalized-address-street-1": {
                                  "examples": [
                                    "555 Beverly Hills"
                                  ],
                                  "type": "string"
                                },
                                "normalized-address-street-2": {
                                  "examples": [
                                    "Apt 123"
                                  ],
                                  "type": "string"
                                },
                                "normalized-address-subdivision": {
                                  "examples": [
                                    "CA"
                                  ],
                                  "type": "string"
                                },
                                "status": {
                                  "examples": [
                                    "passed"
                                  ],
                                  "type": "string"
                                },
                                "submitted-at": {
                                  "examples": [
                                    "2022-08-02T05:03:02.000Z"
                                  ],
                                  "type": "string"
                                },
                                "submitted-at-ts": {
                                  "default": 0,
                                  "examples": [
                                    1659416582
                                  ],
                                  "type": "integer"
                                }
                              }
                            }
                          ]
                        },
                        "relationships": {
                          "properties": {
                            "inquiry": {
                              "properties": {
                                "data": {
                                  "properties": {
                                    "id": {
                                      "examples": [
                                        "inq_Dj1JxEG9K153GbvFYGScCRlL"
                                      ],
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Retrieve a Database Standard Verification",
        "tags": [
          "Database Standard Verifications"
        ]
      }
    },
    "/verification/database-tins/{verification-id}": {
      "get": {
        "description": "Retrieve a TIN database verification",
        "operationId": "retrieve-a-tin-database-verification",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/retrieve-a-tin-database-verification"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          },
          {
            "description": "ID of Verification to retrieve",
            "in": "path",
            "name": "verification-id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "OK",
                    "value": {
                      "data": {
                        "type": "verification/database-tin",
                        "id": "ver_2wpqiEtejRcTA1hMJEXmbrJ6",
                        "attributes": {
                          "status": "passed",
                          "created-at": "2022-08-03T04:11:32.000Z",
                          "created-at-ts": 1659499892,
                          "submitted-at": "2022-08-03T04:13:00.000Z",
                          "submitted-at-ts": 1659499980,
                          "completed-at": "2022-08-03T04:13:06.000Z",
                          "completed-at-ts": 1659499986,
                          "country-code": "US",
                          "name-first": "ALEXANDER",
                          "checks": [
                            {
                              "name": "database_tin_name_comparison",
                              "status": "passed",
                              "reasons": [],
                              "metadata": {}
                            },
                            {
                              "name": "database_tin_deceased_detection",
                              "status": "passed",
                              "reasons": [],
                              "metadata": {}
                            },
                            {
                              "name": "database_tin_invalid_format_detection",
                              "status": "passed",
                              "reasons": [],
                              "metadata": {}
                            },
                            {
                              "name": "database_tin_disallowed_type_detection",
                              "status": "passed",
                              "reasons": [],
                              "metadata": {}
                            },
                            {
                              "name": "database_tin_service_available_detection",
                              "status": "passed",
                              "reasons": [],
                              "metadata": {}
                            }
                          ]
                        },
                        "relationships": {
                          "inquiry": {
                            "data": null
                          }
                        }
                      }
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/verification-database-tin"
                    }
                  }
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Retrieve a TIN Database Verification",
        "tags": [
          "TIN Database Verifications"
        ]
      }
    },
    "/verification/databases/{verification-id}": {
      "get": {
        "description": "Retrieve a database verification",
        "operationId": "retrieve-a-database-verification",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/retrieve-a-database-verification"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          },
          {
            "description": "ID of Verification to retrieve",
            "in": "path",
            "name": "verification-id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "OK",
                    "$ref": "#/components/examples/verification-database"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/verification-database"
                    }
                  }
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Retrieve a Database Verification",
        "tags": [
          "Database Verifications"
        ]
      }
    },
    "/verification/documents/{verification-id}": {
      "get": {
        "description": "Retrieves the details of a specific document verification",
        "operationId": "retrieve-a-document-verification",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/retrieve-a-document-verification"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          },
          {
            "name": "verification-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "OK",
                    "$ref": "#/components/examples/verification-document"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/verification-document"
                    }
                  }
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Retrieve a Document Verification",
        "tags": [
          "Document Verifications"
        ]
      }
    },
    "/verification/email-addresses/{verification-id}": {
      "get": {
        "description": "Retrieve a email address verification",
        "operationId": "retrieve-a-email-address-verification",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/retrieve-a-email-address-verification"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          },
          {
            "description": "ID of Verification to retrieve",
            "in": "path",
            "name": "verification-id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "OK",
                    "$ref": "#/components/examples/verification-email-address"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/verification-email-address"
                    }
                  }
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Retrieve a Email Address Verification",
        "tags": [
          "Email Address Verifications"
        ]
      }
    },
    "/verification/government-ids/{verification-id}": {
      "get": {
        "description": "Retrieve a government ID verification",
        "operationId": "retrieve-a-government-id-verification",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/retrieve-a-government-id-verification"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          },
          {
            "name": "verification-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "OK",
                    "$ref": "#/components/examples/verification-government-id-passed"
                  }
                },
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/verification-government-id"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Retrieve a Government Id Verification",
        "tags": [
          "Government ID Verifications"
        ]
      },
      "patch": {
        "description": "Updates an existing government ID verification. Can only update `initiated` verifications.",
        "operationId": "update-a-government-id-verification",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/update-a-government-id-verification"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          },
          {
            "name": "verification-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "data": {
                    "properties": {
                      "attributes": {
                        "properties": {
                          "back-photo": {
                            "description": "Back of ID.",
                            "properties": {
                              "data": {
                                "description": "Government ID photo data, must be images. Can provide more than one image and we will pick the best for processing. Can also be provided as uploaded file(s) such as with multipart/form-data requests instead of this object(s). Images must be between 10KB and 15MB.",
                                "properties": {
                                  "data": {
                                    "description": "Base64 encoded file.",
                                    "format": "binary",
                                    "type": "string"
                                  },
                                  "filename": {
                                    "description": "Name of file.",
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "data",
                                  "filename"
                                ],
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          "front-photo": {
                            "description": "Front of ID.",
                            "properties": {
                              "data": {
                                "description": "Government ID photo data, must be images. Can provide more than one image and we will pick the best for processing. Can also be provided as uploaded file(s) such as with multipart/form-data requests instead of this object(s). Images must be between 10KB and 15MB.",
                                "properties": {
                                  "data": {
                                    "description": "Base64 encoded file.",
                                    "format": "binary",
                                    "type": "string"
                                  },
                                  "filename": {
                                    "description": "Name of file.",
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "data",
                                  "filename"
                                ],
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          "selected-id-class": {
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "OK",
                    "$ref": "#/components/examples/verification-government-id"
                  }
                },
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/verification-government-id"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Update a Government ID Verification",
        "tags": [
          "Government ID Verifications"
        ]
      }
    },
    "/verification/government-id-nfcs/{verification-id}": {
      "get": {
        "description": "Retrieve a Government ID NFC verification",
        "operationId": "retrieve-a-government-id-nfc-verification",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/retrieve-a-government-id-nfc-verification"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          },
          {
            "name": "verification-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "OK",
                    "value": {
                      "data": {
                        "type": "verification/government-id-nfc",
                        "id": "ver_Ra6LFdoQmPFJH27gonC3cChh",
                        "attributes": {
                          "status": "passed",
                          "created-at": "2022-07-28T16:55:44.000Z",
                          "created-at-ts": 1659027344,
                          "submitted-at": "2022-07-28T20:47:06.000Z",
                          "submitted-at-ts": 1659041226,
                          "completed-at": "2022-07-28T20:47:12.000Z",
                          "completed-at-ts": 1659041232,
                          "birthdate": "1994-12-30",
                          "country-code": "UT",
                          "expiration-date": "2022-12-30",
                          "identification-number": "L898902C3",
                          "id-class": "pp",
                          "name-first": "ANNA MARIA",
                          "name-last": "SAMPLE",
                          "sex": "F",
                          "selfie-photo": {
                            "url": "https://files.withpersona.com/...",
                            "byte-size": 1000
                          },
                          "checks": [
                            {
                              "name": "id_nfc_expired_detection",
                              "status": "failed",
                              "reasons": [
                                "expired"
                              ],
                              "metadata": {}
                            }
                          ]
                        },
                        "relationships": {
                          "inquiry": {
                            "data": null
                          },
                          "document": {
                            "data": {
                              "type": "document/government-id-nfc",
                              "id": "doc_QZ8M2J1fH2o76Rq57vuVWMsE"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/verification-government-id-nfc"
                    }
                  }
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Retrieve a Government Id NFC Verification",
        "tags": [
          "Government ID NFC Verifications"
        ]
      }
    },
    "/verification/phone-numbers/{verification-id}": {
      "get": {
        "description": "Retrieve a phone number verification",
        "operationId": "retrieve-a-phone-number-verification",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/retrieve-a-phone-number-verification"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          },
          {
            "description": "ID of Verification to retrieve",
            "in": "path",
            "name": "verification-id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "OK",
                    "$ref": "#/components/examples/verification-phone-number"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/verification-phone-number"
                    }
                  }
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Retrieve a Phone Number Verification",
        "tags": [
          "Phone Number Verifications"
        ]
      }
    },
    "/verification/selfies/{verification-id}": {
      "get": {
        "description": "Retrieve a selfie ID verification",
        "operationId": "retrieve-a-selfie-verification",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/retrieve-a-selfie-verification"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          },
          {
            "name": "verification-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "OK",
                    "value": {
                      "data": {
                        "type": "verification/selfie",
                        "id": "ver_dCvHHPUHxvb5j2iYKfjwafBU",
                        "attributes": {
                          "status": "passed",
                          "created-at": "2022-07-28T21:54:23.000Z",
                          "created-at-ts": 1659045263,
                          "submitted-at": "2022-07-28T21:54:29.000Z",
                          "submitted-at-ts": 1659045269,
                          "completed-at": "2022-07-28T21:54:33.000Z",
                          "completed-at-ts": 1659045273,
                          "country-code": null,
                          "selfie-similarity-score-left": 100,
                          "selfie-similarity-score-right": 100,
                          "checks": [
                            {
                              "name": "selfie_id_comparison",
                              "status": "not_applicable",
                              "reasons": [
                                "no_government_id"
                              ],
                              "metadata": {}
                            },
                            {
                              "name": "selfie_pose_detection",
                              "status": "passed",
                              "reasons": [],
                              "metadata": {}
                            },
                            {
                              "name": "selfie_multiple_faces_detection",
                              "status": "passed",
                              "reasons": [],
                              "metadata": {}
                            },
                            {
                              "name": "selfie_pose_repeat_detection",
                              "status": "passed",
                              "reasons": [],
                              "metadata": {}
                            },
                            {
                              "name": "selfie_account_comparison",
                              "status": "not_applicable",
                              "reasons": [
                                "no_account_selfie_present"
                              ],
                              "metadata": {}
                            },
                            {
                              "name": "selfie_suspicious_entity_detection",
                              "status": "passed",
                              "reasons": [],
                              "metadata": {}
                            },
                            {
                              "name": "selfie_liveness_detection",
                              "status": "passed",
                              "reasons": [],
                              "metadata": {}
                            },
                            {
                              "name": "selfie_glasses_detection",
                              "status": "passed",
                              "reasons": [],
                              "metadata": {}
                            },
                            {
                              "name": "selfie_glare_detection",
                              "status": "failed",
                              "reasons": [
                                "too_much_glare"
                              ],
                              "metadata": {}
                            },
                            {
                              "name": "selfie_public_figure_detection",
                              "status": "passed",
                              "reasons": [],
                              "metadata": {}
                            },
                            {
                              "name": "selfie_age_comparison",
                              "status": "not_applicable",
                              "reasons": [
                                "no_reference_birthdate"
                              ],
                              "metadata": {}
                            },
                            {
                              "name": "selfie_face_covering_detection",
                              "status": "passed",
                              "reasons": [],
                              "metadata": {}
                            }
                          ],
                          "capture-method": "photo",
                          "document-similarity-score": null,
                          "left-photo-url": "https://files.withpersona.com/...",
                          "center-photo-url": "https://files.withpersona.com/...",
                          "right-photo-url": "https://files.withpersona.com/...",
                          "photo-urls": [
                            {
                              "page": "left_photo",
                              "url": "https://files.withpersona.com/...",
                              "byte-size": 316802
                            }
                          ],
                          "video-url": "https://files.withpersona.com/...",
                          "center-photo-face-coordinates": {
                            "top-left": [
                              0.2,
                              0.5
                            ],
                            "top-right": [
                              0.5,
                              0.5
                            ],
                            "bottom-left": [
                              0.2,
                              0.7
                            ],
                            "bottom-right": [
                              0.5,
                              0.7
                            ]
                          }
                        },
                        "relationships": {
                          "inquiry": {
                            "data": null
                          }
                        }
                      }
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/verification-selfie"
                    }
                  }
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Retrieve a Selfie Verification",
        "tags": [
          "Selfie Verifications"
        ]
      }
    },
    "/verifications/{verification-id}": {
      "get": {
        "description": "Retrieves the details of an existing Verification.",
        "operationId": "retrieve-a-verification",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/retrieve-a-verification"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          },
          {
            "name": "verification-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/verification"
                    }
                  }
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Retrieve a Verification",
        "tags": [
          "Verifications"
        ]
      },
      "delete": {
        "description": "Permanently deletes personally identifiable information (PII) for a Verification. **This action cannot be undone**. This endpoint can be used to comply with privacy regulations such as GDPR / CCPA or to enforce data privacy.",
        "operationId": "redact-a-verification",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/redact-a-verification"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "name": "verification-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "OK",
                    "value": {
                      "data": {
                        "type": "verification/government-id",
                        "id": "ver_7f6w4qu7KK7gjjtgp7nAixHd",
                        "attributes": {
                          "status": "passed",
                          "created-at": "2019-11-15T21:24:24.000Z",
                          "completed-at": null,
                          "country-code": null,
                          "entity-confidence-score": null,
                          "entity-confidence-reasons": [],
                          "front-photo-url": null,
                          "back-photo-url": null,
                          "selfie-photo-url": null,
                          "id-class": null,
                          "capture-method": null,
                          "name-first": null,
                          "name-middle": null,
                          "name-last": null,
                          "birthdate": null,
                          "address-street-1": null,
                          "address-street-2": null,
                          "address-city": null,
                          "address-subdivision": null,
                          "address-postal-code": null,
                          "issuing-authority": null,
                          "issue-date": null,
                          "expiration-date": null,
                          "sex": null,
                          "height": null,
                          "endorsements": null,
                          "restrictions": null,
                          "vehicle-class": null,
                          "identification-number": null,
                          "checks": []
                        },
                        "relationships": {
                          "inquiry": {
                            "data": null
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Redact a Verification",
        "tags": [
          "Verifications"
        ]
      }
    },
    "/verifications/{verification-id}/print": {
      "get": {
        "description": "Prints a verification in PDF format.",
        "operationId": "print-a-verification-as-pdf",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/print-a-verification-as-pdf"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          },
          {
            "name": "verification-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/pdf": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Print Verification PDF",
        "tags": [
          "Verifications"
        ]
      }
    },
    "/webhooks": {
      "get": {
        "description": "Returns a list of your environment's webhooks.",
        "operationId": "list-all-webhooks",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/list-all-webhooks"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "in": "query",
            "name": "page",
            "style": "deepObject",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/nested-pagination-query-params"
                },
                {
                  "type": "object",
                  "properties": {
                    "after": {
                      "example": "wbh_ABC123"
                    },
                    "before": {
                      "example": "wbh_ABC123"
                    }
                  }
                }
              ]
            }
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "OK",
                    "value": {
                      "data": [
                        {
                          "type": "webhook",
                          "id": "wbh_ABC123",
                          "attributes": {
                            "status": "disabled",
                            "url": "https://withpersona.com",
                            "api-version": "2023-01-05",
                            "api-key-inflection": "kebab",
                            "api-attributes-blocklist": [
                              "address-*",
                              "name-last",
                              "/data/attributes/fields/*-number"
                            ],
                            "file-access-token-expires-in": 21600,
                            "enabled-events": [
                              "account.created",
                              "verification.created"
                            ],
                            "payload-filter": {
                              "data": {
                                "relationships": {
                                  "inquiry-template": {
                                    "data": {
                                      "id": "itmpl_abc123def456"
                                    }
                                  }
                                }
                              }
                            },
                            "created-at": "2023-08-17T23:18:13.000Z"
                          }
                        },
                        {
                          "type": "webhook",
                          "id": "wbh_ABC123",
                          "attributes": {
                            "status": "disabled",
                            "url": "https://withpersona.com",
                            "api-version": "2023-01-05",
                            "api-key-inflection": "camel",
                            "api-attributes-blocklist": [
                              "/data/attributes/fields/*-number"
                            ],
                            "file-access-token-expires-in": 600,
                            "enabled-events": [
                              "*"
                            ],
                            "payload-filter": {},
                            "created-at": "2023-09-18T23:18:13.000Z"
                          }
                        }
                      ],
                      "links": {
                        "prev": null,
                        "next": null
                      }
                    }
                  }
                },
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/webhook"
                      },
                      "type": "array",
                      "description": "An array of Webhooks"
                    },
                    "links": {
                      "properties": {
                        "next": {
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "prev": {
                          "type": [
                            "string",
                            "null"
                          ]
                        }
                      },
                      "type": "object"
                    },
                    "included": {
                      "$ref": "#/components/schemas/empty-included-objects"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "List all Webhooks",
        "tags": [
          "Webhooks"
        ]
      },
      "post": {
        "description": "Creates a new webhook with response defaults.",
        "operationId": "create-a-webhook",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/create-a-webhook"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "data": {
                    "properties": {
                      "attributes": {
                        "$ref": "#/components/schemas/webhook-request-attributes",
                        "required": [
                          "url",
                          "enabled-events"
                        ]
                      }
                    },
                    "required": [
                      "attributes"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "Created",
                    "$ref": "#/components/examples/webhook-created"
                  }
                },
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/webhook-with-secret"
                    },
                    "included": {
                      "$ref": "#/components/schemas/empty-included-objects"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Create a Webhook",
        "tags": [
          "Webhooks"
        ]
      }
    },
    "/webhooks/{webhook-id}": {
      "get": {
        "description": "Retrieves the details of an existing webhook, including its secret.",
        "operationId": "retrieve-a-webhook",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/retrieve-a-webhook"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          },
          {
            "description": "Webhook's ID (starts with \"wbh_\")",
            "in": "path",
            "name": "webhook-id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "OK",
                    "$ref": "#/components/examples/webhook-created"
                  }
                },
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/webhook-with-secret"
                    },
                    "included": {
                      "$ref": "#/components/schemas/empty-included-objects"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Retrieve a Webhook",
        "tags": [
          "Webhooks"
        ]
      },
      "patch": {
        "description": "Updates an existing Webhook.",
        "operationId": "update-a-webhook",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/update-a-webhook"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          },
          {
            "description": "Webhook's ID (starts with \"wbh_\")",
            "in": "path",
            "name": "webhook-id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "data": {
                    "properties": {
                      "attributes": {
                        "$ref": "#/components/schemas/webhook-request-attributes"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "OK",
                    "$ref": "#/components/examples/webhook-disabled"
                  }
                },
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/webhook"
                    },
                    "included": {
                      "$ref": "#/components/schemas/empty-included-objects"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Update a Webhook",
        "tags": [
          "Webhooks"
        ]
      }
    },
    "/webhooks/{webhook-id}/archive": {
      "post": {
        "description": "Archives a webhook.",
        "operationId": "archive-a-webhook",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/archive-a-webhook"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          },
          {
            "description": "Webhook's ID (starts with \"wbh_\")",
            "in": "path",
            "name": "webhook-id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "OK",
                    "$ref": "#/components/examples/webhook-archived"
                  }
                },
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/webhook"
                    },
                    "included": {
                      "$ref": "#/components/schemas/empty-included-objects"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Archive a Webhook",
        "tags": [
          "Webhooks"
        ]
      }
    },
    "/webhooks/{webhook-id}/enable": {
      "post": {
        "description": "Enables a webhook.",
        "operationId": "enable-a-webhook",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/enable-a-webhook"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          },
          {
            "description": "Webhook's ID (starts with \"wbh_\")",
            "in": "path",
            "name": "webhook-id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "OK",
                    "$ref": "#/components/examples/webhook-enabled"
                  }
                },
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/webhook"
                    },
                    "included": {
                      "$ref": "#/components/schemas/empty-included-objects"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Enable a Webhook",
        "tags": [
          "Webhooks"
        ]
      }
    },
    "/webhooks/{webhook-id}/disable": {
      "post": {
        "description": "Disables a webhook.",
        "operationId": "disable-a-webhook",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/disable-a-webhook"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          },
          {
            "description": "Webhook's ID (starts with \"wbh_\")",
            "in": "path",
            "name": "webhook-id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "OK",
                    "$ref": "#/components/examples/webhook-disabled"
                  }
                },
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/webhook"
                    },
                    "included": {
                      "$ref": "#/components/schemas/empty-included-objects"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Disable a Webhook",
        "tags": [
          "Webhooks"
        ]
      }
    },
    "/webhooks/{webhook-id}/rotate_secret": {
      "post": {
        "description": "Rotates a webhook's secret.",
        "operationId": "rotate-a-webhook-secret",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/rotate-a-webhook-secret"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          },
          {
            "description": "Webhook's ID (starts with \"wbh_\")",
            "in": "path",
            "name": "webhook-id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "meta": {
                    "type": "object",
                    "properties": {
                      "expires-in-seconds": {
                        "description": "Seconds until currently active webhook expires",
                        "example": 7200,
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "OK",
                    "$ref": "#/components/examples/webhook-created"
                  }
                },
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/webhook-with-secret"
                    },
                    "included": {
                      "$ref": "#/components/schemas/empty-included-objects"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Rotate a Webhook's secret",
        "tags": [
          "Webhooks"
        ]
      }
    },
    "/workflows/{workflow-id}/trigger": {
      "post": {
        "description": "Creates a new Workflow Run.\n\nNote: The payload is arbitrary and defined by the Workflow version trigger schema.",
        "operationId": "create-a-workflow-run",
        "externalDocs": {
          "description": "Full documentation for this API on the Persona website.",
          "url": "https://docs.withpersona.com/reference/create-a-workflow-run"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-inflection-header"
          },
          {
            "$ref": "#/components/parameters/idempotency-key-header"
          },
          {
            "$ref": "#/components/parameters/persona-version-header"
          },
          {
            "$ref": "#/components/parameters/include-query-parameter"
          },
          {
            "name": "workflow-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "data": {
                    "description": "Matches the trigger payload schema defined by the Workflow version",
                    "properties": {
                      "attributes": {
                        "description": "Matches the trigger payload schema defined by the workflow version",
                        "properties": {
                          "example-field-1": {
                            "description": "This is just an example field name. The actual name will depend on the trigger schema defined for the workflow version.",
                            "type": "string"
                          },
                          "example-field-2": {
                            "description": "This is just an example field name. The actual name will depend on the trigger schema defined for the workflow version.",
                            "format": "int32",
                            "type": "integer"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "summary": "OK",
                    "value": {
                      "data": {
                        "type": "workflow-run",
                        "id": "wfr_3JqAR9ddLRVZLK5z4yD8oeHB",
                        "attributes": {
                          "status": "in_progress",
                          "created-at": "2022-08-08T18:55:44.910Z",
                          "completed-at": null
                        },
                        "relationships": {
                          "workflow-version": {
                            "data": {
                              "type": "workflow-version",
                              "id": "wfv_DkWeGvK9wojQnubF8ABHzJRQ"
                            }
                          },
                          "workflow": {
                            "data": {
                              "type": "workflow",
                              "id": "wfl_3VghhbvDc7UuUNT8uZrqZjsk"
                            }
                          },
                          "creator": {
                            "data": null
                          }
                        }
                      }
                    }
                  }
                },
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "type": {
                          "const": "workflow-run",
                          "description": "workflow-run",
                          "type": "string"
                        },
                        "id": {
                          "examples": [
                            "wfr_3JqAR9ddLRVZLK5z4yD8oeHB"
                          ],
                          "type": "string"
                        },
                        "attributes": {
                          "properties": {
                            "completed-at": {},
                            "created-at": {
                              "examples": [
                                "2022-08-08T18:55:44.910Z"
                              ],
                              "type": "string"
                            },
                            "status": {
                              "examples": [
                                "in_progress"
                              ],
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "relationships": {
                          "properties": {
                            "creator": {
                              "properties": {
                                "data": {}
                              },
                              "type": "object"
                            },
                            "workflow": {
                              "properties": {
                                "data": {
                                  "properties": {
                                    "type": {
                                      "const": "workflow",
                                      "description": "workflow",
                                      "type": "string"
                                    },
                                    "id": {
                                      "examples": [
                                        "wfl_3VghhbvDc7UuUNT8uZrqZjsk"
                                      ],
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            },
                            "workflow-version": {
                              "properties": {
                                "data": {
                                  "properties": {
                                    "type": {
                                      "const": "workflow-version",
                                      "description": "workflow-version",
                                      "type": "string"
                                    },
                                    "id": {
                                      "examples": [
                                        "wfv_DkWeGvK9wojQnubF8ABHzJRQ"
                                      ],
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessable-entity"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          }
        },
        "summary": "Create a Workflow Run",
        "tags": [
          "Workflows"
        ]
      }
    }
  },
  "webhooks": {
    "account.created": {
      "post": {
        "operationId": "webhook-account-created",
        "summary": "Account created",
        "description": "Webhook for the `account.created` event. For more info see [Webhooks Overview](https://docs.withpersona.com/docs/webhooks).",
        "tags": [
          "Webhooks: Account events"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/persona-signature-header"
          },
          {
            "$ref": "#/components/parameters/persona-webhook-attempts-made"
          },
          {
            "$ref": "#/components/parameters/persona-webhook-attempts-left"
          },
          {
            "$ref": "#/components/parameters/persona-webhook-first-attempted-at"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {},
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/webhook-body-shared-data"
                      },
                      {
                        "type": "object",
                        "properties": {
                          "attributes": {
                            "properties": {},
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "const": "account.created",
                                    "description": "account.created"
                                  },
                                  "payload": {
                                    "type": "object",
                                    "properties": {
                                      "data": {
                                        "$ref": "#/components/schemas/account"
                                      }
                                    }
                                  }
                                }
                              },
                              {
                                "$ref": "#/components/schemas/webhook-body-shared-attributes"
                              }
                            ]
                          }
                        }
                      }
                    ]
                  }
                }
              },
              "examples": {
                "Example Body": {
                  "$ref": "#/components/examples/account-created-webhook-body"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/success"
          }
        }
      }
    },
    "account.redacted": {
      "post": {
        "operationId": "webhook-account-redacted",
        "summary": "Account redacted",
        "description": "Webhook for the `account.redacted` event. For more info see [Webhooks Overview](https://docs.withpersona.com/docs/webhooks).",
        "tags": [
          "Webhooks: Account events"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/persona-signature-header"
          },
          {
            "$ref": "#/components/parameters/persona-webhook-attempts-made"
          },
          {
            "$ref": "#/components/parameters/persona-webhook-attempts-left"
          },
          {
            "$ref": "#/components/parameters/persona-webhook-first-attempted-at"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {},
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/webhook-body-shared-data"
                      },
                      {
                        "type": "object",
                        "properties": {
                          "attributes": {
                            "properties": {},
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "const": "account.redacted",
                                    "description": "account.redacted"
                                  },
                                  "payload": {
                                    "type": "object",
                                    "properties": {
                                      "data": {
                                        "$ref": "#/components/schemas/account"
                                      }
                                    }
                                  }
                                }
                              },
                              {
                                "$ref": "#/components/schemas/webhook-body-shared-attributes"
                              }
                            ]
                          }
                        }
                      }
                    ]
                  }
                }
              },
              "examples": {
                "Example Body": {
                  "$ref": "#/components/examples/account-redacted-webhook-body"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/success"
          }
        }
      }
    },
    "account.archived": {
      "post": {
        "operationId": "webhook-account-archived",
        "summary": "Account archived",
        "description": "Webhook for the `account.archived` event. For more info see [Webhooks Overview](https://docs.withpersona.com/docs/webhooks).",
        "tags": [
          "Webhooks: Account events"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/persona-signature-header"
          },
          {
            "$ref": "#/components/parameters/persona-webhook-attempts-made"
          },
          {
            "$ref": "#/components/parameters/persona-webhook-attempts-left"
          },
          {
            "$ref": "#/components/parameters/persona-webhook-first-attempted-at"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {},
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/webhook-body-shared-data"
                      },
                      {
                        "type": "object",
                        "properties": {
                          "attributes": {
                            "properties": {},
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "const": "account.archived",
                                    "description": "account.archived"
                                  },
                                  "payload": {
                                    "type": "object",
                                    "properties": {
                                      "data": {
                                        "$ref": "#/components/schemas/account"
                                      }
                                    }
                                  }
                                }
                              },
                              {
                                "$ref": "#/components/schemas/webhook-body-shared-attributes"
                              }
                            ]
                          }
                        }
                      }
                    ]
                  }
                }
              },
              "examples": {
                "Example Body": {
                  "$ref": "#/components/examples/account-archived-webhook-body"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/success"
          }
        }
      }
    },
    "account.restored": {
      "post": {
        "operationId": "webhook-account-restored",
        "summary": "Account restored",
        "description": "Webhook for the `account.restored` event. For more info see [Webhooks Overview](https://docs.withpersona.com/docs/webhooks).",
        "tags": [
          "Webhooks: Account events"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/persona-signature-header"
          },
          {
            "$ref": "#/components/parameters/persona-webhook-attempts-made"
          },
          {
            "$ref": "#/components/parameters/persona-webhook-attempts-left"
          },
          {
            "$ref": "#/components/parameters/persona-webhook-first-attempted-at"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {},
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/webhook-body-shared-data"
                      },
                      {
                        "type": "object",
                        "properties": {
                          "attributes": {
                            "properties": {},
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "const": "account.restored",
                                    "description": "account.restored"
                                  },
                                  "payload": {
                                    "type": "object",
                                    "properties": {
                                      "data": {
                                        "$ref": "#/components/schemas/account"
                                      }
                                    }
                                  }
                                }
                              },
                              {
                                "$ref": "#/components/schemas/webhook-body-shared-attributes"
                              }
                            ]
                          }
                        }
                      }
                    ]
                  }
                }
              },
              "examples": {
                "Example Body": {
                  "$ref": "#/components/examples/account-restored-webhook-body"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/success"
          }
        }
      }
    },
    "account.consolidated": {
      "post": {
        "operationId": "webhook-account-consolidated",
        "summary": "Account consolidated",
        "description": "Webhook for the `account.consolidated` event. For more info see [Webhooks Overview](https://docs.withpersona.com/docs/webhooks).",
        "tags": [
          "Webhooks: Account events"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/persona-signature-header"
          },
          {
            "$ref": "#/components/parameters/persona-webhook-attempts-made"
          },
          {
            "$ref": "#/components/parameters/persona-webhook-attempts-left"
          },
          {
            "$ref": "#/components/parameters/persona-webhook-first-attempted-at"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {},
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/webhook-body-shared-data"
                      },
                      {
                        "type": "object",
                        "properties": {
                          "attributes": {
                            "properties": {},
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "const": "account.consolidated",
                                    "description": "account.consolidated"
                                  },
                                  "payload": {
                                    "type": "object",
                                    "properties": {
                                      "data": {
                                        "$ref": "#/components/schemas/account"
                                      }
                                    }
                                  }
                                }
                              },
                              {
                                "$ref": "#/components/schemas/webhook-body-shared-attributes"
                              }
                            ]
                          }
                        }
                      }
                    ]
                  }
                }
              },
              "examples": {
                "Example Body": {
                  "$ref": "#/components/examples/account-consolidated-webhook-body"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/success"
          }
        }
      }
    },
    "account.tag-added": {
      "post": {
        "operationId": "webhook-account-tag-added",
        "summary": "Account tag added",
        "description": "Webhook for the `account.tag-added` event. For more info see [Webhooks Overview](https://docs.withpersona.com/docs/webhooks).",
        "tags": [
          "Webhooks: Account events"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/persona-signature-header"
          },
          {
            "$ref": "#/components/parameters/persona-webhook-attempts-made"
          },
          {
            "$ref": "#/components/parameters/persona-webhook-attempts-left"
          },
          {
            "$ref": "#/components/parameters/persona-webhook-first-attempted-at"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {},
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/webhook-body-shared-data"
                      },
                      {
                        "type": "object",
                        "properties": {
                          "attributes": {
                            "properties": {},
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "const": "account.tag-added",
                                    "description": "account.tag-added"
                                  },
                                  "payload": {
                                    "type": "object",
                                    "properties": {
                                      "data": {
                                        "$ref": "#/components/schemas/account"
                                      }
                                    }
                                  }
                                }
                              },
                              {
                                "$ref": "#/components/schemas/webhook-body-shared-attributes"
                              }
                            ]
                          }
                        }
                      }
                    ]
                  }
                }
              },
              "examples": {
                "Example Body": {
                  "$ref": "#/components/examples/account-tag-added-webhook-body"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/success"
          }
        }
      }
    },
    "account.tag-removed": {
      "post": {
        "operationId": "webhook-account-tag-removed",
        "summary": "Account tag removed",
        "description": "Webhook for the `account.tag-removed` event. For more info see [Webhooks Overview](https://docs.withpersona.com/docs/webhooks).",
        "tags": [
          "Webhooks: Account events"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/persona-signature-header"
          },
          {
            "$ref": "#/components/parameters/persona-webhook-attempts-made"
          },
          {
            "$ref": "#/components/parameters/persona-webhook-attempts-left"
          },
          {
            "$ref": "#/components/parameters/persona-webhook-first-attempted-at"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {},
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/webhook-body-shared-data"
                      },
                      {
                        "type": "object",
                        "properties": {
                          "attributes": {
                            "properties": {},
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "const": "account.tag-removed",
                                    "description": "account.tag-removed"
                                  },
                                  "payload": {
                                    "type": "object",
                                    "properties": {
                                      "data": {
                                        "$ref": "#/components/schemas/account"
                                      }
                                    }
                                  }
                                }
                              },
                              {
                                "$ref": "#/components/schemas/webhook-body-shared-attributes"
                              }
                            ]
                          }
                        }
                      }
                    ]
                  }
                }
              },
              "examples": {
                "Example Body": {
                  "$ref": "#/components/examples/account-tag-removed-webhook-body"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/success"
          }
        }
      }
    },
    "inquiry.created": {
      "post": {
        "operationId": "webhook-inquiry-created",
        "summary": "Inquiry created",
        "description": "Webhook for the `inquiry.created` event. For more info see [Webhooks Overview](https://docs.withpersona.com/docs/webhooks).",
        "tags": [
          "Webhooks: Inquiry events"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/persona-signature-header"
          },
          {
            "$ref": "#/components/parameters/persona-webhook-attempts-made"
          },
          {
            "$ref": "#/components/parameters/persona-webhook-attempts-left"
          },
          {
            "$ref": "#/components/parameters/persona-webhook-first-attempted-at"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {},
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/webhook-body-shared-data"
                      },
                      {
                        "type": "object",
                        "properties": {
                          "attributes": {
                            "properties": {},
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "const": "inquiry.created",
                                    "description": "inquiry.created"
                                  },
                                  "payload": {
                                    "type": "object",
                                    "properties": {
                                      "data": {
                                        "$ref": "#/components/schemas/inquiry"
                                      },
                                      "included": {
                                        "description": "All objects that are present in `data.attributes.relationships` will be provided in `included`.",
                                        "$ref": "#/components/schemas/inquiry-included-objects"
                                      }
                                    }
                                  }
                                }
                              },
                              {
                                "$ref": "#/components/schemas/webhook-body-shared-attributes"
                              }
                            ]
                          }
                        }
                      }
                    ]
                  }
                }
              },
              "examples": {
                "Example Body": {
                  "$ref": "#/components/examples/inquiry-created-webhook-body"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/success"
          }
        }
      }
    },
    "inquiry.expired": {
      "post": {
        "operationId": "webhook-inquiry-expired",
        "summary": "Inquiry expired",
        "description": "Webhook for the `inquiry.expired` event. For more info see [Webhooks Overview](https://docs.withpersona.com/docs/webhooks).",
        "tags": [
          "Webhooks: Inquiry events"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/persona-signature-header"
          },
          {
            "$ref": "#/components/parameters/persona-webhook-attempts-made"
          },
          {
            "$ref": "#/components/parameters/persona-webhook-attempts-left"
          },
          {
            "$ref": "#/components/parameters/persona-webhook-first-attempted-at"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {},
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/webhook-body-shared-data"
                      },
                      {
                        "type": "object",
                        "properties": {
                          "attributes": {
                            "properties": {},
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "const": "inquiry.expired",
                                    "description": "inquiry.expired"
                                  },
                                  "payload": {
                                    "type": "object",
                                    "properties": {
                                      "data": {
                                        "$ref": "#/components/schemas/inquiry"
                                      },
                                      "included": {
                                        "description": "All objects that are present in `data.attributes.relationships` will be provided in `included`.",
                                        "$ref": "#/components/schemas/inquiry-included-objects"
                                      }
                                    }
                                  }
                                }
                              },
                              {
                                "$ref": "#/components/schemas/webhook-body-shared-attributes"
                              }
                            ]
                          }
                        }
                      }
                    ]
                  }
                }
              },
              "examples": {
                "Example Body": {
                  "$ref": "#/components/examples/inquiry-expired-webhook-body"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/success"
          }
        }
      }
    },
    "inquiry.completed": {
      "post": {
        "operationId": "webhook-inquiry-completed",
        "summary": "Inquiry completed",
        "description": "Webhook for the `inquiry.completed` event. For more info see [Webhooks Overview](https://docs.withpersona.com/docs/webhooks).",
        "tags": [
          "Webhooks: Inquiry events"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/persona-signature-header"
          },
          {
            "$ref": "#/components/parameters/persona-webhook-attempts-made"
          },
          {
            "$ref": "#/components/parameters/persona-webhook-attempts-left"
          },
          {
            "$ref": "#/components/parameters/persona-webhook-first-attempted-at"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {},
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/webhook-body-shared-data"
                      },
                      {
                        "type": "object",
                        "properties": {
                          "attributes": {
                            "properties": {},
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "const": "inquiry.completed",
                                    "description": "inquiry.completed"
                                  },
                                  "payload": {
                                    "type": "object",
                                    "properties": {
                                      "data": {
                                        "$ref": "#/components/schemas/inquiry"
                                      },
                                      "included": {
                                        "description": "All objects that are present in `data.attributes.relationships` will be provided in `included`.",
                                        "$ref": "#/components/schemas/inquiry-included-objects"
                                      }
                                    }
                                  }
                                }
                              },
                              {
                                "$ref": "#/components/schemas/webhook-body-shared-attributes"
                              }
                            ]
                          }
                        }
                      }
                    ]
                  }
                }
              },
              "examples": {
                "Example Body": {
                  "$ref": "#/components/examples/inquiry-completed-webhook-body"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/success"
          }
        }
      }
    },
    "inquiry.failed": {
      "post": {
        "operationId": "webhook-inquiry-failed",
        "summary": "Inquiry failed",
        "description": "Webhook for the `inquiry.failed` event. For more info see [Webhooks Overview](https://docs.withpersona.com/docs/webhooks).",
        "tags": [
          "Webhooks: Inquiry events"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/persona-signature-header"
          },
          {
            "$ref": "#/components/parameters/persona-webhook-attempts-made"
          },
          {
            "$ref": "#/components/parameters/persona-webhook-attempts-left"
          },
          {
            "$ref": "#/components/parameters/persona-webhook-first-attempted-at"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {},
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/webhook-body-shared-data"
                      },
                      {
                        "type": "object",
                        "properties": {
                          "attributes": {
                            "properties": {},
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "const": "inquiry.failed",
                                    "description": "inquiry.failed"
                                  },
                                  "payload": {
                                    "type": "object",
                                    "properties": {
                                      "data": {
                                        "$ref": "#/components/schemas/inquiry"
                                      },
                                      "included": {
                                        "description": "All objects that are present in `data.attributes.relationships` will be provided in `included`.",
                                        "$ref": "#/components/schemas/inquiry-included-objects"
                                      }
                                    }
                                  }
                                }
                              },
                              {
                                "$ref": "#/components/schemas/webhook-body-shared-attributes"
                              }
                            ]
                          }
                        }
                      }
                    ]
                  }
                }
              },
              "examples": {
                "Example Body": {
                  "$ref": "#/components/examples/inquiry-failed-webhook-body"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/success"
          }
        }
      }
    },
    "inquiry.marked-for-review": {
      "post": {
        "operationId": "webhook-inquiry-marked-for-review",
        "summary": "Inquiry marked for review",
        "description": "Webhook for the `inquiry.marked-for-review` event. For more info see [Webhooks Overview](https://docs.withpersona.com/docs/webhooks).",
        "tags": [
          "Webhooks: Inquiry events"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/persona-signature-header"
          },
          {
            "$ref": "#/components/parameters/persona-webhook-attempts-made"
          },
          {
            "$ref": "#/components/parameters/persona-webhook-attempts-left"
          },
          {
            "$ref": "#/components/parameters/persona-webhook-first-attempted-at"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {},
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/webhook-body-shared-data"
                      },
                      {
                        "type": "object",
                        "properties": {
                          "attributes": {
                            "properties": {},
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "const": "inquiry.marked-for-review",
                                    "description": "inquiry.marked-for-review"
                                  },
                                  "payload": {
                                    "type": "object",
                                    "properties": {
                                      "data": {
                                        "$ref": "#/components/schemas/inquiry"
                                      },
                                      "included": {
                                        "description": "All objects that are present in `data.attributes.relationships` will be provided in `included`.",
                                        "$ref": "#/components/schemas/inquiry-included-objects"
                                      }
                                    }
                                  }
                                }
                              },
                              {
                                "$ref": "#/components/schemas/webhook-body-shared-attributes"
                              }
                            ]
                          }
                        }
                      }
                    ]
                  }
                }
              },
              "examples": {
                "Example Body": {
                  "$ref": "#/components/examples/inquiry-marked-for-review-webhook-body"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/success"
          }
        }
      }
    },
    "inquiry.approved": {
      "post": {
        "operationId": "webhook-inquiry-approved",
        "summary": "Inquiry approved",
        "description": "Webhook for the `inquiry.approved` event. For more info see [Webhooks Overview](https://docs.withpersona.com/docs/webhooks).",
        "tags": [
          "Webhooks: Inquiry events"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/persona-signature-header"
          },
          {
            "$ref": "#/components/parameters/persona-webhook-attempts-made"
          },
          {
            "$ref": "#/components/parameters/persona-webhook-attempts-left"
          },
          {
            "$ref": "#/components/parameters/persona-webhook-first-attempted-at"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {},
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/webhook-body-shared-data"
                      },
                      {
                        "type": "object",
                        "properties": {
                          "attributes": {
                            "properties": {},
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "const": "inquiry.approved",
                                    "description": "inquiry.approved"
                                  },
                                  "payload": {
                                    "type": "object",
                                    "properties": {
                                      "data": {
                                        "$ref": "#/components/schemas/inquiry"
                                      },
                                      "included": {
                                        "description": "All objects that are present in `data.attributes.relationships` will be provided in `included`.",
                                        "$ref": "#/components/schemas/inquiry-included-objects"
                                      }
                                    }
                                  }
                                }
                              },
                              {
                                "$ref": "#/components/schemas/webhook-body-shared-attributes"
                              }
                            ]
                          }
                        }
                      }
                    ]
                  }
                }
              },
              "examples": {
                "Example Body": {
                  "$ref": "#/components/examples/inquiry-approved-webhook-body"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/success"
          }
        }
      }
    },
    "inquiry.declined": {
      "post": {
        "operationId": "webhook-inquiry-declined",
        "summary": "Inquiry declined",
        "description": "Webhook for the `inquiry.declined` event. For more info see [Webhooks Overview](https://docs.withpersona.com/docs/webhooks).",
        "tags": [
          "Webhooks: Inquiry events"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/persona-signature-header"
          },
          {
            "$ref": "#/components/parameters/persona-webhook-attempts-made"
          },
          {
            "$ref": "#/components/parameters/persona-webhook-attempts-left"
          },
          {
            "$ref": "#/components/parameters/persona-webhook-first-attempted-at"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {},
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/webhook-body-shared-data"
                      },
                      {
                        "type": "object",
                        "properties": {
                          "attributes": {
                            "properties": {},
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "const": "inquiry.declined",
                                    "description": "inquiry.declined"
                                  },
                                  "payload": {
                                    "type": "object",
                                    "properties": {
                                      "data": {
                                        "$ref": "#/components/schemas/inquiry"
                                      },
                                      "included": {
                                        "description": "All objects that are present in `data.attributes.relationships` will be provided in `included`.",
                                        "$ref": "#/components/schemas/inquiry-included-objects"
                                      }
                                    }
                                  }
                                }
                              },
                              {
                                "$ref": "#/components/schemas/webhook-body-shared-attributes"
                              }
                            ]
                          }
                        }
                      }
                    ]
                  }
                }
              },
              "examples": {
                "Example Body": {
                  "$ref": "#/components/examples/inquiry-declined-webhook-body"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/success"
          }
        }
      }
    },
    "inquiry.transitioned": {
      "post": {
        "operationId": "webhook-inquiry-transitioned",
        "summary": "Inquiry transitioned",
        "description": "Webhook for the `inquiry.transitioned` event. For more info see [Webhooks Overview](https://docs.withpersona.com/docs/webhooks).",
        "tags": [
          "Webhooks: Inquiry events"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/persona-signature-header"
          },
          {
            "$ref": "#/components/parameters/persona-webhook-attempts-made"
          },
          {
            "$ref": "#/components/parameters/persona-webhook-attempts-left"
          },
          {
            "$ref": "#/components/parameters/persona-webhook-first-attempted-at"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {},
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/webhook-body-shared-data"
                      },
                      {
                        "type": "object",
                        "properties": {
                          "attributes": {
                            "properties": {},
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "const": "inquiry.transitioned",
                                    "description": "inquiry.transitioned"
                                  },
                                  "payload": {
                                    "type": "object",
                                    "properties": {
                                      "data": {
                                        "$ref": "#/components/schemas/inquiry"
                                      },
                                      "included": {
                                        "description": "All objects that are present in `data.attributes.relationships` will be provided in `included`.",
                                        "$ref": "#/components/schemas/inquiry-included-objects"
                                      }
                                    }
                                  }
                                }
                              },
                              {
                                "$ref": "#/components/schemas/webhook-body-shared-attributes"
                              }
                            ]
                          }
                        }
                      }
                    ]
                  }
                }
              },
              "examples": {
                "Example Body": {
                  "$ref": "#/components/examples/inquiry-transitioned-webhook-body"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/success"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "x-bearer-format": "bearer"
      }
    },
    "parameters": {
      "key-inflection-header": {
        "name": "Key-Inflection",
        "in": "header",
        "description": "Determines casing for the API response",
        "schema": {
          "type": "string",
          "enum": [
            "camel",
            "kebab",
            "snake"
          ]
        }
      },
      "idempotency-key-header": {
        "name": "Idempotency-Key",
        "in": "header",
        "description": "Ensures the request is idempotent",
        "schema": {
          "type": "string"
        }
      },
      "persona-version-header": {
        "name": "Persona-Version",
        "in": "header",
        "schema": {
          "type": "string",
          "enum": [
            "2023-01-05"
          ],
          "default": "2023-01-05"
        }
      },
      "include-query-parameter": {
        "in": "query",
        "name": "include",
        "description": "A comma-separated list of relationship paths. This can be used to customize which related resources will be fully serialized in the `included` key in the response. See [Serialization](https://docs.withpersona.com/reference/serialization#inclusion-of-related-resources) for more details.",
        "schema": {
          "type": "string",
          "examples": [
            "sessions,account",
            "selfie.inquiry",
            "verifications",
            "verifications,selfie.inquiry,template"
          ]
        }
      },
      "persona-signature-header": {
        "name": "Persona-Signature",
        "in": "header",
        "description": "Header. An HMAC that you should use to check that requests are authentic. Compare this value with your own digest, computed from the request body and your webhook secret. For more info see [Webhook Best Practices](https://docs.withpersona.com/docs/webhooks-best-practices).",
        "schema": {
          "type": "string",
          "examples": [
            "t=1709686052,v1=n3ulUDfqGSkzarlvyeg2oZe3qx3sQjbSno5s7Icx4dy8CbTPqu8xvQ5ZyEJy"
          ]
        }
      },
      "persona-webhook-attempts-made": {
        "name": "Persona-Webhook-Attempts-Made",
        "in": "header",
        "description": "The number of times that Persona has attempted to deliver this webhook. This value is incremented each time Persona attempts to deliver the webhook, regardless of whether the delivery was successful.",
        "schema": {
          "type": "integer",
          "examples": [
            2
          ]
        }
      },
      "persona-webhook-attempts-left": {
        "name": "Persona-Webhook-Attempts-Left",
        "in": "header",
        "description": "The number of times that Persona will attempt to deliver this webhook. This value is decremented each time Persona attempts to deliver the webhook.",
        "schema": {
          "type": "integer",
          "examples": [
            6
          ]
        }
      },
      "persona-webhook-first-attempted-at": {
        "name": "Persona-Webhook-First-Attempted-At",
        "in": "header",
        "description": "The time at which Persona first attempted to deliver this webhook. This value is a Unix timestamp in seconds.",
        "schema": {
          "type": "integer",
          "examples": [
            1527811200
          ]
        }
      }
    },
    "schemas": {
      "nested-pagination-query-params": {
        "type": "object",
        "properties": {
          "after": {
            "description": "Object ID for pagination cursor",
            "type": "string",
            "examples": [
              "obj_ABC123"
            ]
          },
          "before": {
            "description": "Object ID for pagination cursor",
            "examples": [
              "obj_ABC123"
            ],
            "type": "string"
          },
          "size": {
            "description": "Limit on the number of objects returned",
            "examples": [
              5
            ],
            "type": "number"
          }
        }
      },
      "file": {
        "type": [
          "null",
          "object"
        ],
        "properties": {
          "filename": {
            "examples": [
              "filename.pdf",
              "id.png",
              "abc123.JPEG"
            ],
            "type": "string"
          },
          "url": {
            "examples": [
              "https://files.withpersona.com/abc123.JPEG?access_token=ACCESS_TOKEN"
            ],
            "type": "string"
          },
          "byte-size": {
            "examples": [
              124917
            ],
            "type": "integer"
          }
        }
      },
      "address-fields": {
        "properties": {
          "address-street-1": {
            "description": "Street name of residence address.",
            "examples": [
              "123 Main St"
            ],
            "type": [
              "string",
              "null"
            ]
          },
          "address-street-2": {
            "description": "Extension of residence address, usually apartment or suite number.",
            "examples": [
              "Apt 1"
            ],
            "type": [
              "string",
              "null"
            ]
          },
          "address-city": {
            "description": "City of residence address. Not all international addresses use this attribute.",
            "examples": [
              "San Francisco"
            ],
            "type": [
              "string",
              "null"
            ]
          },
          "address-subdivision": {
            "description": "State or subdivision of residence address. In the US, this should be the unabbreviated name. Not all international addresses use this attribute.",
            "examples": [
              "California"
            ],
            "type": [
              "string",
              "null"
            ]
          },
          "address-postal-code": {
            "description": "ZIP or postal code of residence address. Not all international addresses use this attribute.",
            "examples": [
              "94111"
            ],
            "type": [
              "string",
              "null"
            ]
          }
        },
        "type": "object"
      },
      "default-fields": {
        "properties": {},
        "allOf": [
          {
            "type": "object",
            "properties": {
              "birthdate": {
                "description": "Birthdate, must be in the format \"YYYY-MM-DD\".",
                "format": "date",
                "examples": [
                  "1994-04-12"
                ],
                "type": [
                  "string",
                  "null"
                ]
              },
              "name-first": {
                "description": "Given or first name.",
                "examples": [
                  "Jane"
                ],
                "type": [
                  "string",
                  "null"
                ]
              },
              "name-middle": {
                "description": "Middle name.",
                "examples": [
                  "Marie"
                ],
                "type": [
                  "string",
                  "null"
                ]
              },
              "name-last": {
                "description": "Family or last name.",
                "examples": [
                  "Doe"
                ],
                "type": [
                  "string",
                  "null"
                ]
              },
              "phone-number": {
                "description": "Phone number.",
                "examples": [
                  "415-555-1234"
                ],
                "type": [
                  "string",
                  "null"
                ]
              },
              "email-address": {
                "description": "Email address.",
                "examples": [
                  "jane@doe.com"
                ],
                "type": [
                  "string",
                  "null"
                ]
              }
            }
          },
          {
            "$ref": "#/components/schemas/address-fields"
          }
        ]
      },
      "account": {
        "type": "object",
        "description": "An Account object.\n\nNote that `fields` is **not** key inflected.",
        "properties": {
          "type": {
            "type": "string",
            "const": "account",
            "description": "account"
          },
          "id": {
            "type": "string",
            "examples": [
              "act_hpNqyAbEG4HeVjZoBRNCMKkA"
            ]
          },
          "attributes": {
            "properties": {},
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "reference-id": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "examples": [
                      "abc-123"
                    ]
                  },
                  "created-at": {
                    "format": "date-time",
                    "examples": [
                      "2020-04-12T05:08:51.000Z"
                    ],
                    "type": "string"
                  },
                  "updated-at": {
                    "format": "date-time",
                    "examples": [
                      "2020-04-13T00:23:57.000Z"
                    ],
                    "type": "string"
                  },
                  "redacted-at": {
                    "format": "date-time",
                    "examples": [
                      "2020-04-14T00:22:43.000Z"
                    ],
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "fields": {
                    "type": "object",
                    "description": "Keys in `fields` are **not** key inflected.",
                    "properties": {
                      "name": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "examples": [
                              "hash"
                            ]
                          },
                          "value": {
                            "type": "object",
                            "properties": {
                              "first": {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "examples": [
                                      "string"
                                    ]
                                  },
                                  "value": {
                                    "type": [
                                      "string",
                                      "null"
                                    ],
                                    "examples": [
                                      "Jane"
                                    ]
                                  }
                                }
                              },
                              "middle": {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "examples": [
                                      "string"
                                    ]
                                  },
                                  "value": {
                                    "type": [
                                      "string",
                                      "null"
                                    ],
                                    "examples": [
                                      "Marie"
                                    ]
                                  }
                                }
                              },
                              "last": {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "examples": [
                                      "string"
                                    ]
                                  },
                                  "value": {
                                    "type": [
                                      "string",
                                      "null"
                                    ],
                                    "examples": [
                                      "Doe"
                                    ]
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "address": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "examples": [
                              "hash"
                            ]
                          },
                          "value": {
                            "type": "object",
                            "properties": {
                              "street_1": {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "examples": [
                                      "string"
                                    ]
                                  },
                                  "value": {
                                    "type": [
                                      "string",
                                      "null"
                                    ],
                                    "examples": [
                                      "123 Main St"
                                    ]
                                  }
                                }
                              },
                              "street_2": {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "examples": [
                                      "string"
                                    ]
                                  },
                                  "value": {
                                    "type": [
                                      "string",
                                      "null"
                                    ],
                                    "examples": [
                                      "Apt 1"
                                    ]
                                  }
                                }
                              },
                              "subdivision": {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "examples": [
                                      "string"
                                    ]
                                  },
                                  "value": {
                                    "type": [
                                      "string",
                                      "null"
                                    ],
                                    "examples": [
                                      "California"
                                    ]
                                  }
                                }
                              },
                              "city": {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "examples": [
                                      "string"
                                    ]
                                  },
                                  "value": {
                                    "type": [
                                      "string",
                                      "null"
                                    ],
                                    "examples": [
                                      "San Francisco"
                                    ]
                                  }
                                }
                              },
                              "postal_code": {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "examples": [
                                      "string"
                                    ]
                                  },
                                  "value": {
                                    "type": [
                                      "string",
                                      "null"
                                    ],
                                    "examples": [
                                      "94111"
                                    ]
                                  }
                                }
                              },
                              "country_code": {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "examples": [
                                      "string"
                                    ]
                                  },
                                  "value": {
                                    "type": [
                                      "string",
                                      "null"
                                    ],
                                    "examples": [
                                      "US"
                                    ]
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "identification_numbers": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "examples": [
                              "array"
                            ]
                          },
                          "value": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "examples": [
                                    "hash"
                                  ]
                                },
                                "value": {
                                  "type": "object",
                                  "properties": {
                                    "identification_class": {
                                      "type": "object",
                                      "properties": {
                                        "type": {
                                          "type": "string",
                                          "examples": [
                                            "string"
                                          ]
                                        },
                                        "value": {
                                          "type": "string",
                                          "examples": [
                                            "visa",
                                            "cct"
                                          ]
                                        }
                                      }
                                    },
                                    "identification_number": {
                                      "type": "object",
                                      "properties": {
                                        "type": {
                                          "type": "string",
                                          "examples": [
                                            "string"
                                          ]
                                        },
                                        "value": {
                                          "type": "string",
                                          "examples": [
                                            "12345678",
                                            "AB-12345678"
                                          ]
                                        }
                                      }
                                    },
                                    "issuing_country": {
                                      "type": "object",
                                      "properties": {
                                        "type": {
                                          "type": "string",
                                          "examples": [
                                            "string"
                                          ]
                                        },
                                        "value": {
                                          "type": "string",
                                          "examples": [
                                            "US",
                                            "UK"
                                          ]
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "birthdate": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "examples": [
                              "date"
                            ]
                          },
                          "value": {
                            "type": [
                              "string",
                              "null"
                            ],
                            "examples": [
                              "1994-04-12"
                            ]
                          }
                        }
                      },
                      "phone_number": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "examples": [
                              "string"
                            ]
                          },
                          "value": {
                            "type": [
                              "string",
                              "null"
                            ],
                            "examples": [
                              "415-555-1234"
                            ]
                          }
                        }
                      },
                      "email_address": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "examples": [
                              "string"
                            ]
                          },
                          "value": {
                            "type": [
                              "string",
                              "null"
                            ],
                            "examples": [
                              "jane@doe.com"
                            ]
                          }
                        }
                      },
                      "selfie_photo": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "const": "file",
                            "description": "file",
                            "type": "string"
                          },
                          "value": {
                            "$ref": "#/components/schemas/file"
                          }
                        }
                      }
                    },
                    "additionalProperties": true
                  },
                  "tags": {
                    "type": "array"
                  },
                  "identification-numbers": {
                    "type": "object",
                    "description": "Keys will be the identification class",
                    "additionalProperties": {
                      "type": "array",
                      "properties": {
                        "items": {
                          "type": "object",
                          "properties": {
                            "issuing-country": {
                              "type": "string",
                              "examples": [
                                "US",
                                "UK"
                              ]
                            },
                            "identification-class": {
                              "type": "string",
                              "examples": [
                                "visa",
                                "cct"
                              ]
                            },
                            "identification-number": {
                              "type": "string",
                              "examples": [
                                "12345678",
                                "AB-12345678"
                              ]
                            },
                            "created-at": {
                              "type": "string",
                              "format": "date-time",
                              "examples": [
                                "2023-09-23T00:22:09.934Z"
                              ]
                            },
                            "updated-at": {
                              "type": "string",
                              "format": "date-time",
                              "examples": [
                                "2023-09-23T00:22:19.900Z"
                              ]
                            }
                          }
                        }
                      }
                    }
                  },
                  "country-code": {
                    "description": "ISO 3166-1 alpha 2 country code.",
                    "examples": [
                      "US"
                    ],
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "social-security-number": {
                    "description": "Social security number.",
                    "examples": [
                      "123-45-6789"
                    ],
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                }
              },
              {
                "$ref": "#/components/schemas/default-fields"
              }
            ]
          }
        }
      },
      "empty-included-objects": {
        "type": "array",
        "description": "Excluded from the response by default. Will be an empty array when the `include` query parameter in the request was explicitly set to empty."
      },
      "api-key-shared-attributes": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "examples": [
              "API Key 123"
            ]
          },
          "note": {
            "type": [
              "string",
              "null"
            ]
          },
          "api-version": {
            "type": "string",
            "format": "date",
            "examples": [
              "2023-01-05"
            ]
          },
          "api-key-inflection": {
            "type": "string",
            "examples": [
              "kebab"
            ]
          },
          "api-attributes-blocklist": {
            "type": "array",
            "items": {
              "type": [
                "string",
                "null"
              ]
            },
            "examples": [
              [
                "address-*",
                "name-last",
                "/data/attributes/fields/*-number"
              ]
            ]
          },
          "permissions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "examples": [
              [
                "account.read",
                "inquiry.write"
              ]
            ]
          },
          "ip-address-allowlist": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "examples": [
              [
                "*"
              ],
              [
                "192.158.1.38",
                "123.456.7.89"
              ]
            ]
          },
          "file-access-token-expires-in": {
            "type": "integer",
            "format": "int32",
            "examples": [
              21600
            ]
          },
          "last-used-at": {
            "type": [
              "string",
              "null"
            ],
            "examples": [
              "2023-09-21T18:29:40.000Z"
            ]
          },
          "expires-at": {
            "type": [
              "string",
              "null"
            ],
            "examples": [
              "2023-09-21T18:29:40.000Z"
            ]
          },
          "created-at": {
            "type": "string",
            "format": "date-time",
            "examples": [
              "2023-09-21T18:29:40.000Z"
            ]
          }
        }
      },
      "api-key": {
        "type": "object",
        "description": "An API Key resource",
        "properties": {
          "type": {
            "const": "api-key",
            "description": "api-key",
            "type": "string"
          },
          "id": {
            "examples": [
              "api_ABC123"
            ],
            "type": "string"
          },
          "attributes": {
            "$ref": "#/components/schemas/api-key-shared-attributes"
          }
        }
      },
      "api-key-with-value": {
        "type": "object",
        "description": "An API Key resource",
        "properties": {
          "type": {
            "const": "api-key",
            "description": "api-key",
            "type": "string"
          },
          "id": {
            "examples": [
              "api_ABC123"
            ],
            "type": "string"
          },
          "attributes": {
            "properties": {},
            "allOf": [
              {
                "$ref": "#/components/schemas/api-key-shared-attributes"
              },
              {
                "type": "object",
                "properties": {
                  "value": {
                    "type": "string",
                    "description": "The API Key value. This should be treated with the utmost security.",
                    "examples": [
                      "persona_production_abcdefg"
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      "api-log": {
        "type": "object",
        "description": "An API Log object",
        "properties": {
          "type": {
            "type": "string",
            "const": "api-log",
            "description": "api-log"
          },
          "id": {
            "type": "string",
            "examples": [
              "req_prM3gdSL6ciwGjSjj4aXgKJT"
            ]
          },
          "attributes": {
            "type": "object",
            "properties": {
              "request": {
                "type": "object",
                "properties": {
                  "method": {
                    "type": "string",
                    "examples": [
                      "GET"
                    ]
                  },
                  "path": {
                    "type": "string",
                    "examples": [
                      "/api/v1/api-keys"
                    ]
                  },
                  "headers": {
                    "type": "object",
                    "properties": {
                      "Accept": {
                        "type": "string",
                        "examples": [
                          "application/json"
                        ]
                      },
                      "Host": {
                        "type": "string",
                        "examples": [
                          "withpersona.com"
                        ]
                      },
                      "Persona-Version": {
                        "type": "string",
                        "examples": [
                          "2023-01-05, 2023-01-05"
                        ]
                      },
                      "User-Agent": {
                        "type": "string",
                        "examples": [
                          "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36"
                        ]
                      }
                    }
                  },
                  "get-params": {
                    "type": "object",
                    "description": "The GET params of the request. Schema depends on the API called.",
                    "additionalProperties": true
                  },
                  "post-params": {
                    "type": "object",
                    "description": "The POST params of the request. Schema depends on the API called.",
                    "additionalProperties": true
                  },
                  "ip-address": {
                    "type": "string",
                    "examples": [
                      "44.203.11.87"
                    ]
                  }
                }
              },
              "response": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "integer",
                    "format": "int32",
                    "examples": [
                      200
                    ]
                  },
                  "headers": {
                    "type": "object",
                    "properties": {
                      "Persona-Host": {
                        "type": "string",
                        "examples": [
                          "us-central1 persona-web-web-77b874ff88-rrdk9 53e23b240"
                        ]
                      },
                      "Cache-Control": {
                        "type": "string",
                        "examples": [
                          "no-cache, no-store, max-age=0, must-revalidate"
                        ]
                      },
                      "Pragma": {
                        "type": "string",
                        "examples": [
                          "no-cache"
                        ]
                      },
                      "Expires": {
                        "type": "string",
                        "examples": [
                          "Fri, 01 Jan 1990 00:00:00 GMT"
                        ]
                      },
                      "RateLimit-Limit": {
                        "type": "integer",
                        "format": "int32",
                        "examples": [
                          300
                        ]
                      },
                      "RateLimit-Remaining": {
                        "type": "integer",
                        "format": "int32",
                        "examples": [
                          299
                        ]
                      },
                      "RateLimit-Reset": {
                        "type": "integer",
                        "format": "int32",
                        "examples": [
                          60
                        ]
                      },
                      "Quota-Limit": {
                        "type": "integer",
                        "format": "int32",
                        "examples": [
                          1000
                        ]
                      },
                      "Quota-Remaining": {
                        "type": "integer",
                        "format": "int32",
                        "examples": [
                          998
                        ]
                      },
                      "Quota-Reset": {
                        "type": "integer",
                        "format": "int32",
                        "examples": [
                          31
                        ]
                      },
                      "Request-Id": {
                        "type": "string",
                        "examples": [
                          "req_prM3gdSL6ciwGjSjj4aXgKJT"
                        ]
                      },
                      "Content-Type": {
                        "type": "string",
                        "examples": [
                          "application/json; charset=utf-8"
                        ]
                      },
                      "Vary": {
                        "type": "string",
                        "examples": [
                          "Accept"
                        ]
                      }
                    }
                  }
                }
              },
              "created-at": {
                "type": "string",
                "format": "date-time",
                "examples": [
                  "2023-09-26T06:31:43.909+00:00"
                ]
              }
            }
          }
        }
      },
      "case": {
        "type": "object",
        "description": "A Case object",
        "properties": {
          "type": {
            "const": "case",
            "description": "case",
            "type": "string"
          },
          "id": {
            "examples": [
              "case_gqe7rH38FvxtzhGBQmDBsjkB"
            ],
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "status": {
                "examples": [
                  "Open",
                  "Pending",
                  "Approved",
                  "Declined"
                ],
                "type": "string"
              },
              "name": {
                "examples": [
                  "MRR-3"
                ],
                "type": "string"
              },
              "resolution": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "created-at": {
                "examples": [
                  "2021-09-28T05:18:36.200Z"
                ],
                "type": "string"
              },
              "updated-at": {
                "examples": [
                  "2021-09-28T05:18:36.200Z"
                ],
                "type": [
                  "string",
                  "null"
                ]
              },
              "assigned-at": {
                "examples": [
                  "2021-09-28T05:18:36.200Z"
                ],
                "type": [
                  "string",
                  "null"
                ]
              },
              "resolved-at": {
                "examples": [
                  "2021-09-28T05:18:36.200Z"
                ],
                "type": [
                  "string",
                  "null"
                ]
              },
              "redacted-at": {
                "examples": [
                  "2021-09-28T05:18:36.200Z"
                ],
                "type": [
                  "string",
                  "null"
                ]
              },
              "sla-expires-at": {
                "examples": [
                  "2021-09-28T07:18:36.200Z"
                ],
                "type": [
                  "string",
                  "null"
                ]
              },
              "creator-id": {
                "examples": [
                  "case_creator@withpersona.com"
                ],
                "type": "string"
              },
              "creator-type": {
                "description": "Possible values:\n- user\n- workflow-run\n\nDo not assume this is a static enumeration; Persona may add new values\nin the future without a versioned update.",
                "type": "string"
              },
              "assignee-id": {
                "examples": [
                  "case_assignee@withpersona.com"
                ],
                "type": [
                  "string",
                  "null"
                ]
              },
              "assigner-id": {
                "examples": [
                  "case_assigner@withpersona.com",
                  "cap_jE2jrmjCsPQiAq6r4uBiMiMBJZEo",
                  "wfr_vKcf7zTQ4fg1RN3hRUUbTnURcVKp"
                ],
                "type": [
                  "string",
                  "null"
                ]
              },
              "assigner-type": {
                "description": "Possible values:\n- case-assignment-policy\n- user\n- workflow-run\n\nDo not assume this is a static enumeration; Persona may add new values\nin the future without a versioned update.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "resolver-id": {
                "examples": [
                  "case_resolver@withpersona.com"
                ],
                "type": [
                  "string",
                  "null"
                ]
              },
              "resolver-type": {
                "description": "Possible values:\n- user\n- workflow-run\n\nDo not assume this is a static enumeration; Persona may add new values\nin the future without a versioned update.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "updater-id": {
                "examples": [
                  "case_updater@withpersona.com"
                ],
                "type": [
                  "string",
                  "null"
                ]
              },
              "updater-type": {
                "description": "Possible values:\n- user\n- workflow-run\n\nDo not assume this is a static enumeration; Persona may add new values\nin the future without a versioned update.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "tags": {
                "examples": [
                  [
                    "apple",
                    "banana",
                    "orange"
                  ]
                ],
                "type": "array"
              },
              "fields": {
                "examples": [
                  {
                    "external-integration-id": "ind_123"
                  }
                ],
                "type": "object",
                "additionalProperties": true
              }
            }
          },
          "relationships": {
            "properties": {
              "accounts": {
                "type": "object",
                "properties": {
                  "data": {
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "examples": [
                            "act_9e3yoAUApTRMjgNoPAC7TNtz"
                          ],
                          "type": "string"
                        },
                        "type": {
                          "const": "account",
                          "description": "account",
                          "type": "string"
                        }
                      }
                    },
                    "type": "array"
                  }
                }
              },
              "case-comments": {
                "type": "object",
                "properties": {
                  "data": {
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "type": {
                          "const": "case-comment",
                          "description": "case-comment",
                          "type": "string"
                        }
                      }
                    },
                    "type": "array"
                  }
                }
              },
              "case-template": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "examples": [
                          "ctmpl_Jumm3K4zHwaLBBdyLUCnHbBC"
                        ],
                        "type": "string"
                      },
                      "type": {
                        "const": "case-template",
                        "description": "case-template",
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "inquiries": {
                "type": "object",
                "properties": {
                  "data": {
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "examples": [
                            "inq_KHK4MJCE4QvfocWB2intQ3YE"
                          ],
                          "type": "string"
                        },
                        "type": {
                          "const": "inquiry",
                          "description": "inquiry",
                          "type": "string"
                        }
                      }
                    },
                    "type": "array"
                  }
                }
              },
              "reports": {
                "properties": {
                  "data": {
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "examples": [
                            "rep_7anCsX1R1We3BqRKfsJXsMaw"
                          ],
                          "type": "string"
                        },
                        "type": {
                          "x-polymorphic": true,
                          "examples": [
                            "report/watchlist"
                          ],
                          "type": "string"
                        }
                      }
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              },
              "verifications": {
                "properties": {
                  "data": {
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "examples": [
                            "ver_tVJF12ggSgzquQUkxtSVwssA"
                          ],
                          "type": "string"
                        },
                        "type": {
                          "x-polymorphic": true,
                          "examples": [
                            "verification/document"
                          ],
                          "type": "string"
                        }
                      }
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              },
              "txns": {
                "properties": {
                  "data": {
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "examples": [
                            "txn_0GKUnDBJi6RJpZhmKdYsM5me"
                          ],
                          "type": "string"
                        },
                        "type": {
                          "const": "transaction",
                          "description": "transaction",
                          "type": "string"
                        }
                      }
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          }
        }
      },
      "inquiry": {
        "type": "object",
        "description": "An Inquiry object",
        "properties": {
          "type": {
            "const": "inquiry",
            "description": "inquiry",
            "type": "string"
          },
          "id": {
            "examples": [
              "inq_5FrMN7NAGgFdGGysCDd7DaBW"
            ],
            "type": "string"
          },
          "attributes": {
            "properties": {},
            "allOf": [
              {
                "$ref": "#/components/schemas/default-fields"
              },
              {
                "type": "object",
                "properties": {
                  "status": {
                    "description": "The status of the Inquiry\n\nPossible values:\n- created\n- pending\n- completed\n- expired\n- failed\n- needs_review\n- approved\n- declined\n\nDo not assume this is a static enumeration; Persona may add new\nvalues in the future without a versioned update.",
                    "type": "string"
                  },
                  "reference-id": {
                    "examples": [
                      "ABC-123"
                    ],
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "note": {
                    "examples": [
                      "A helpful note"
                    ],
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "behaviors": {
                    "properties": {
                      "autofill-cancels": {
                        "default": 0,
                        "examples": [
                          29
                        ],
                        "type": [
                          "integer",
                          "null"
                        ]
                      },
                      "autofill-starts": {
                        "default": 0,
                        "examples": [
                          0
                        ],
                        "type": [
                          "integer",
                          "null"
                        ]
                      },
                      "behavior-threat-level": {
                        "examples": [
                          "low"
                        ],
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "completion-time": {
                        "default": 0,
                        "examples": [
                          28.62633237
                        ],
                        "type": [
                          "number",
                          "null"
                        ]
                      },
                      "devtools-open": {
                        "default": true,
                        "examples": [
                          false
                        ],
                        "type": [
                          "boolean",
                          "null"
                        ]
                      },
                      "distraction-events": {
                        "default": 0,
                        "examples": [
                          0
                        ],
                        "type": [
                          "integer",
                          "null"
                        ]
                      },
                      "hesitation-baseline": {
                        "default": 0,
                        "examples": [
                          19860
                        ],
                        "type": [
                          "integer",
                          "null"
                        ]
                      },
                      "hesitation-count": {
                        "default": 0,
                        "examples": [
                          1
                        ],
                        "type": [
                          "integer",
                          "null"
                        ]
                      },
                      "hesitation-percentage": {
                        "default": 0,
                        "examples": [
                          65.33232628398792
                        ],
                        "type": [
                          "number",
                          "null"
                        ]
                      },
                      "hesitation-time": {
                        "default": 0,
                        "examples": [
                          12975
                        ],
                        "type": [
                          "integer",
                          "null"
                        ]
                      },
                      "request-spoof-attempts": {
                        "default": 0,
                        "examples": [
                          0
                        ],
                        "type": [
                          "integer",
                          "null"
                        ]
                      },
                      "shortcut-copies": {
                        "default": 0,
                        "examples": [
                          0
                        ],
                        "type": [
                          "integer",
                          "null"
                        ]
                      },
                      "shortcut-pastes": {
                        "default": 0,
                        "examples": [
                          0
                        ],
                        "type": [
                          "integer",
                          "null"
                        ]
                      },
                      "user-agent-spoof-attempts": {
                        "default": 0,
                        "examples": [
                          0
                        ],
                        "type": [
                          "integer",
                          "null"
                        ]
                      }
                    },
                    "type": "object"
                  },
                  "tags": {
                    "type": "array",
                    "items": {
                      "type": [
                        "string",
                        "null"
                      ]
                    }
                  },
                  "creator": {
                    "examples": [
                      "jane@doe.com"
                    ],
                    "type": "string"
                  },
                  "reviewer-comment": {
                    "examples": [
                      "This is a comment for this inquiry!"
                    ],
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "created-at": {
                    "examples": [
                      "2023-03-28T18:34:32.000Z"
                    ],
                    "type": "string",
                    "format": "date-time"
                  },
                  "started-at": {
                    "examples": [
                      "2023-03-28T18:35:10.000Z"
                    ],
                    "type": [
                      "string",
                      "null"
                    ],
                    "format": "date-time"
                  },
                  "completed-at": {
                    "examples": [
                      "2023-03-28T18:35:10.000Z"
                    ],
                    "type": [
                      "string",
                      "null"
                    ],
                    "format": "date-time"
                  },
                  "failed-at": {
                    "examples": [
                      "2023-03-28T18:35:10.000Z"
                    ],
                    "type": [
                      "string",
                      "null"
                    ],
                    "format": "date-time"
                  },
                  "marked-for-review-at": {
                    "examples": [
                      "2023-03-28T18:35:10.000Z"
                    ],
                    "type": [
                      "string",
                      "null"
                    ],
                    "format": "date-time"
                  },
                  "decisioned-at": {
                    "examples": [
                      "2023-03-28T18:35:10.000Z"
                    ],
                    "type": [
                      "string",
                      "null"
                    ],
                    "format": "date-time"
                  },
                  "expired-at": {
                    "examples": [
                      "2023-03-28T18:35:10.000Z"
                    ],
                    "type": [
                      "string",
                      "null"
                    ],
                    "format": "date-time"
                  },
                  "redacted-at": {
                    "examples": [
                      "2023-03-28T18:35:10.000Z"
                    ],
                    "type": [
                      "string",
                      "null"
                    ],
                    "format": "date-time"
                  },
                  "previous-step-name": {
                    "examples": [
                      "verification_government_id",
                      "start"
                    ],
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "next-step-name": {
                    "examples": [
                      "retry_verification_government_id"
                    ],
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "social-security-number": {
                    "description": "Social security number.",
                    "examples": [
                      "123-45-6789"
                    ],
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "address-subdivision-abbr": {
                    "examples": [
                      "CA",
                      "HI"
                    ],
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "address-postal-code-abbr": {
                    "examples": [
                      "94117",
                      "77418"
                    ],
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "identification-number": {
                    "examples": [
                      "YL123456"
                    ],
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "fields": {
                    "properties": {
                      "name-first": {
                        "properties": {
                          "type": {
                            "examples": [
                              "string"
                            ],
                            "type": "string"
                          },
                          "value": {
                            "examples": [
                              "Jane"
                            ],
                            "type": [
                              "string",
                              "null"
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "name-middle": {
                        "properties": {
                          "type": {
                            "examples": [
                              "string"
                            ],
                            "type": "string"
                          },
                          "value": {
                            "examples": [
                              "Marie"
                            ],
                            "type": [
                              "string",
                              "null"
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "name-last": {
                        "properties": {
                          "type": {
                            "examples": [
                              "string"
                            ],
                            "type": "string"
                          },
                          "value": {
                            "examples": [
                              "Doe"
                            ],
                            "type": [
                              "string",
                              "null"
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "address-street-1": {
                        "properties": {
                          "type": {
                            "examples": [
                              "string"
                            ],
                            "type": "string"
                          },
                          "value": {
                            "examples": [
                              "123 Main St"
                            ],
                            "type": [
                              "string",
                              "null"
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "address-street-2": {
                        "properties": {
                          "type": {
                            "examples": [
                              "string"
                            ],
                            "type": "string"
                          },
                          "value": {
                            "examples": [
                              "Apt"
                            ],
                            "type": [
                              "string",
                              "null"
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "address-city": {
                        "description": "City of residence address. Not all international addresses use this attribute.",
                        "properties": {
                          "type": {
                            "examples": [
                              "string"
                            ],
                            "type": "string"
                          },
                          "value": {
                            "examples": [
                              "San Francisco"
                            ],
                            "type": [
                              "string",
                              "null"
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "address-subdivision": {
                        "description": "State or subdivision of residence address. In the US, this should be the unabbreviated name. Not all international addresses use this attribute.",
                        "properties": {
                          "type": {
                            "examples": [
                              "string"
                            ],
                            "type": "string"
                          },
                          "value": {
                            "examples": [
                              "California"
                            ],
                            "type": [
                              "string",
                              "null"
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "address-postal-code": {
                        "description": "ZIP or postal code of residence address. Not all international addresses use this attribute.",
                        "properties": {
                          "type": {
                            "examples": [
                              "string"
                            ],
                            "type": "string"
                          },
                          "value": {
                            "examples": [
                              "94111"
                            ],
                            "type": [
                              "string",
                              "null"
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "address-country-code": {
                        "description": "ISO 3166-1 alpha 2 country code.",
                        "properties": {
                          "type": {
                            "examples": [
                              "string"
                            ],
                            "type": "string"
                          },
                          "value": {
                            "examples": [
                              "US"
                            ],
                            "type": [
                              "string",
                              "null"
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "birthdate": {
                        "properties": {
                          "type": {
                            "examples": [
                              "date"
                            ],
                            "type": "string"
                          },
                          "value": {
                            "description": "Date of birth in YYYY-MM-DD format",
                            "examples": [
                              "1991-10-07"
                            ],
                            "type": [
                              "string",
                              "null"
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "email-address": {
                        "properties": {
                          "type": {
                            "examples": [
                              "string"
                            ],
                            "type": "string"
                          },
                          "value": {
                            "examples": [
                              "test@emailaddress.com"
                            ],
                            "type": [
                              "string",
                              "null"
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "phone-number": {
                        "properties": {
                          "type": {
                            "examples": [
                              "string"
                            ],
                            "type": "string"
                          },
                          "value": {
                            "examples": [
                              "111-222-3333"
                            ],
                            "type": [
                              "string",
                              "null"
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "identification-number": {
                        "properties": {
                          "type": {
                            "examples": [
                              "string"
                            ],
                            "type": "string"
                          },
                          "value": {
                            "examples": [
                              "YL123456"
                            ],
                            "type": [
                              "string",
                              "null"
                            ]
                          }
                        },
                        "type": "object"
                      }
                    },
                    "additionalProperties": true,
                    "type": "object"
                  }
                }
              }
            ]
          },
          "relationships": {
            "type": "object",
            "properties": {
              "account": {
                "properties": {
                  "data": {
                    "properties": {
                      "id": {
                        "examples": [
                          "act_ABC123"
                        ],
                        "type": "string"
                      },
                      "type": {
                        "const": "account",
                        "description": "account",
                        "type": "string"
                      }
                    },
                    "type": [
                      "object",
                      "null"
                    ]
                  }
                },
                "type": "object"
              },
              "documents": {
                "properties": {
                  "data": {
                    "items": {
                      "properties": {
                        "id": {
                          "examples": [
                            "doc_ABC123"
                          ],
                          "type": "string"
                        },
                        "type": {
                          "x-polymorphic": true,
                          "examples": [
                            "document/government-id"
                          ],
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              },
              "template": {
                "description": "Only present for Legacy 2.0 inquiries",
                "properties": {
                  "data": {
                    "properties": {
                      "id": {
                        "examples": [
                          "tmpl_ABC123"
                        ],
                        "type": "string"
                      },
                      "type": {
                        "const": "template",
                        "description": "template",
                        "type": "string"
                      }
                    },
                    "type": [
                      "object",
                      "null"
                    ]
                  }
                },
                "type": "object"
              },
              "inquiry-template": {
                "description": "Only present for Dynamic Flow inquiries",
                "properties": {
                  "data": {
                    "properties": {
                      "id": {
                        "examples": [
                          "itmpl_ABC123"
                        ],
                        "type": "string"
                      },
                      "type": {
                        "const": "inquiry-template",
                        "description": "inquiry-template",
                        "type": "string"
                      }
                    },
                    "type": [
                      "object",
                      "null"
                    ]
                  }
                },
                "type": "object"
              },
              "inquiry-template-version": {
                "description": "Only present for Dynamic Flow inquiries",
                "properties": {
                  "data": {
                    "properties": {
                      "id": {
                        "examples": [
                          "itmplv_ABC123"
                        ],
                        "type": "string"
                      },
                      "type": {
                        "const": "inquiry-template-version",
                        "description": "inquiry-template-version",
                        "type": "string"
                      }
                    },
                    "type": [
                      "object",
                      "null"
                    ]
                  }
                },
                "type": "object"
              },
              "reports": {
                "properties": {
                  "data": {
                    "items": {
                      "properties": {
                        "id": {
                          "examples": [
                            "rep_ABC123"
                          ],
                          "type": "string"
                        },
                        "type": {
                          "x-polymorphic": true,
                          "examples": [
                            "report/address-lookup",
                            "report/watchlist"
                          ],
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              },
              "reviewer": {
                "properties": {
                  "data": {
                    "properties": {
                      "id": {
                        "examples": [
                          "user_ABC123"
                        ],
                        "type": "string"
                      },
                      "type": {
                        "x-polymorphic": true,
                        "examples": [
                          "user",
                          "workflow",
                          "workflow-run"
                        ],
                        "type": "string"
                      }
                    },
                    "type": [
                      "object",
                      "null"
                    ]
                  }
                },
                "type": "object"
              },
              "selfies": {
                "properties": {
                  "data": {
                    "items": {
                      "properties": {
                        "id": {
                          "examples": [
                            "self_ABC123"
                          ],
                          "type": "string"
                        },
                        "type": {
                          "x-polymorphic": true,
                          "examples": [
                            "selfie/profile-and-center",
                            "selfie/center-only",
                            "selfie/configurable-poses"
                          ],
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              },
              "sessions": {
                "properties": {
                  "data": {
                    "items": {
                      "properties": {
                        "id": {
                          "examples": [
                            "iqse_ABC123"
                          ],
                          "type": "string"
                        },
                        "type": {
                          "const": "inquiry-session",
                          "description": "inquiry-session",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              },
              "verifications": {
                "properties": {
                  "data": {
                    "items": {
                      "properties": {
                        "id": {
                          "examples": [
                            "ver_ABC123"
                          ],
                          "type": "string"
                        },
                        "type": {
                          "x-polymorphic": true,
                          "examples": [
                            "verification/government-id"
                          ],
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          }
        }
      },
      "report-shared-attributes": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "The status of the report\n\nPossible values:\n- pending\n- ready\n- errored\n\nDo not assume this is a static enumeration; Persona may add new values in\nthe future without a versioned update."
          },
          "created-at": {
            "type": "string",
            "description": "The time the report was created in ISO 8601 format",
            "example": "2020-04-12T05:08:51.000Z"
          },
          "completed-at": {
            "type": "string",
            "description": "The time the report completed processing in ISO 8601 format",
            "example": "2020-04-13T00:23:57.000Z"
          },
          "redacted-at": {
            "type": [
              "string",
              "null"
            ],
            "description": "The time the report was redacted in ISO 8601 format",
            "example": null
          },
          "report-template-version-name": {
            "type": "string",
            "description": "The name of the report template version used for this report",
            "example": "v1"
          },
          "has-match": {
            "type": "boolean",
            "description": "Whether or not the report matched"
          },
          "is-continuous": {
            "type": "boolean",
            "description": "Whether or not the report is recurrable and is currently recurring"
          },
          "tags": {
            "type": "array",
            "description": "Tags on the report",
            "items": {
              "type": "string",
              "example": "tag1"
            }
          }
        }
      },
      "report-watchlist-entity": {
        "description": "A entity that matched from a Watchlist",
        "properties": {
          "name": {
            "type": "string",
            "example": "Won Ho Ri"
          },
          "alias-type": {
            "type": "string",
            "description": "Possible values:\n- primary_name\n- aka\n\nDo not assume this is a static enumeration; Persona may add new values in\nthe future without a versioned update."
          },
          "birthdates": {
            "type": "array",
            "description": "The birthdate of the entity",
            "items": {
              "type": "object",
              "properties": {
                "day": {
                  "type": "string",
                  "example": "17"
                },
                "year": {
                  "type": "string",
                  "example": "1964"
                },
                "month": {
                  "type": "string",
                  "example": "07"
                },
                "granularity": {
                  "type": "string",
                  "description": "Precision the birthday provided",
                  "example": "day"
                }
              }
            }
          }
        }
      },
      "report-run-history": {
        "type": "array",
        "title": "Report Run History",
        "description": "A history of the report runs",
        "items": {
          "type": "object",
          "properties": {
            "scheduled-at": {
              "type": "string",
              "format": "date-time",
              "example": "2023-08-11T20:36:04.291Z"
            },
            "completed-at": {
              "type": "string",
              "format": "date-time",
              "example": "2023-08-11T20:36:04.291Z"
            },
            "type": {
              "type": "string",
              "description": "The type of report run\n\nPossible values:\n- scheduled\n- manual\n\n  Do not assume this is a static enumeration; Persona may add new values in the future without a versioned update.",
              "example": "scheduled"
            }
          }
        }
      },
      "report-shared-relationships": {
        "type": "object",
        "description": "Other Persona objects related to the report",
        "properties": {
          "inquiry": {
            "type": "object",
            "description": "The inquiry linked to the report",
            "properties": {
              "data": {
                "type": [
                  "object",
                  "null"
                ],
                "properties": {
                  "id": {
                    "example": "inq_KHK4MJCE4QvfocWB2intQ3YE",
                    "type": "string"
                  },
                  "type": {
                    "const": "inquiry",
                    "description": "inquiry",
                    "type": "string"
                  }
                }
              }
            }
          },
          "account": {
            "type": "object",
            "description": "The account linked to the report",
            "properties": {
              "data": {
                "type": [
                  "object",
                  "null"
                ],
                "properties": {
                  "id": {
                    "example": "act_9e3yoAUApTRMjgNoPAC7TNtz",
                    "type": "string"
                  },
                  "type": {
                    "const": "account",
                    "description": "account",
                    "type": "string"
                  }
                }
              }
            }
          },
          "report-template": {
            "type": "object",
            "description": "The report template used to create this report",
            "properties": {
              "data": {
                "type": "object",
                "properties": {
                  "id": {
                    "example": "rptp_tQumELV14h7Vh9Qqm8Ytm5K1",
                    "type": "string"
                  },
                  "type": {
                    "x-polymorphic": true,
                    "example": "report-template/watchlist",
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "report-watchlist": {
        "title": "Watchlist Report",
        "description": "A Watchlist Report",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "const": "report/watchlist",
            "description": "report/watchlist"
          },
          "id": {
            "type": "string",
            "description": "The ID of the report",
            "example": "rep_7WNzPaNcroBKLarNHBjYDLAp"
          },
          "attributes": {
            "properties": {},
            "allOf": [
              {
                "$ref": "#/components/schemas/report-shared-attributes"
              },
              {
                "type": "object",
                "properties": {
                  "name-first": {
                    "type": "string",
                    "description": "The input first name of the search individual",
                    "example": "Joe"
                  },
                  "name-middle": {
                    "type": "string",
                    "description": "The input middle name of the search individual",
                    "example": "N"
                  },
                  "name-last": {
                    "type": "string",
                    "description": "The input last name of the search individual",
                    "example": "Doe"
                  },
                  "term": {
                    "type": "string",
                    "description": "The input combined term used for searching (first + middle + last name)",
                    "example": "Joe N Doe"
                  },
                  "birthdate": {
                    "type": "string",
                    "description": "The input DOB in YYYY-MM-DD format",
                    "example": "1991-10-07"
                  },
                  "country-code": {
                    "type": "string",
                    "description": "The input search country in alpha2 format",
                    "example": "US"
                  },
                  "matched-lists": {
                    "type": "array",
                    "description": "Lists that matched from the search input",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "example": "EU - EC - Programme PRK - North Korea"
                        },
                        "url": {
                          "type": "string",
                          "example": "http://eur-lex.europa.eu/legal-content/EN/TXT/PDF/?uri=CELEX:32017R1509&from=EN"
                        },
                        "list-type": {
                          "type": "string",
                          "example": "sanction"
                        },
                        "list-types": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "example": "sanction"
                          }
                        },
                        "slug": {
                          "type": "string",
                          "example": "eu-ec-programme-prk"
                        },
                        "flag-code": {
                          "type": "string",
                          "example": "EU"
                        },
                        "entities": {
                          "type": "array",
                          "description": "A matched person",
                          "items": {
                            "$ref": "#/components/schemas/report-watchlist-entity"
                          }
                        }
                      }
                    }
                  },
                  "run-history": {
                    "$ref": "#/components/schemas/report-run-history"
                  },
                  "ignore-list": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "ignored-at": {
                          "type": "string",
                          "format": "date-time",
                          "example": "2023-09-13T22:08:56.618Z"
                        },
                        "run-history-completed-at": {
                          "type": "string",
                          "format": "date-time",
                          "example": "2023-08-11T20:36:04.291Z"
                        },
                        "match": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "example": "EU - EC - Programme PRK - North Korea"
                            },
                            "url": {
                              "type": "string",
                              "example": "http://eur-lex.europa.eu/legal-content/EN/TXT/PDF/?uri=CELEX:32017R1509&from=EN"
                            },
                            "list-type": {
                              "type": "string",
                              "example": "sanction"
                            },
                            "list-types": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "example": "sanction"
                              }
                            },
                            "slug": {
                              "type": "string",
                              "example": "eu-ec-programme-prk"
                            },
                            "flag-code": {
                              "type": "string",
                              "example": "EU"
                            },
                            "entities": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "example": "Won Ho Ri"
                                  },
                                  "alias-type": {
                                    "type": "string",
                                    "example": "primary_name"
                                  },
                                  "birthdates": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "day": {
                                          "type": "string",
                                          "example": "17"
                                        },
                                        "year": {
                                          "type": "string",
                                          "format": "date",
                                          "example": "1964"
                                        },
                                        "month": {
                                          "type": "string",
                                          "format": "date-time",
                                          "example": "07"
                                        },
                                        "granularity": {
                                          "type": "string",
                                          "example": "day"
                                        }
                                      }
                                    }
                                  },
                                  "group-id": {
                                    "type": "string",
                                    "example": "EU:110286"
                                  }
                                }
                              }
                            }
                          }
                        },
                        "user": {
                          "type": "string",
                          "example": "John Doe"
                        },
                        "ignore-reason": {
                          "type": "string",
                          "example": "false positive"
                        }
                      }
                    }
                  }
                }
              }
            ]
          },
          "relationships": {
            "$ref": "#/components/schemas/report-shared-relationships"
          }
        }
      },
      "report-crypto-address-watchlist": {
        "title": "Crypto Address Watchlist Report",
        "description": "A Crypto Address Watchlist Report",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "const": "report/crypto-address-watchlist",
            "description": "report/crypto-address-watchlist"
          },
          "id": {
            "type": "string",
            "description": "The ID of the report",
            "example": "rep_7WNzPaNcroBKLarNHBjYDLAp"
          },
          "attributes": {
            "properties": {},
            "allOf": [
              {
                "$ref": "#/components/schemas/report-shared-attributes"
              },
              {
                "type": "object",
                "properties": {
                  "query": {
                    "type": "object",
                    "properties": {
                      "crypto-address": {
                        "type": "string",
                        "example": "1Fz29BQp82pE3vXXcsZoMNQ3KSHfMzfMe3"
                      }
                    }
                  },
                  "result": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "example": "US - OFAC - Specially Designated Nationals and Blocked Persons (SDN)"
                        },
                        "url": {
                          "type": "string",
                          "example": "https://home.treasury.gov/policy-issues/financial-sanctions/specially-designated-nationals-and-blocked-persons-list-sdn-human-readable-lists"
                        },
                        "list-type": {
                          "type": "string",
                          "example": "sanction"
                        },
                        "slug": {
                          "type": "string",
                          "example": "us-ofac-specially-designated-nationals-and-blocked-persons"
                        },
                        "flag-code": {
                          "type": "string",
                          "example": "US"
                        },
                        "entities": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "example": "ANDREYEV, Anton Nikolaeyvich"
                              },
                              "alias-type": {
                                "type": "string",
                                "example": "primary_name"
                              },
                              "birthdates": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "day": {
                                      "type": "string",
                                      "format": "date-time",
                                      "example": "03"
                                    },
                                    "year": {
                                      "type": "string",
                                      "format": "date",
                                      "example": "1985"
                                    },
                                    "month": {
                                      "type": "string",
                                      "format": "date-time",
                                      "example": "03"
                                    },
                                    "granularity": {
                                      "type": "string",
                                      "example": "day"
                                    }
                                  }
                                }
                              },
                              "crypto-addresses": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "example": "XBT"
                                    },
                                    "address": {
                                      "type": "string",
                                      "example": "1Fz29BQp82pE3vXXcsZoMNQ3KSHfMzfMe3"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            ]
          },
          "relationships": {
            "$ref": "#/components/schemas/report-shared-relationships"
          }
        }
      },
      "report-adverse-media": {
        "title": "Adverse Media Report",
        "description": "An Adverse Media Report",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "const": "report/adverse-media",
            "description": "report/adverse-media"
          },
          "id": {
            "type": "string",
            "description": "The ID of the report",
            "example": "rep_7WNzPaNcroBKLarNHBjYDLAp"
          },
          "attributes": {
            "properties": {},
            "allOf": [
              {
                "$ref": "#/components/schemas/report-shared-attributes"
              },
              {
                "type": "object",
                "properties": {
                  "name-first": {
                    "type": "string",
                    "description": "The input first name of the search individual",
                    "example": "Joe"
                  },
                  "name-middle": {
                    "type": "string",
                    "description": "The input middle name of the search individual",
                    "example": "N"
                  },
                  "name-last": {
                    "type": "string",
                    "description": "The input last name of the search individual",
                    "example": "Doe"
                  },
                  "term": {
                    "type": "string",
                    "description": "The input combined term used for searching (first + middle + last name)",
                    "example": "Joe N Doe"
                  },
                  "birthdate-year": {
                    "type": "integer",
                    "format": "int32",
                    "example": 1992
                  },
                  "birthdate": {
                    "type": "string",
                    "description": "The input DOB in YYYY-MM-DD format",
                    "example": "1991-10-07"
                  },
                  "country-code": {
                    "type": "string",
                    "description": "The input search country in alpha2 format",
                    "example": "US"
                  },
                  "related-sources": {
                    "description": "The sources that matched for the search",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "akas": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "example": "Joey Doey"
                          }
                        },
                        "birthdates": {
                          "type": "array",
                          "items": {
                            "type": [
                              "string",
                              "null"
                            ]
                          }
                        },
                        "match-types": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "example": "name_exact"
                          }
                        },
                        "media": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "date": {
                                "type": "string",
                                "format": "date",
                                "example": "2022-11-12"
                              },
                              "snippet": {
                                "type": "string",
                                "description": "Snippet from matched article",
                                "example": "Joe Doe was ordered to jail on Friday after a judge revoked his bail for alleged witness tampering."
                              },
                              "url": {
                                "type": "string",
                                "description": "URL of matched article",
                                "example": "https://www.example.com/"
                              },
                              "title": {
                                "type": "string",
                                "description": "Title of matched article",
                                "example": "Joe Doe ordered to jail"
                              }
                            }
                          }
                        },
                        "name": {
                          "type": "string",
                          "example": "Joe Doe"
                        },
                        "sources": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "country-codes": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "example": "FR"
                                }
                              },
                              "name": {
                                "type": "string",
                                "example": "Adverse Media"
                              },
                              "types": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "example": "adverse-media-v2-other-minor"
                                }
                              }
                            }
                          }
                        },
                        "entity-id": {
                          "type": "string",
                          "example": "FV933QHOUDG73V8"
                        }
                      }
                    }
                  }
                }
              }
            ]
          },
          "relationships": {
            "$ref": "#/components/schemas/report-shared-relationships"
          }
        }
      },
      "report-address-lookup": {
        "title": "Address Lookup Report",
        "description": "An Address Lookup Report",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "const": "report/address-lookup",
            "description": "report/address-lookup"
          },
          "id": {
            "type": "string",
            "description": "The ID of the report",
            "example": "rep_7WNzPaNcroBKLarNHBjYDLAp"
          },
          "attributes": {
            "properties": {},
            "allOf": [
              {
                "$ref": "#/components/schemas/report-shared-attributes"
              },
              {
                "type": "object",
                "properties": {
                  "addressee": {
                    "type": "string",
                    "example": "Joe Doe"
                  },
                  "address-street-1": {
                    "type": "string",
                    "example": "1 Infinite Loop"
                  },
                  "address-street-2": {
                    "type": "string"
                  },
                  "address-city": {
                    "type": "string",
                    "example": "Cupertino"
                  },
                  "address-subdivision": {
                    "type": "string",
                    "example": "California"
                  },
                  "address-postal-code": {
                    "type": "string",
                    "example": "95014"
                  },
                  "resolved-addressee": {
                    "type": "string"
                  },
                  "resolved-address-street-1": {
                    "type": "string",
                    "example": "1 Infinite Loop"
                  },
                  "resolved-address-street-2": {
                    "type": "string"
                  },
                  "resolved-address-city": {
                    "type": "string",
                    "example": "Cupertino"
                  },
                  "resolved-address-subdivision": {
                    "type": "string",
                    "example": "CA"
                  },
                  "resolved-address-postal-code": {
                    "type": "string",
                    "example": "95014"
                  },
                  "metadata-record-type": {
                    "type": "string",
                    "example": "S"
                  },
                  "metadata-zip-type": {
                    "type": "string",
                    "example": "Standard"
                  },
                  "metadata-county-fips": {
                    "type": "string",
                    "example": "06085"
                  },
                  "metadata-county-name": {
                    "type": "string",
                    "example": "Santa Clara"
                  },
                  "metadata-carrier-route": {
                    "type": "string",
                    "example": "C067"
                  },
                  "metadata-carrier-route-type": {
                    "type": "string",
                    "example": "CityRoute"
                  },
                  "metadata-congressional-district": {
                    "type": "string",
                    "example": "17"
                  },
                  "metadata-building-default-indicator": {
                    "type": "string"
                  },
                  "metadata-residential-delivery-indicator": {
                    "type": "string",
                    "example": "Commercial"
                  },
                  "metadata-latitude": {
                    "type": "number",
                    "example": 37.3331
                  },
                  "metadata-longitude": {
                    "type": "number",
                    "example": -122.02889
                  },
                  "metadata-precision": {
                    "type": "string",
                    "example": "Zip9"
                  },
                  "metadata-time-zone": {
                    "type": "string",
                    "example": "Pacific"
                  },
                  "metadata-utc-offset": {
                    "type": "integer",
                    "example": -8
                  },
                  "metadata-obeys-daylight-savings": {
                    "type": "boolean",
                    "example": true
                  },
                  "analysis-dpv-match-code": {
                    "type": "string",
                    "example": "Y"
                  },
                  "analysis-dpv-match-code-decoded": {
                    "type": "string",
                    "example": "Confirmed"
                  },
                  "analysis-dpv-footnotes": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "example": "AA"
                    }
                  },
                  "analysis-dpv-footnotes-decoded": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "example": "Street name, city, state, and ZIP are all valid."
                    }
                  },
                  "analysis-dpv-cmra": {
                    "type": "string",
                    "example": "N"
                  },
                  "analysis-dpv-vacant": {
                    "type": "string",
                    "example": "N"
                  },
                  "analysis-active": {
                    "type": "string",
                    "example": "Y"
                  },
                  "analysis-footnotes": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "analysis-footnotes-decoded": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "analysis-lacs-link-code": {
                    "type": "string"
                  },
                  "analysis-lacs-link-code-decoded": {
                    "type": "string"
                  },
                  "analysis-lacs-link-indicator": {
                    "type": "string"
                  },
                  "analysis-lacs-link-indicator-decoded": {
                    "type": "string"
                  },
                  "analysis-suite-link-match": {
                    "type": "string"
                  },
                  "metadata-ews-match": {
                    "type": "string"
                  },
                  "error-message": {
                    "type": "string"
                  }
                }
              }
            ]
          },
          "relationships": {
            "$ref": "#/components/schemas/report-shared-relationships"
          }
        }
      },
      "report-politically-exposed-person": {
        "title": "Politically Exposed Person Report",
        "description": "A Politically Exposed Person Report",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "const": "report/politically-exposed-person",
            "description": "report/politically-exposed-person"
          },
          "id": {
            "type": "string",
            "description": "The ID of the report",
            "example": "rep_7WNzPaNcroBKLarNHBjYDLAp"
          },
          "attributes": {
            "properties": {},
            "allOf": [
              {
                "$ref": "#/components/schemas/report-shared-attributes"
              },
              {
                "type": "object",
                "properties": {
                  "query": {
                    "type": "object",
                    "properties": {
                      "name-first": {
                        "type": "string",
                        "description": "The input first name of the search individual",
                        "example": "Joe"
                      },
                      "name-middle": {
                        "type": "string",
                        "description": "The input middle name of the search individual",
                        "example": "N"
                      },
                      "name-last": {
                        "type": "string",
                        "description": "The input last name of the search individual",
                        "example": "Doe"
                      },
                      "term": {
                        "type": "string",
                        "description": "The input combined term used for searching (first + middle + last name). Either the name or the term fields are required.",
                        "example": "Joe N Doe"
                      },
                      "birthdate": {
                        "type": "string",
                        "description": "The input DOB in YYYY-MM-DD format",
                        "example": "1991-10-07"
                      },
                      "country-code": {
                        "type": "string",
                        "description": "The input search country in alpha2 format",
                        "example": "US"
                      }
                    }
                  },
                  "result": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "entity-id": {
                          "type": "string",
                          "example": "MV9IPWV13KYS0A9"
                        },
                        "name": {
                          "type": "string",
                          "example": "Joe Doe"
                        },
                        "birthdates": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "format": "date",
                            "example": "1942-11-20"
                          }
                        },
                        "death-dates": {
                          "type": "array",
                          "items": {
                            "type": [
                              "string",
                              "null"
                            ]
                          }
                        },
                        "locations": {
                          "type": "array",
                          "items": {
                            "type": [
                              "string",
                              "null"
                            ]
                          }
                        },
                        "country": {
                          "type": "string",
                          "example": "United States"
                        },
                        "sex": {
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "positions": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "pep-class": {
                                "type": "string",
                                "example": "pep-class-1"
                              },
                              "source-key": {
                                "type": "string",
                                "example": "united-states-head-of-state"
                              },
                              "name": {
                                "type": "string",
                                "example": "President of the United States"
                              }
                            }
                          }
                        },
                        "associates": {
                          "type": "array",
                          "items": {
                            "type": [
                              "string",
                              "null"
                            ]
                          }
                        },
                        "affiliations": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "source-key": {
                                "type": "string",
                                "example": "north-atlantic-treaty-organisation"
                              },
                              "name": {
                                "type": "string",
                                "example": "North Atlantic Treaty Organization Member Countries Representation"
                              }
                            }
                          }
                        },
                        "related-urls": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "source-key": {
                                "type": "string",
                                "example": "internal-data-source"
                              },
                              "name": {
                                "type": "string",
                                "example": "https://www.example.org/"
                              }
                            }
                          }
                        },
                        "images": {
                          "type": "array",
                          "items": {
                            "type": [
                              "string",
                              "null"
                            ]
                          }
                        },
                        "sources": {
                          "type": "object",
                          "description": "A map of the sources that matched by entity"
                        },
                        "match-types": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "example": "aka_exact"
                          }
                        },
                        "pep-type": {
                          "type": [
                            "string",
                            "null"
                          ]
                        }
                      }
                    }
                  },
                  "run-history": {
                    "$ref": "#/components/schemas/report-run-history"
                  }
                }
              }
            ]
          },
          "relationships": {
            "$ref": "#/components/schemas/report-shared-relationships"
          }
        }
      },
      "report-email-address": {
        "title": "Email Address Report",
        "description": "An Email Address Report",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "const": "report/email-address",
            "description": "report/email-address"
          },
          "id": {
            "type": "string",
            "description": "The ID of the report",
            "example": "rep_7WNzPaNcroBKLarNHBjYDLAp"
          },
          "attributes": {
            "properties": {},
            "allOf": [
              {
                "$ref": "#/components/schemas/report-shared-attributes"
              },
              {
                "type": "object",
                "properties": {
                  "email-address": {
                    "type": "string",
                    "description": "The input email address of the search",
                    "example": "example@domain.com"
                  },
                  "email-reputation": {
                    "type": "string",
                    "description": "The reputation of the email provided\n\nPossible values:\n- high\n- medium\n- low\n\nDo not assume this is a static enumeration; Persona may add new\nvalues in the future without a versioned update."
                  },
                  "email-reference-count": {
                    "type": "integer",
                    "description": "The number of sources used to determine the reputation (Deprecated)",
                    "example": 4
                  },
                  "email-domain-reputation": {
                    "type": "string",
                    "deprecated": true,
                    "description": "The reputation of the email domain provided (Deprecated)\n\nPossible values:\n- high\n- medium\n- low\n\nDo not assume this is a static enumeration; Persona may add new\nvalues in the future without a versioned update."
                  },
                  "email-first-seen-days": {
                    "type": "integer",
                    "description": "How many days it has ben since the email was first seen in attack (Deprecated)",
                    "example": 71
                  },
                  "email-last-seen-days": {
                    "type": "integer",
                    "description": "How many days it has been since the email was last seen (Deprecated)",
                    "format": "integer",
                    "example": 250
                  },
                  "email-estimated-age-days": {
                    "type": "integer",
                    "description": "The estimated age of the email in days",
                    "example": 410
                  },
                  "email-domain-age-days": {
                    "type": "integer",
                    "description": "The estimated age of the domain in days",
                    "example": 410
                  },
                  "email-credentials-leaked": {
                    "type": "boolean",
                    "description": "Whether the email has ever been detected to have been leaked (Deprecated)",
                    "example": true
                  },
                  "email-credentials-leaked-recent": {
                    "type": "boolean",
                    "description": "Whether the email has been recently detected as leaked",
                    "example": true
                  },
                  "email-data-breached": {
                    "type": "boolean",
                    "description": "Whether the email was involved in a data breach (Deprecated)",
                    "example": true
                  },
                  "email-malicious-activity-detected": {
                    "type": "boolean",
                    "description": "Whether the email has ever been detected for suspected malicious activity (Deprecated)",
                    "example": true
                  },
                  "email-malicious-activity-detected-recent": {
                    "type": "boolean",
                    "description": "Whether the email has recently been detected for suspected malicious activity",
                    "example": true
                  },
                  "email-is-blocklisted": {
                    "type": "boolean",
                    "description": "Whether the email appears on blocklists (Deprecated)",
                    "example": true
                  },
                  "email-is-spam": {
                    "type": "boolean",
                    "description": "Whether the email is spam",
                    "example": true
                  },
                  "email-is-free-provider": {
                    "type": "boolean",
                    "description": "Whether the email was made with a free provider (Deprecated)",
                    "example": true
                  },
                  "email-is-disposable": {
                    "type": "boolean",
                    "description": "Whether the email is one that is disposable or temporary",
                    "example": true
                  },
                  "email-is-deliverable": {
                    "type": "boolean",
                    "description": "Whether the email is deliverable",
                    "example": true
                  },
                  "email-is-valid-mx": {
                    "type": "boolean",
                    "description": "Whether the domain has a valid MX record",
                    "example": true
                  },
                  "email-is-spoofable": {
                    "type": "boolean",
                    "description": "Whether the email can be spoofed. (E.G. not a strict SPF policy or DMARC not enforced. Deprecated)",
                    "example": true
                  },
                  "email-is-spf-strict": {
                    "type": "boolean",
                    "description": "Whether there is a sufficiently strict SPF record (Deprecated)",
                    "example": true
                  },
                  "email-is-dmarc-enforced": {
                    "type": "boolean",
                    "description": "Whether DMARC is configured correctly and enforced (Deprecated)",
                    "example": true
                  },
                  "email-is-suspicious": {
                    "type": "boolean",
                    "description": "Whether the email is suspicious or risky",
                    "example": true
                  },
                  "email-domain-exists": {
                    "type": "boolean",
                    "description": "Whether the domain of the email exists",
                    "example": true
                  },
                  "email-domain": {
                    "type": "string",
                    "description": "The domain of the email",
                    "example": "gmail.com"
                  }
                }
              }
            ]
          },
          "relationships": {
            "$ref": "#/components/schemas/report-shared-relationships"
          }
        }
      },
      "report-phone-risk": {
        "title": "Phone Risk Report",
        "description": "A Phone Risk Report",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "const": "report/phone-number",
            "description": "report/phone-number"
          },
          "id": {
            "type": "string",
            "description": "The ID of the report",
            "example": "rep_7WNzPaNcroBKLarNHBjYDLAp"
          },
          "attributes": {
            "properties": {},
            "allOf": [
              {
                "$ref": "#/components/schemas/report-shared-attributes"
              },
              {
                "type": "object",
                "properties": {
                  "phone-number": {
                    "type": "string",
                    "description": "The input phone number of the search",
                    "example": "+14169671111"
                  },
                  "phone-type": {
                    "type": "string",
                    "description": "Possible values:\n- FIXED_LINE\n- MOBILE\n- PREPAID\n- TOLL_FREE\n- VOIP\n- PAGER\n- PAYPHONE\n- INVALID\n- RESTRICTED_PREMIUM\n- PERSONAL\n- VOICEMAIL\n- OTHER\n\nDo not assume this is a static enumeration; Persona may add new\nvalues in the future without a versioned update."
                  },
                  "phone-carrier": {
                    "type": "string",
                    "example": "Rogers Communications Canada Inc."
                  },
                  "phone-risk-level": {
                    "type": "string",
                    "description": "Assessment of the phone number's risk (low - high)",
                    "example": "medium-low"
                  },
                  "phone-risk-recommendation": {
                    "type": "string",
                    "description": "Possible values:\n- block\n- allow\n- flag\n\nDo not assume this is a static enumeration; Persona may add new\nvalues in the future without a versioned update."
                  },
                  "phone-risk-score": {
                    "type": "integer",
                    "description": "Risk score out of 1000",
                    "format": "int32",
                    "example": 250
                  },
                  "phone-risk-sim-swap": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "description": "The risk of a fraudulent SIM swap\n\nPossible values:\n- very-low\n- low\n- medium\n- high\n- N/A\n\nDo not assume this is a static enumeration; Persona may add new\nvalues in the future without a versioned update."
                  }
                }
              }
            ]
          },
          "relationships": {
            "$ref": "#/components/schemas/report-shared-relationships"
          }
        }
      },
      "report-social-media": {
        "title": "Social Media Report",
        "description": "A Social Media Report",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "const": "report/social-media",
            "description": "report/social-media"
          },
          "id": {
            "type": "string",
            "description": "The ID of the report",
            "example": "rep_7WNzPaNcroBKLarNHBjYDLAp"
          },
          "attributes": {
            "properties": {},
            "allOf": [
              {
                "$ref": "#/components/schemas/report-shared-attributes"
              },
              {
                "type": "object",
                "properties": {
                  "name-first": {
                    "type": "string",
                    "example": "Norman"
                  },
                  "name-last": {
                    "type": "string",
                    "example": "Mannor"
                  },
                  "birthdate": {
                    "type": "string",
                    "description": "Date of birth in YYYY-MM-DD format",
                    "example": "1991-10-07"
                  },
                  "phone-number": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "example": "+14169671111"
                  },
                  "email-address": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "example": "address@domain.com"
                  },
                  "address-city": {
                    "type": "string",
                    "example": "Funkyville"
                  },
                  "address-subdivision": {
                    "type": "string",
                    "description": "Sub-national subdivision such as a US state or a Canadian province",
                    "example": "Wisconsin"
                  },
                  "linkedin-url": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "example": "linkdin.com/in/thisisausername"
                  },
                  "linkedin-username": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "example": "thisisausername"
                  },
                  "linkedin-id": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "example": "123456789"
                  },
                  "facebook-url": {
                    "type": "string",
                    "example": "facebook.com/user.name.7"
                  },
                  "facebook-username": {
                    "type": "string",
                    "example": "user.name.7"
                  },
                  "facebook-id": {
                    "type": "string",
                    "example": "748945123159485"
                  },
                  "twitter-url": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "example": "twitter.com/elonmusk"
                  },
                  "twitter-username": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "example": "elonmusk"
                  },
                  "github-url": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "example": "github.com/username"
                  },
                  "github-username": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "example": "username"
                  }
                }
              }
            ]
          },
          "relationships": {
            "$ref": "#/components/schemas/report-shared-relationships"
          }
        }
      },
      "report-business-lookup": {
        "title": "Business Lookup Report",
        "description": "A Business Lookup Report",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "const": "report/business-lookup",
            "description": "report/business-lookup"
          },
          "id": {
            "type": "string",
            "description": "The ID of the report",
            "example": "rep_7WNzPaNcroBKLarNHBjYDLAp"
          },
          "attributes": {
            "properties": {},
            "allOf": [
              {
                "$ref": "#/components/schemas/report-shared-attributes"
              },
              {
                "type": "object",
                "properties": {
                  "query": {
                    "type": "object",
                    "properties": {
                      "business-name": {
                        "type": "string",
                        "example": "Coffee Shop"
                      },
                      "phone-number": {
                        "type": [
                          "string",
                          "null"
                        ],
                        "example": "+11234567890"
                      },
                      "website": {
                        "type": [
                          "string",
                          "null"
                        ],
                        "example": "https://website.com"
                      },
                      "ein": {
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "address-street-1": {
                        "type": "string",
                        "example": "123 Funky St"
                      },
                      "address-street-2": {
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "address-city": {
                        "type": "string",
                        "example": "Funkyville"
                      },
                      "address-subdivision": {
                        "type": "string",
                        "description": "Subnational division of a country such as a US state.",
                        "example": "CA"
                      },
                      "address-postal-code": {
                        "type": "string",
                        "example": "12345"
                      },
                      "address-country-code": {
                        "type": [
                          "string",
                          "null"
                        ],
                        "example": "US"
                      },
                      "incorporation-state": {
                        "type": [
                          "string",
                          "null"
                        ],
                        "example": "CA"
                      },
                      "associated-people": {
                        "type": "array",
                        "items": {
                          "type": [
                            "string",
                            "null"
                          ],
                          "example": "John Doe"
                        }
                      }
                    }
                  },
                  "result": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "example": "Coffee Shop, LLC DBA Coffee Shop"
                      },
                      "aliases": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "example": "COFFEE SHOP"
                        }
                      },
                      "description": {
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "legal-status": {
                        "type": "string",
                        "example": "unknown"
                      },
                      "legal-entity-type": {
                        "type": "string",
                        "example": "LLC"
                      },
                      "date-of-incorporation": {
                        "type": "object",
                        "properties": {
                          "granularity": {
                            "type": "string",
                            "example": "year"
                          },
                          "day": {
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "month": {
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "year": {
                            "type": "string",
                            "format": "date",
                            "example": "2013"
                          }
                        }
                      },
                      "industry-classifications": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string",
                              "example": "789456"
                            },
                            "title": {
                              "type": "string",
                              "example": "Snack and Nonalcoholic Beverage Bars"
                            },
                            "type": {
                              "type": "string",
                              "example": "NAICS_2017"
                            }
                          }
                        }
                      },
                      "identifiers": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "state": {
                              "type": "string",
                              "example": "CA"
                            },
                            "country": {
                              "type": "string",
                              "example": "US"
                            },
                            "issue-date": {
                              "type": "string",
                              "format": "date",
                              "example": "2013-05-12"
                            },
                            "file-number": {
                              "type": "string",
                              "example": "454894615645"
                            },
                            "type": {
                              "type": "string",
                              "example": "us_state_registration_number"
                            },
                            "addresses": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "street-1": {
                                    "type": "string",
                                    "example": "123 FUNKY STREET"
                                  },
                                  "street-2": {
                                    "type": [
                                      "string",
                                      "null"
                                    ]
                                  },
                                  "city": {
                                    "type": "string",
                                    "example": "SAN FRANCISCO"
                                  },
                                  "subdivision": {
                                    "type": "string",
                                    "example": "CA"
                                  },
                                  "postal-code": {
                                    "type": "string",
                                    "example": "94000"
                                  },
                                  "delivery-point-barcode": {
                                    "type": [
                                      "string",
                                      "null"
                                    ]
                                  },
                                  "primary-number": {
                                    "type": [
                                      "string",
                                      "null"
                                    ]
                                  },
                                  "street-name": {
                                    "type": [
                                      "string",
                                      "null"
                                    ]
                                  },
                                  "latitude": {
                                    "type": [
                                      "string",
                                      "null"
                                    ]
                                  },
                                  "longitude": {
                                    "type": [
                                      "string",
                                      "null"
                                    ]
                                  },
                                  "precision": {
                                    "type": [
                                      "string",
                                      "null"
                                    ]
                                  },
                                  "type": {
                                    "type": "string",
                                    "example": "registered_agent_address"
                                  }
                                }
                              }
                            },
                            "status": {
                              "type": "string",
                              "example": "active"
                            }
                          }
                        }
                      },
                      "addresses": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "street-1": {
                              "type": "string",
                              "example": "123 Funky St"
                            },
                            "street-2": {
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "city": {
                              "type": "string",
                              "example": "Funkyville"
                            },
                            "subdivision": {
                              "type": "string",
                              "example": "CA"
                            },
                            "postal-code": {
                              "type": "string",
                              "example": "12345-1234"
                            }
                          }
                        }
                      },
                      "websites": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "example": "https://website.com/"
                        }
                      },
                      "phone-numbers": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "example": "+11234567890"
                        }
                      },
                      "agents": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "name-full": {
                              "type": "string",
                              "example": "JOHN DOE"
                            }
                          }
                        }
                      },
                      "officers": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "name-full": {
                              "type": "string",
                              "example": "JOHN DOE"
                            },
                            "name-first": {
                              "type": [
                                "string",
                                "null"
                              ],
                              "example": "JOHN"
                            },
                            "name-last": {
                              "type": [
                                "string",
                                "null"
                              ],
                              "example": "DOE"
                            },
                            "titles": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "example": "CONTACT NAME"
                              }
                            }
                          }
                        }
                      },
                      "headcount": {
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "sources": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "example": "RESTAURANT INSPECTIONS"
                            }
                          }
                        }
                      }
                    }
                  },
                  "match-status-strength": {
                    "type": "string",
                    "description": "Possible values:\n- not_applicable\n- match\n- partial_match\n- no_match\n- unavailable\n- unknown\n\nDo not assume this is a static enumeration; Persona may add new\nvalues in the future without a versioned update."
                  },
                  "match-status-business-name": {
                    "type": "string",
                    "description": "Possible values:\n- not_applicable\n- match\n- partial_match\n- no_match\n- unavailable\n- unknown\n\nDo not assume this is a static enumeration; Persona may add new\nvalues in the future without a versioned update."
                  },
                  "match-status-address": {
                    "type": "string",
                    "description": "Possible values:\n- not_applicable\n- match\n- partial_match\n- no_match\n- unavailable\n- unknown\n\nDo not assume this is a static enumeration; Persona may add new\nvalues in the future without a versioned update."
                  },
                  "match-status-address-street": {
                    "type": "string",
                    "description": "Possible values:\n- not_applicable\n- match\n- partial_match\n- no_match\n- unavailable\n- unknown\n\nDo not assume this is a static enumeration; Persona may add new\nvalues in the future without a versioned update."
                  },
                  "match-status-address-city": {
                    "type": "string",
                    "description": "Possible values:\n- not_applicable\n- match\n- partial_match\n- no_match\n- unavailable\n- unknown\n\nDo not assume this is a static enumeration; Persona may add new\nvalues in the future without a versioned update."
                  },
                  "match-status-address-postal-code": {
                    "type": "string",
                    "description": "Possible values:\n- not_applicable\n- match\n- partial_match\n- no_match\n- unavailable\n- unknown\n\nDo not assume this is a static enumeration; Persona may add new\nvalues in the future without a versioned update."
                  },
                  "match-status-address-subdivision": {
                    "type": "string",
                    "description": "Possible values:\n- not_applicable\n- match\n- partial_match\n- no_match\n- unavailable\n- unknown\n\nDo not assume this is a static enumeration; Persona may add new\nvalues in the future without a versioned update."
                  },
                  "match-status-phone-number": {
                    "type": "string",
                    "description": "Possible values:\n- not_applicable\n- match\n- partial_match\n- no_match\n- unavailable\n- unknown\n\nDo not assume this is a static enumeration; Persona may add new\nvalues in the future without a versioned update."
                  },
                  "match-status-ein": {
                    "type": "string",
                    "description": "Possible values:\n- not_applicable\n- match\n- partial_match\n- no_match\n- unavailable\n- unknown\n\nDo not assume this is a static enumeration; Persona may add new\nvalues in the future without a versioned update."
                  },
                  "match-status-associated-person": {
                    "type": "string",
                    "description": "Possible values:\n- not_applicable\n- match\n- partial_match\n- no_match\n- unavailable\n- unknown\n\nDo not assume this is a static enumeration; Persona may add new\nvalues in the future without a versioned update."
                  },
                  "match-status-website": {
                    "type": "string",
                    "description": "Possible values:\n- not_applicable\n- match\n- partial_match\n- no_match\n- unavailable\n- unknown\n\nDo not assume this is a static enumeration; Persona may add new\nvalues in the future without a versioned update."
                  }
                }
              }
            ]
          },
          "relationships": {
            "$ref": "#/components/schemas/report-shared-relationships"
          }
        }
      },
      "report-sentilink-scores": {
        "title": "SentiLink Scores Report",
        "description": "A SentiLink Scores Report",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "const": "report/sentilink-scores",
            "description": "report/sentilink-scores"
          },
          "id": {
            "type": "string",
            "description": "The ID of the report",
            "examples": [
              "rep_7WNzPaNcroBKLarNHBjYDLAp"
            ]
          },
          "attributes": {
            "properties": {},
            "allOf": [
              {
                "$ref": "#/components/schemas/report-shared-attributes"
              },
              {
                "type": "object",
                "properties": {
                  "query": {
                    "properties": {
                      "birthdate": {
                        "description": "Birthdate, must be in the format \"YYYY-MM-DD\".",
                        "format": "date",
                        "examples": [
                          "1994-04-12"
                        ],
                        "type": "string"
                      },
                      "name-first": {
                        "description": "Given or first name.",
                        "examples": [
                          "Jane"
                        ],
                        "type": "string"
                      },
                      "name-last": {
                        "description": "Family or last name.",
                        "examples": [
                          "Doe"
                        ],
                        "type": "string"
                      },
                      "address-street-1": {
                        "description": "Street name of residence address.",
                        "examples": [
                          "123 Main St"
                        ],
                        "type": "string"
                      },
                      "address-city": {
                        "description": "City of residence address. Not all international addresses use this attribute.",
                        "examples": [
                          "San Francisco"
                        ],
                        "type": "string"
                      },
                      "address-subdivision": {
                        "description": "State or subdivision of residence address. In the US, this should be the unabbreviated name. Not all international addresses use this attribute.",
                        "examples": [
                          "California"
                        ],
                        "type": "string"
                      },
                      "address-postal-code": {
                        "description": "ZIP or postal code of residence address. Not all international addresses use this attribute.",
                        "examples": [
                          "94111"
                        ],
                        "type": "string"
                      },
                      "address-country-code": {
                        "description": "Country code of residence address.",
                        "examples": [
                          "US"
                        ],
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "social-security-number": {
                        "description": "Social security number",
                        "type": "string",
                        "examples": [
                          "123-45-6789"
                        ]
                      },
                      "user-id": {
                        "description": "Reference ID of applicant",
                        "type": "string",
                        "examples": [
                          "USER-123"
                        ]
                      },
                      "phone-number": {
                        "description": "Phone number.",
                        "examples": [
                          "415-555-1234"
                        ],
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "email-address": {
                        "description": "Email address.",
                        "examples": [
                          "jane@doe.com"
                        ],
                        "type": [
                          "string",
                          "null"
                        ]
                      }
                    }
                  },
                  "result": {
                    "type": "object",
                    "properties": {
                      "application-id": {
                        "type": "string"
                      },
                      "customer-id": {
                        "type": "string"
                      },
                      "environment": {
                        "type": "string"
                      },
                      "notes": {
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "scores": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "examples": [
                                "sentilink_abuse_score"
                              ]
                            },
                            "score": {
                              "type": "integer",
                              "format": "int32"
                            },
                            "version": {
                              "type": "string",
                              "examples": [
                                "1.5.3"
                              ]
                            },
                            "reason-codes": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      },
                      "status": {
                        "type": "string",
                        "examples": [
                          "passed"
                        ]
                      },
                      "transaction-id": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            ]
          },
          "relationships": {
            "$ref": "#/components/schemas/report-shared-relationships"
          }
        }
      },
      "report": {
        "type": "object",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "report/watchlist": "#/components/schemas/report-watchlist",
            "report/crypto-address-watchlist": "#/components/schemas/report-crypto-address-watchlist",
            "report/adverse-media": "#/components/schemas/report-adverse-media",
            "report/address-lookup": "#/components/schemas/report-address-lookup",
            "report/politically-exposed-person": "#/components/schemas/report-politically-exposed-person",
            "report/email-address": "#/components/schemas/report-email-address",
            "report/phone-number": "#/components/schemas/report-phone-risk",
            "report/social-media": "#/components/schemas/report-social-media",
            "report/business-lookup": "#/components/schemas/report-business-lookup",
            "report/sentilink-scores": "#/components/schemas/report-sentilink-scores"
          }
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/report-watchlist"
          },
          {
            "$ref": "#/components/schemas/report-crypto-address-watchlist"
          },
          {
            "$ref": "#/components/schemas/report-adverse-media"
          },
          {
            "$ref": "#/components/schemas/report-address-lookup"
          },
          {
            "$ref": "#/components/schemas/report-politically-exposed-person"
          },
          {
            "$ref": "#/components/schemas/report-email-address"
          },
          {
            "$ref": "#/components/schemas/report-phone-risk"
          },
          {
            "$ref": "#/components/schemas/report-social-media"
          },
          {
            "$ref": "#/components/schemas/report-business-lookup"
          },
          {
            "$ref": "#/components/schemas/report-sentilink-scores"
          }
        ]
      },
      "case-comment": {
        "type": "object",
        "description": "A Case Comment object",
        "properties": {
          "attributes": {
            "type": "object",
            "properties": {
              "message": {
                "examples": [
                  "<p>Case has passed compliance review.</p>"
                ],
                "type": "string"
              },
              "created-at": {
                "examples": [
                  "2021-09-28T05:18:36.200Z"
                ],
                "type": "string"
              },
              "updated-at": {
                "examples": [
                  "2021-09-28T05:18:36.200Z"
                ],
                "type": "string"
              },
              "commenter-id": {
                "examples": [
                  "case_commenter@withpersona.com"
                ],
                "type": "string"
              },
              "commenter-type": {
                "examples": [
                  "user"
                ],
                "type": "string"
              }
            }
          },
          "id": {
            "examples": [
              "cscm_yd2urRmjaCWcSSxqTSHvUcsn"
            ],
            "type": "string"
          },
          "type": {
            "const": "case-comment",
            "description": "case-comment",
            "type": "string"
          }
        }
      },
      "verification-shared-attributes": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "The status of the verification\n\nPossible values:\n- initiated\n- submitted\n- passed\n- failed\n- requires_retry\n- canceled\n- confirmed\n\nDo not assume this is a static enumeration; Persona may add new values in\nthe future without a versioned update."
          },
          "created-at": {
            "type": "string",
            "format": "date-time",
            "description": "The time the verification was created in ISO 8601 format",
            "example": "2023-11-16T01:31:16.000Z"
          },
          "created-at-ts": {
            "type": "integer",
            "format": "int32",
            "description": "The time the verification was created in Unix timestamp format",
            "example": 1700098276
          },
          "submitted-at": {
            "type": [
              "string",
              "null"
            ],
            "format": "date-time",
            "description": "The time the verification was submitted in ISO 8601 format",
            "example": "2023-11-16T01:31:16.000Z"
          },
          "submitted-at-ts": {
            "type": [
              "integer",
              "null"
            ],
            "description": "The time the verification was submitted in Unix timestamp format",
            "example": 1700098276
          },
          "completed-at": {
            "type": [
              "string",
              "null"
            ],
            "format": "date-time",
            "description": "The time the verification was completed in ISO 8601 format",
            "example": "2023-11-16T01:31:16.000Z"
          },
          "completed-at-ts": {
            "type": [
              "integer",
              "null"
            ],
            "description": "The time the verification was completed in Unix timestamp format",
            "example": 1700098276
          },
          "country-code": {
            "description": "ISO 3166-1 alpha 2 country code.",
            "example": "US",
            "type": [
              "string",
              "null"
            ]
          },
          "checks": {
            "items": {
              "properties": {
                "name": {
                  "examples": [
                    "aamva_identification_number_comparison",
                    "document_type_detection"
                  ],
                  "type": "string"
                },
                "status": {
                  "description": "Possible values:\n- passed\n- failed\n- not_applicable\n\nDo not assume this is a static enumeration; Persona may add new\nvalues in the future without a versioned update.",
                  "type": "string"
                },
                "reasons": {
                  "type": "array",
                  "description": "If applicable, reasons are the list of reasons explaining why the check failed or is not applicable.",
                  "items": {
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                },
                "requirement": {
                  "type": "string",
                  "description": "Possible values:\n- required\n- not_required\n- requires_retry\n\nDo not assume this is a static enumeration; Persona may add new\nvalues in the future without a versioned update."
                },
                "metadata": {
                  "description": "This is a free-form object containing relevant metadata to the processing and result of the check.",
                  "type": "object"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        }
      },
      "verification-shared-relationships": {
        "type": "object",
        "properties": {
          "inquiry": {
            "type": "object",
            "description": "The inquiry linked to the verification",
            "properties": {
              "data": {
                "type": [
                  "object",
                  "null"
                ],
                "properties": {
                  "id": {
                    "example": "inq_ABC123",
                    "type": "string"
                  },
                  "type": {
                    "const": "inquiry",
                    "description": "inquiry",
                    "type": "string"
                  }
                }
              }
            }
          },
          "template": {
            "type": "object",
            "properties": {
              "data": {
                "type": [
                  "object",
                  "null"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "const": "template",
                    "description": "template"
                  },
                  "id": {
                    "type": "string",
                    "example": "tmpl_ABC123"
                  }
                }
              }
            }
          },
          "inquiry-template-version": {
            "type": "object",
            "properties": {
              "data": {
                "type": [
                  "object",
                  "null"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "const": "inquiry-template-version",
                    "description": "inquiry-template-version"
                  },
                  "id": {
                    "type": "string",
                    "example": "itmplv_ABC123"
                  }
                }
              }
            }
          },
          "inquiry-template": {
            "type": "object",
            "properties": {
              "data": {
                "type": [
                  "object",
                  "null"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "const": "inquiry-template",
                    "description": "inquiry-template"
                  },
                  "id": {
                    "type": "string",
                    "example": "itmpl_ABC123"
                  }
                }
              }
            }
          },
          "verification-template": {
            "type": "object",
            "properties": {
              "data": {
                "type": [
                  "object",
                  "null"
                ],
                "properties": {
                  "type": {
                    "x-polymorphic": true,
                    "type": "string",
                    "example": "verification-template/aamva"
                  },
                  "id": {
                    "type": "string",
                    "example": "vtmpl_ABC123"
                  }
                }
              }
            }
          },
          "verification-template-version": {
            "type": "object",
            "properties": {
              "data": {
                "type": [
                  "object",
                  "null"
                ],
                "properties": {
                  "type": {
                    "x-polymorphic": true,
                    "type": "string",
                    "example": "verification-template-version/aamva"
                  },
                  "id": {
                    "type": "string",
                    "example": "vtmplv_ABC123"
                  }
                }
              }
            }
          }
        }
      },
      "verification-aamva": {
        "title": "AAMVA Verification",
        "description": "An AAMVA Verification",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "verification/aamva",
            "const": "verification/aamva"
          },
          "id": {
            "type": "string",
            "description": "The token of the verification",
            "example": "ver_ABC123"
          },
          "attributes": {
            "properties": {},
            "allOf": [
              {
                "$ref": "#/components/schemas/verification-shared-attributes"
              },
              {
                "type": "object",
                "properties": {
                  "name-first": {
                    "description": "Given or first name.",
                    "example": "Jane",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "name-last": {
                    "description": "Family or last name.",
                    "example": "Doe",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "birthdate": {
                    "description": "Birthdate, must be in the format \"YYYY-MM-DD\".",
                    "format": "date",
                    "example": "1994-04-12",
                    "type": [
                      "string"
                    ]
                  },
                  "issue-date": {
                    "type": "string",
                    "format": "date",
                    "example": "2021-05-27"
                  },
                  "expiration-date": {
                    "type": "string",
                    "format": "date",
                    "example": "2029-05-08"
                  },
                  "address-postal-code": {
                    "type": "string",
                    "example": "94115-1010"
                  },
                  "issuing-authority": {
                    "type": "string",
                    "example": "CA"
                  },
                  "identification-number": {
                    "type": "string",
                    "example": "B12345678"
                  }
                }
              }
            ]
          },
          "relationships": {
            "$ref": "#/components/schemas/verification-shared-relationships"
          }
        }
      },
      "extraction-responses": {
        "type": [
          "null",
          "array"
        ],
        "description": "A list of extractions resulting from processing the uploaded documents corresponding to the document's extraction configuration.",
        "items": {
          "type": "object",
          "properties": {
            "extraction-type": {
              "examples": [
                "guided",
                "unguided"
              ],
              "type": "string"
            },
            "field-name": {
              "type": "string"
            },
            "results": {
              "type": "array",
              "description": "A list of objects containing the actual value extracted and additional information relevant to the extraction result.",
              "items": {
                "properties": {
                  "value": {
                    "type": "string"
                  },
                  "page": {
                    "description": "The page number the extraction result is detected. Page is 1-indexed.",
                    "type": "integer"
                  },
                  "match-level": {
                    "description": "If extraction-type is guided, match-level describes the degree in which the extracted value is similar to the source value. Otherwise the match-level is full.",
                    "examples": [
                      "none",
                      "partial",
                      "full"
                    ],
                    "type": "string"
                  },
                  "metadata": {
                    "description": "This is a free-form object containing potentially helpful metadata on the extraction result.",
                    "type": [
                      "object",
                      "null"
                    ]
                  }
                },
                "type": "object"
              }
            }
          }
        }
      },
      "verification-document": {
        "title": "Document Verification",
        "description": "A Document Verification",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "verification/document",
            "const": "verification/document"
          },
          "id": {
            "type": "string",
            "description": "The token of the verification",
            "example": "ver_ABC123"
          },
          "attributes": {
            "properties": {},
            "allOf": [
              {
                "$ref": "#/components/schemas/verification-shared-attributes"
              },
              {
                "type": "object",
                "properties": {
                  "fields": {
                    "description": "JSON key-value pairs of field name to field value.",
                    "type": "object"
                  },
                  "files": {
                    "description": "The files uploaded to the associated document for processing.",
                    "items": {
                      "$ref": "#/components/schemas/file"
                    },
                    "type": "array"
                  },
                  "files-normalized": {
                    "items": {
                      "$ref": "#/components/schemas/file"
                    },
                    "type": "array"
                  },
                  "extraction-responses": {
                    "$ref": "#/components/schemas/extraction-responses"
                  }
                }
              }
            ]
          },
          "relationships": {
            "properties": {},
            "allOf": [
              {
                "$ref": "#/components/schemas/verification-shared-relationships"
              },
              {
                "type": "object",
                "properties": {
                  "document": {
                    "properties": {
                      "data": {
                        "properties": {
                          "id": {
                            "examples": [
                              "doc_ABC123"
                            ],
                            "type": "string"
                          },
                          "type": {
                            "x-polymorphic": true,
                            "examples": [
                              "document/generic"
                            ],
                            "type": "string"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  }
                }
              }
            ]
          }
        }
      },
      "verification-database": {
        "title": "Database Verification",
        "description": "A Database Verification",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "verification/database",
            "const": "verification/database"
          },
          "id": {
            "type": "string",
            "description": "The token of the verification",
            "example": "ver_ABC123"
          },
          "attributes": {
            "properties": {},
            "allOf": [
              {
                "$ref": "#/components/schemas/verification-shared-attributes"
              },
              {
                "$ref": "#/components/schemas/default-fields"
              },
              {
                "type": "object",
                "properties": {
                  "normalized-address-street-1": {
                    "description": "Normalized street name of residence address.",
                    "examples": [
                      "123 Main St"
                    ],
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "normalized-address-street-2": {
                    "description": "Normalized extension of residence address, usually apartment or suite number.",
                    "examples": [
                      "Apt 1"
                    ],
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "normalized-address-city": {
                    "description": "Normalized city of residence address. Not all international addresses use this attribute.",
                    "examples": [
                      "San Francisco"
                    ],
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "normalized-address-subdivision": {
                    "description": "Normalized state or subdivision of residence address. In the US, this should be the abbreviated name. Not all international addresses use this attribute.",
                    "examples": [
                      "CA"
                    ],
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "normalized-address-postal-code": {
                    "description": "Normalized ZIP or postal code of residence address. Not all international addresses use this attribute.",
                    "examples": [
                      "94111"
                    ],
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "identification-number": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "document-number": {
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                }
              }
            ]
          },
          "relationships": {
            "$ref": "#/components/schemas/verification-shared-relationships"
          }
        }
      },
      "verification-email-address": {
        "title": "Email Address Verification",
        "description": "An Email Address Verification",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "verification/email-address",
            "const": "verification/email-address"
          },
          "id": {
            "type": "string",
            "description": "The token of the verification",
            "example": "ver_ABC123"
          },
          "attributes": {
            "properties": {},
            "allOf": [
              {
                "$ref": "#/components/schemas/verification-shared-attributes"
              },
              {
                "type": "object",
                "properties": {
                  "email-address": {
                    "example": "jane@doe.com",
                    "type": "string"
                  },
                  "confirmation-code": {
                    "example": "12345",
                    "type": "string"
                  }
                }
              }
            ]
          },
          "relationships": {
            "$ref": "#/components/schemas/verification-shared-relationships"
          }
        }
      },
      "verification-government-id": {
        "type": "object",
        "title": "Government ID Verification",
        "description": "A Government ID Verification",
        "properties": {
          "type": {
            "type": "string",
            "description": "verification/government-id",
            "const": "verification/government-id"
          },
          "id": {
            "type": "string",
            "description": "The token of the verification",
            "example": "ver_ABC123"
          },
          "attributes": {
            "properties": {},
            "allOf": [
              {
                "$ref": "#/components/schemas/verification-shared-attributes"
              },
              {
                "type": "object",
                "properties": {
                  "entity-confidence-reasons": {
                    "items": {
                      "examples": [
                        "generic"
                      ],
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "entity-confidence-score": {
                    "default": 0,
                    "examples": [
                      100,
                      96.1831512451172
                    ],
                    "type": [
                      "number",
                      "null"
                    ]
                  },
                  "front-photo-url": {
                    "examples": [
                      "https://files.withpersona.com/..."
                    ],
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "back-photo-url": {
                    "examples": [
                      "https://files.withpersona.com/..."
                    ],
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "photo-urls": {
                    "items": {
                      "properties": {
                        "byte-size": {
                          "default": 0,
                          "examples": [
                            316802
                          ],
                          "type": "integer"
                        },
                        "normalized-url": {
                          "examples": [
                            "https://files.withpersona.com/..."
                          ],
                          "type": "string"
                        },
                        "original-urls": {
                          "items": {
                            "examples": [
                              "https://files.withpersona.com/..."
                            ],
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "page": {
                          "examples": [
                            "front"
                          ],
                          "type": "string"
                        },
                        "url": {
                          "examples": [
                            "https://files.withpersona.com/..."
                          ],
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "type": [
                      "array",
                      "null"
                    ]
                  },
                  "selfie-photo": {
                    "properties": {
                      "byte-size": {
                        "default": 0,
                        "examples": [
                          316802
                        ],
                        "type": "integer"
                      },
                      "url": {
                        "examples": [
                          "https://files.withpersona.com/..."
                        ],
                        "type": "string"
                      }
                    },
                    "type": [
                      "object",
                      "null"
                    ]
                  },
                  "selfie-photo-url": {
                    "examples": [
                      "https://files.withpersona.com/..."
                    ],
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "video-url": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "example": "https://files.withpersona.com/..."
                  },
                  "id-class": {
                    "examples": [
                      "dl"
                    ],
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "capture-method": {
                    "examples": [
                      "api"
                    ],
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "name-first": {
                    "examples": [
                      "ALEXANDER"
                    ],
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "name-middle": {
                    "examples": [
                      "AL"
                    ],
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "name-last": {
                    "examples": [
                      "SAMPLE"
                    ],
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "name-suffix": {
                    "examples": [
                      "III"
                    ],
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "birthdate": {
                    "examples": [
                      "2000-01-01"
                    ],
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "issuing-authority": {
                    "examples": [
                      "State Department"
                    ],
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "issuing-subdivision": {
                    "examples": [
                      "CA"
                    ],
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "nationality": {
                    "examples": [
                      "US"
                    ],
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "document-number": {
                    "examples": [
                      "123456"
                    ],
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "visa-status": {
                    "examples": [
                      "H1B"
                    ],
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "issue-date": {
                    "examples": [
                      "2010-01-01"
                    ],
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "expiration-date": {
                    "examples": [
                      "2020-01-01"
                    ],
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "designations": {
                    "examples": [
                      [
                        "probationary"
                      ]
                    ],
                    "type": [
                      "array",
                      "null"
                    ]
                  },
                  "birthplace": {
                    "examples": [
                      "Singapore"
                    ],
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "endorsements": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "height": {
                    "examples": [
                      "6'1\""
                    ],
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "sex": {
                    "examples": [
                      "M",
                      "F",
                      "X"
                    ],
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "restrictions": {
                    "examples": [
                      "A"
                    ],
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "vehicle-class": {
                    "examples": [
                      "C"
                    ],
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "identification-number": {
                    "examples": [
                      "123456"
                    ],
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                }
              },
              {
                "$ref": "#/components/schemas/address-fields"
              }
            ]
          },
          "relationships": {
            "properties": {},
            "allOf": [
              {
                "$ref": "#/components/schemas/verification-shared-relationships"
              },
              {
                "type": "object",
                "properties": {
                  "document": {
                    "properties": {
                      "data": {
                        "properties": {
                          "id": {
                            "examples": [
                              "doc_ABC123"
                            ],
                            "type": "string"
                          },
                          "type": {
                            "x-polymorphic": true,
                            "examples": [
                              "document/generic"
                            ],
                            "type": "string"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  }
                }
              }
            ]
          }
        }
      },
      "verification-phone-number": {
        "type": "object",
        "title": "Phone Number Verification",
        "description": "A Phone Number Verification",
        "properties": {
          "type": {
            "type": "string",
            "description": "verification/phone-number",
            "const": "verification/phone-number"
          },
          "id": {
            "type": "string",
            "description": "The token of the verification",
            "example": "ver_ABC123"
          },
          "attributes": {
            "properties": {},
            "allOf": [
              {
                "$ref": "#/components/schemas/verification-shared-attributes"
              },
              {
                "type": "object",
                "properties": {
                  "phone-number": {
                    "example": "+14169671111",
                    "type": "string"
                  },
                  "confirmation-code": {
                    "example": "12345",
                    "type": "string"
                  },
                  "metadata": {
                    "type": "object",
                    "properties": {
                      "telesign-risk-score": {
                        "type": "integer",
                        "example": 306
                      }
                    }
                  }
                }
              }
            ]
          },
          "relationships": {
            "$ref": "#/components/schemas/verification-shared-relationships"
          }
        }
      },
      "verification-selfie": {
        "type": "object",
        "title": "Selfie Verification",
        "description": "A Selfie Verification",
        "properties": {
          "type": {
            "type": "string",
            "description": "verification/selfie",
            "const": "verification/selfie"
          },
          "id": {
            "type": "string",
            "description": "The token of the verification",
            "example": "ver_ABC123"
          },
          "attributes": {
            "properties": {},
            "allOf": [
              {
                "$ref": "#/components/schemas/verification-shared-attributes"
              },
              {
                "type": "object",
                "properties": {
                  "capture-method": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "description": "Possible values:\n- photo\n- video\n\nDo not assume this is a static enumeration; Persona may add new\nvalues in the future without a versioned update."
                  },
                  "center-photo-face-coordinates": {
                    "type": [
                      "object",
                      "null"
                    ],
                    "properties": {
                      "top-left": {
                        "type": "array",
                        "items": {
                          "type": "number"
                        },
                        "example": [
                          0.2,
                          0.5
                        ],
                        "minItems": 2,
                        "maxItems": 2
                      },
                      "top-right": {
                        "type": "array",
                        "items": {
                          "type": "number"
                        },
                        "example": [
                          0.5,
                          0.5
                        ],
                        "minItems": 2,
                        "maxItems": 2
                      },
                      "bottom-left": {
                        "type": "array",
                        "items": {
                          "type": "number"
                        },
                        "example": [
                          0.2,
                          0.7
                        ],
                        "minItems": 2,
                        "maxItems": 2
                      },
                      "bottom-right": {
                        "type": "array",
                        "items": {
                          "type": "number"
                        },
                        "example": [
                          0.5,
                          0.7
                        ],
                        "minItems": 2,
                        "maxItems": 2
                      }
                    }
                  },
                  "center-photo-url": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "example": "https://files.withpersona.com/..."
                  },
                  "document-similarity-score": {
                    "type": [
                      "number",
                      "null"
                    ]
                  },
                  "entity-confidence-reasons": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "left-photo-url": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "example": "https://files.withpersona.com/..."
                  },
                  "photo-urls": {
                    "items": {
                      "properties": {
                        "byte-size": {
                          "default": 0,
                          "example": 316802,
                          "type": "integer"
                        },
                        "page": {
                          "type": "string",
                          "description": "Possible values:\n- left_photo\n- center_photo\n- right_photo\n\nDo not assume this is a static enumeration; Persona may add\nnew values in the future without a versioned update."
                        },
                        "url": {
                          "example": "https://files.withpersona.com/...",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "right-photo-url": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "example": "https://files.withpersona.com/..."
                  },
                  "selfie-similarity-score-left": {
                    "type": [
                      "number",
                      "null"
                    ]
                  },
                  "selfie-similarity-score-right": {
                    "type": [
                      "number",
                      "null"
                    ]
                  },
                  "video-url": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "example": "https://files.withpersona.com/..."
                  }
                }
              }
            ]
          },
          "relationships": {
            "$ref": "#/components/schemas/verification-shared-relationships"
          }
        }
      },
      "verification": {
        "type": "object",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "verification/aamva": "#/components/schemas/verification-aamva",
            "verification/document": "#/components/schemas/verification-document",
            "verification/database": "#/components/schemas/verification-database",
            "verification/email-address": "#/components/schemas/verification-email-address",
            "verification/government-id": "#/components/schemas/verification-government-id",
            "verification/phone-number": "#/components/schemas/verification-phone-number",
            "verification/selfie": "#/components/schemas/verification-selfie"
          }
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/verification-aamva"
          },
          {
            "$ref": "#/components/schemas/verification-document"
          },
          {
            "$ref": "#/components/schemas/verification-database"
          },
          {
            "$ref": "#/components/schemas/verification-email-address"
          },
          {
            "$ref": "#/components/schemas/verification-government-id"
          },
          {
            "$ref": "#/components/schemas/verification-phone-number"
          },
          {
            "$ref": "#/components/schemas/verification-selfie"
          }
        ]
      },
      "device": {
        "type": "object",
        "properties": {
          "type": {
            "const": "device",
            "description": "device",
            "type": "string"
          },
          "id": {
            "type": "string",
            "description": "Unique identifier for this Device. Starts with `dev_`.",
            "examples": [
              "dev_ABC123"
            ]
          },
          "attributes": {
            "type": "object",
            "properties": {
              "device-vendor-id": {
                "type": [
                  "string",
                  "null"
                ],
                "examples": [
                  "1a2b3c4d-5e6f-7g8h-9ijk-1A2B3C4D5E6F"
                ]
              },
              "device-fingerprint": {
                "type": [
                  "string",
                  "null"
                ],
                "examples": [
                  "1a2b3c4d5e6f7g8h9ijklmnopqrstuvw"
                ]
              },
              "browser-fingerprint": {
                "type": [
                  "string",
                  "null"
                ],
                "examples": [
                  "1a2b3c4d5e6f7g8h9ijk"
                ]
              }
            }
          }
        }
      },
      "document-shared-attributes": {
        "type": "object",
        "properties": {
          "status": {
            "description": "Possible values:\n- initiated\n- submitted\n- processed\n- errored\n\nDo not assume this is a static enumeration; Persona may add new values in\nthe future without a versioned update.",
            "type": "string"
          },
          "created-at": {
            "examples": [
              "2020-04-18T15:43:25.000Z"
            ],
            "type": "string",
            "format": "date-time"
          },
          "processed-at": {
            "examples": [
              "2020-04-18T15:43:25.000Z"
            ],
            "type": [
              "null",
              "string"
            ],
            "format": "date-time"
          },
          "processed-at-ts": {
            "examples": [
              1593047530
            ],
            "type": [
              "null",
              "integer"
            ]
          }
        }
      },
      "document-shared-relationships": {
        "properties": {
          "inquiry": {
            "properties": {
              "data": {
                "properties": {
                  "id": {
                    "examples": [
                      "inq_jdRz9RHNRzkjxUqZApHwX1ZU"
                    ],
                    "type": "string"
                  },
                  "type": {
                    "const": "inquiry",
                    "description": "inquiry",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          },
          "template": {
            "properties": {
              "data": {
                "properties": {
                  "id": {
                    "examples": [
                      "tmpl_sXu8UYP3L1xQLAB9XCRUQA5g"
                    ],
                    "type": "string"
                  },
                  "type": {
                    "const": "template",
                    "description": "template",
                    "type": "string"
                  }
                },
                "type": [
                  "null",
                  "object"
                ]
              }
            },
            "type": "object"
          },
          "inquiry-template-version": {
            "properties": {
              "data": {
                "properties": {
                  "id": {
                    "examples": [
                      "itmplv_1ivdvZUKPLAtWgsQdEvmi6wj"
                    ],
                    "type": "string"
                  },
                  "type": {
                    "const": "inquiry-template-version",
                    "description": "inquiry-template-version",
                    "type": "string"
                  }
                },
                "type": [
                  "null",
                  "object"
                ]
              }
            },
            "type": "object"
          },
          "inquiry-template": {
            "properties": {
              "data": {
                "properties": {
                  "id": {
                    "examples": [
                      "itmpl_mNKRtWCMWB9Lbccc85DjgJnK"
                    ],
                    "type": "string"
                  },
                  "type": {
                    "const": "inquiry-template",
                    "description": "inquiry-template",
                    "type": "string"
                  }
                },
                "type": [
                  "null",
                  "object"
                ]
              }
            },
            "type": "object"
          },
          "document-files": {
            "properties": {
              "data": {
                "items": {
                  "properties": {
                    "id": {
                      "examples": [
                        "docf_aNBCzPCLPC2Ladef86DjbInK"
                      ],
                      "type": "string"
                    },
                    "type": {
                      "const": "document-file",
                      "description": "document-file",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "document-generic": {
        "type": "object",
        "description": "A Document Generic object",
        "properties": {
          "id": {
            "examples": [
              "doc_8HfuATwEZbXT532wv6pzWMTN"
            ],
            "type": "string"
          },
          "type": {
            "type": "string",
            "const": "document/generic",
            "description": "document/generic"
          },
          "attributes": {
            "properties": {},
            "allOf": [
              {
                "$ref": "#/components/schemas/document-shared-attributes"
              },
              {
                "type": "object",
                "properties": {
                  "kind": {
                    "examples": [
                      "document",
                      "proof_of_employment"
                    ],
                    "type": "string"
                  },
                  "files": {
                    "description": "The files uploaded to the document for processing.",
                    "items": {
                      "$ref": "#/components/schemas/file"
                    },
                    "type": "array"
                  },
                  "files-normalized": {
                    "items": {
                      "$ref": "#/components/schemas/file"
                    },
                    "type": "array"
                  },
                  "extraction-responses": {
                    "$ref": "#/components/schemas/extraction-responses"
                  },
                  "document-type": {
                    "description": "The classification of the document if detected. If unable to be detected, this will be other.",
                    "examples": [
                      "bank_statement",
                      "standard_utility_bill",
                      "other"
                    ],
                    "type": [
                      "null",
                      "string"
                    ]
                  },
                  "fields": {
                    "description": "JSON key-value pairs of field name to field value. Exact schema depends on the configuration of your template.",
                    "type": "object",
                    "additionalProperties": true
                  }
                }
              }
            ],
            "type": "object"
          },
          "relationships": {
            "$ref": "#/components/schemas/document-shared-relationships"
          }
        }
      },
      "inquiry-template": {
        "type": "object",
        "description": "An Inquiry Template object",
        "properties": {
          "type": {
            "const": "inquiry-template",
            "description": "inquiry-template",
            "type": "string"
          },
          "id": {
            "examples": [
              "itmpl_ABC123"
            ],
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "status": {
                "description": "Possible values:\n- active\n- inactive\n\nDo not assume this is a static enumeration; Persona may add new values\nin the future without a versioned update.",
                "examples": [
                  "active"
                ],
                "type": "string"
              },
              "name": {
                "examples": [
                  "Government ID Front and Back"
                ],
                "type": "string"
              }
            }
          },
          "relationships": {
            "properties": {
              "latest-published-version": {
                "description": "The latest published template configuration. If no version ID is\nexplicitly specified, the latest published version will be used.",
                "properties": {
                  "data": {
                    "properties": {
                      "type": {
                        "type": "string",
                        "const": "inquiry-template-version",
                        "description": "inquiry-template-version"
                      },
                      "id": {
                        "type": "string",
                        "examples": [
                          "itmplv_ABC123"
                        ]
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          }
        }
      },
      "inquiry-template-version": {
        "type": "object",
        "description": "An Inquiry Template Version object",
        "properties": {
          "type": {
            "type": "string",
            "const": "inquiry-template-version",
            "description": "inquiry-template-version"
          },
          "id": {
            "type": "string",
            "examples": [
              "itmplv_HAVumeSgCxWxhVb8tTRjaiUB"
            ]
          },
          "attributes": {
            "type": "object",
            "properties": {
              "name-display": {
                "type": "string",
                "examples": [
                  "Collect Government ID",
                  ""
                ]
              },
              "status": {
                "description": "Possible values:\n- published\n- draft\n\nDo not assume this is a static enumeration; Persona may add new values\nin the future without a versioned update.",
                "type": "string",
                "examples": [
                  "published"
                ]
              },
              "enabled-locales": {
                "type": "array",
                "items": {
                  "type": "string",
                  "examples": [
                    "ar-EG",
                    "ja",
                    "fr",
                    "en-US"
                  ]
                }
              },
              "created-at": {
                "type": "string",
                "format": "date-time",
                "examples": [
                  "2022-11-09T00:22:59.828Z"
                ]
              },
              "updated-at": {
                "type": [
                  "string",
                  "null"
                ],
                "format": "date-time",
                "examples": [
                  "2023-02-15T23:15:06.034Z"
                ]
              },
              "published-at": {
                "type": [
                  "string",
                  "null"
                ],
                "format": "date-time",
                "examples": [
                  "2022-11-09T00:29:41.000Z"
                ]
              },
              "theme": {
                "type": "object",
                "properties": {
                  "border-radius": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "border-radius-modal": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "border-width": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "button-background-image": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "button-font-weight": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "button-position": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "button-shadow-strength": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "button-text-transform": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "color-button-primary": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "color-button-secondary": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "color-button-secondary-fill": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "color-button-primary-fill-disabled": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "color-button-secondary-fill-disabled": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "color-error": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "color-font": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "color-font-button-primary": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "color-font-button-secondary": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "color-font-small": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "color-font-title": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "color-icon-header": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "color-input-background": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "color-input-border": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "color-link": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "color-modal-background": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "color-primary": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "color-progress-bar": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "color-success": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "color-warning": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "color-divider": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "color-dropdown-background": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "color-dropdown-option": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "font-family": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "font-family-title": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "font-url": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "font-size-body": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "font-size-header": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "font-size-small": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "line-height-body": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "line-height-header": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "line-height-small": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "header-font-weight": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "header-margin-bottom": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "icon-color-primary": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "icon-color-highlight": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "icon-color-stroke": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "icon-color-background": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "icon-color-government-id-type": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "icon-style": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "input-style": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "page-transition": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "text-align": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "text-decoration-line-link": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "us-state-input-method": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "vertical-options-style": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "government-id-pictograph-position": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "id-back-pictograph-height": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "id-back-pictograph-url": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "id-front-pictograph-height": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "id-front-pictograph-url": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "passport-front-pictograph-height": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "passport-front-pictograph-url": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "passport-signature-pictograph-height": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "passport-signature-pictograph-url": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "government-id-select-pictograph-height": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "government-id-select-pictograph-url": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "device-handoff-terms-text-position": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "selfie-pictograph-url": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "selfie-pictograph-height": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "selfie-center-pictograph-url": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "selfie-center-pictograph-height": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "selfie-left-pictograph-url": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "selfie-left-pictograph-height": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "selfie-right-pictograph-url": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "selfie-right-pictograph-height": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "document-pictograph-position": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "document-pictograph-height": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "document-pictograph-url": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "camera-support-pictograph-height": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "camera-support-pictograph-url": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "loading-pictograph-height": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "loading-pictograph-url": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "navbar-logo-display": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "logo-url": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "logo": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "logo-data": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "logo-filename": {
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                }
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": {
              "inquiry-template": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "const": "inquiry-template",
                        "description": "inquiry-template"
                      },
                      "id": {
                        "type": "string",
                        "examples": [
                          "itmpl_srQQ2Ui2gvNY353u65vD61gr"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "template": {
        "type": "object",
        "description": "An Template object for legacy inquiries",
        "properties": {
          "type": {
            "type": "string",
            "const": "template",
            "description": "template"
          },
          "id": {
            "examples": [
              "tmpl_jGTjQgGMyei68sdf8NyCeDMh"
            ],
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "name": {
                "examples": [
                  "Government ID Front and Back"
                ],
                "type": "string"
              }
            }
          }
        }
      },
      "document-file": {
        "type": "object",
        "properties": {
          "type": {
            "const": "document-file",
            "description": "document-file",
            "type": "string"
          },
          "id": {
            "examples": [
              "docf_5FrMN7NAGgFdGGysCDd7DaBW"
            ],
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "name": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "capture-method": {
                "type": "string",
                "description": "Possible values:\n- auto\n- manual\n- upload\n- api\n- live\n\nDo not assume this is a static enumeration; Persona may add new values\nin the future without a versioned update."
              },
              "originals": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/file"
                }
              }
            }
          }
        }
      },
      "document-included-objects": {
        "description": "Objects that _may_ be returned if specified via the `include` query parameter in the request.",
        "type": "array",
        "items": {
          "discriminator": {
            "propertyName": "type",
            "mapping": {
              "inquiry": "#/components/schemas/inquiry",
              "inquiry-template": "#/components/schemas/inquiry-template",
              "inquiry-template-version": "#/components/schemas/inquiry-template-version",
              "template": "#/components/schemas/template",
              "document-file": "#/components/schemas/document-file"
            }
          },
          "anyOf": [
            {
              "$ref": "#/components/schemas/inquiry"
            },
            {
              "$ref": "#/components/schemas/inquiry-template"
            },
            {
              "$ref": "#/components/schemas/inquiry-template-version"
            },
            {
              "$ref": "#/components/schemas/template"
            },
            {
              "$ref": "#/components/schemas/document-file"
            }
          ]
        }
      },
      "document-government-id": {
        "type": "object",
        "description": "A Document Government ID object",
        "properties": {
          "id": {
            "examples": [
              "doc_8HfuATwEZbXT532wv6pzWMTN"
            ],
            "type": "string"
          },
          "type": {
            "type": "string",
            "const": "document/government-id",
            "description": "document/government-id"
          },
          "attributes": {
            "properties": {},
            "allOf": [
              {
                "$ref": "#/components/schemas/document-shared-attributes"
              },
              {
                "type": "object",
                "properties": {
                  "front-photo": {
                    "$ref": "#/components/schemas/file"
                  },
                  "back-photo": {
                    "$ref": "#/components/schemas/file"
                  },
                  "selfie-photo": {
                    "$ref": "#/components/schemas/file"
                  },
                  "id-class": {
                    "type": [
                      "null",
                      "string"
                    ],
                    "examples": [
                      "dl",
                      "pp"
                    ]
                  },
                  "name-first": {
                    "description": "Given or first name.",
                    "examples": [
                      "Jane"
                    ],
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "name-middle": {
                    "description": "Middle name.",
                    "examples": [
                      "Marie"
                    ],
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "name-last": {
                    "description": "Family or last name.",
                    "examples": [
                      "Doe"
                    ],
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "name-suffix": {
                    "examples": [
                      "III",
                      "Jr."
                    ],
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "birthdate": {
                    "format": "date",
                    "examples": [
                      "1994-04-12"
                    ],
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "issuing-authority": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "issuing-subdivision": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "nationality": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "document-number": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "visa-status": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "issue-date": {
                    "format": "date",
                    "examples": [
                      "2022-06-01"
                    ],
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "expiration-date": {
                    "format": "date",
                    "examples": [
                      "2025-02-20"
                    ],
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "designations": {
                    "type": [
                      "array",
                      "null"
                    ],
                    "items": {
                      "type": "string",
                      "description": "Possible values:\n- commercial\n- global_entry\n- learners\n- limited_term\n- nexus\n- permanent_resident\n- provisional\n- real_id\n- restricted\n- temporary\n- veteran\n- work_not_permitted\n\nDo not assume this is a static enumeration; Persona may add new\nvalues in the future without a versioned update."
                    }
                  },
                  "birthplace": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "height": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "sex": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "endorsements": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "restrictions": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "vehicle-class": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "identification-number": {
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                }
              },
              {
                "$ref": "#/components/schemas/address-fields"
              }
            ],
            "type": "object"
          },
          "relationships": {
            "$ref": "#/components/schemas/document-shared-relationships"
          }
        }
      },
      "document-government-id-nfc": {
        "type": "object",
        "description": "A Document Government ID NFC object",
        "properties": {
          "id": {
            "examples": [
              "doc_8HfuATwEZbXT532wv6pzWMTN"
            ],
            "type": "string"
          },
          "type": {
            "type": "string",
            "const": "document/government-id-nfc",
            "description": "document/government-id-nfc"
          },
          "attributes": {
            "$ref": "#/components/schemas/document-shared-attributes"
          },
          "relationships": {
            "$ref": "#/components/schemas/document-shared-relationships"
          }
        }
      },
      "document-mobile-drivers-license": {
        "type": "object",
        "description": "A Document Mobile Drivers License object",
        "properties": {
          "id": {
            "examples": [
              "doc_8HfuATwEZbXT532wv6pzWMTN"
            ],
            "type": "string"
          },
          "type": {
            "type": "string",
            "const": "document/mobile-drivers-license",
            "description": "document/mobile-drivers-license"
          },
          "attributes": {
            "$ref": "#/components/schemas/document-shared-attributes"
          },
          "relationships": {
            "$ref": "#/components/schemas/document-shared-relationships"
          }
        }
      },
      "document": {
        "type": "object",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "document/generic": "#/components/schemas/document-generic",
            "document/government-id": "#/components/schemas/document-government-id",
            "document/government-id-nfc": "#/components/schemas/document-government-id-nfc",
            "document/mobile-drivers-license": "#/components/schemas/document-mobile-drivers-license"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/document-generic"
          },
          {
            "$ref": "#/components/schemas/document-government-id"
          },
          {
            "$ref": "#/components/schemas/document-government-id-nfc"
          },
          {
            "$ref": "#/components/schemas/document-mobile-drivers-license"
          }
        ]
      },
      "event": {
        "type": "object",
        "description": "An Event object",
        "properties": {
          "type": {
            "type": "string",
            "const": "event",
            "description": "event"
          },
          "id": {
            "type": "string",
            "examples": [
              "evt_ABC123"
            ]
          },
          "attributes": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "examples": [
                  "inquiry.expired",
                  "workflow-run.created",
                  "account.tag-added"
                ]
              },
              "payload": {
                "description": "The entire serialized entity that triggered the event",
                "type": "object",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "x-polymorphic": true,
                        "type": "string",
                        "examples": [
                          "inquiry",
                          "workflow-run",
                          "account"
                        ]
                      },
                      "id": {
                        "type": "string",
                        "examples": [
                          "inq_ABC123",
                          "wfr_ABC123",
                          "act_ABC123"
                        ]
                      },
                      "attributes": {
                        "type": "object",
                        "additionalProperties": true
                      }
                    }
                  }
                }
              },
              "created-at": {
                "type": "string",
                "format": "date-time",
                "examples": [
                  "2023-09-23T17:14:01.918Z"
                ]
              }
            }
          }
        }
      },
      "inquiry-fields": {
        "description": "JSON key-value pairs of field name to field value. Schema is defined by your Inquiry Template.",
        "oneOf": [
          {
            "properties": {},
            "allOf": [
              {
                "$ref": "#/components/schemas/default-fields"
              },
              {
                "type": "object",
                "properties": {
                  "address-country-code": {
                    "description": "optional",
                    "examples": [
                      "US",
                      "AU",
                      "GB"
                    ],
                    "type": "string"
                  }
                },
                "additionalProperties": true
              }
            ]
          },
          {
            "type": "null"
          }
        ]
      },
      "selfie": {
        "type": "object",
        "description": "A Selfie object",
        "properties": {
          "type": {
            "x-polymorphic": true,
            "examples": [
              "selfie/profile-and-center",
              "selfie/center-only",
              "selfie/configurable-poses"
            ],
            "type": "string",
            "description": "Possible values:\n- selfie/profile-and-center\n- selfie/center-only\n- selfie/configurable-poses\n\nDo not assume this is a static enumeration; Persona may add new values in\nthe future without a versioned update."
          },
          "id": {
            "description": "Unique identifier for this Selfie object. Starts with `self_`.",
            "examples": [
              "self_5FrMN7NAGgFdGGysCDd7DaBW"
            ],
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "description": "Possible values:\n- initiated\n- submitted\n- processed\n- errored\n\nDo not assume this is a static enumeration; Persona may add new values\nin the future without a versioned update.",
                "examples": [
                  "processed"
                ]
              },
              "created-at": {
                "type": "string",
                "format": "date-time",
                "examples": [
                  "2020-07-12T17:16:54.656Z"
                ]
              },
              "processed-at": {
                "type": "string",
                "format": "date-time",
                "examples": [
                  "2020-07-12T17:16:54.656Z"
                ]
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": {
              "inquiry": {
                "properties": {
                  "data": {
                    "properties": {
                      "id": {
                        "examples": [
                          "inq_jdRz9RHNRzkjxUqZApHwX1ZU"
                        ],
                        "type": "string"
                      },
                      "type": {
                        "const": "inquiry",
                        "description": "inquiry",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          }
        }
      },
      "inquiry-session": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "const": "inquiry-session",
            "description": "inquiry-session"
          },
          "id": {
            "type": "string",
            "examples": [
              "iqse_ABC123"
            ]
          },
          "attributes": {
            "type": "object",
            "properties": {
              "status": {
                "description": "Possible values:\n- new\n- active\n- expired\n\nDo not assume this is a static enumeration; Persona may add new values\nin the future without a versioned update.",
                "type": "string",
                "examples": [
                  "expired"
                ]
              },
              "created-at": {
                "type": "string",
                "format": "date-time",
                "examples": [
                  "2023-09-22T17:13:50.000Z"
                ]
              },
              "started-at": {
                "type": "string",
                "format": "date-time",
                "examples": [
                  "2023-09-22T17:14:50.000Z"
                ]
              },
              "expired-at": {
                "type": "string",
                "format": "date-time",
                "examples": [
                  "2023-09-23T17:13:50.000Z"
                ]
              },
              "ip-address": {
                "type": "string",
                "examples": [
                  "139.178.128.13"
                ]
              },
              "user-agent": {
                "type": "string",
                "examples": [
                  "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36"
                ]
              },
              "os-name": {
                "type": "string",
                "examples": [
                  "iOS"
                ]
              },
              "os-full-version": {
                "type": "string",
                "examples": [
                  "17.0.1"
                ]
              },
              "device-type": {
                "type": "string",
                "examples": [
                  "smartphone",
                  "desktop"
                ]
              },
              "device-name": {
                "type": [
                  "string",
                  "null"
                ],
                "examples": [
                  "Apple iPhone11,2"
                ]
              },
              "browser-name": {
                "type": [
                  "string",
                  "null"
                ],
                "examples": [
                  "Chrome"
                ]
              },
              "browser-full-version": {
                "type": [
                  "string",
                  "null"
                ],
                "examples": [
                  "113.0.0.0"
                ]
              },
              "mobile-sdk-name": {
                "type": [
                  "string",
                  "null"
                ],
                "examples": [
                  "Inquiry"
                ]
              },
              "mobile-sdk-full-version": {
                "type": [
                  "string",
                  "null"
                ],
                "examples": [
                  "0.0.1-SNAPSHOT"
                ]
              },
              "device-handoff-method": {
                "type": [
                  "string",
                  "null"
                ],
                "examples": [
                  "email",
                  "sms",
                  "qr"
                ]
              },
              "is-proxy": {
                "type": "boolean"
              },
              "is-tor": {
                "type": "boolean"
              },
              "is-datacenter": {
                "type": "boolean"
              },
              "threat-level": {
                "type": "string",
                "examples": [
                  "low",
                  "medium"
                ]
              },
              "country-code": {
                "type": "string",
                "examples": [
                  "US"
                ]
              },
              "country-name": {
                "type": "string",
                "examples": [
                  "United States of America"
                ]
              },
              "region-code": {
                "type": "string",
                "examples": [
                  "CA"
                ]
              },
              "region-name": {
                "type": "string",
                "examples": [
                  "California"
                ]
              },
              "latitude": {
                "type": "number",
                "examples": [
                  37.32300186
                ]
              },
              "longitude": {
                "type": "number",
                "examples": [
                  -122.03218079
                ]
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": {
              "inquiry": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "const": "inquiry",
                        "description": "inquiry"
                      },
                      "id": {
                        "type": "string",
                        "examples": [
                          "inq_ABC123"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "inquiry-included-objects": {
        "type": "array",
        "items": {
          "discriminator": {
            "propertyName": "type",
            "mapping": {
              "account": "#/components/schemas/account",
              "document/generic": "#/components/schemas/document-generic",
              "document/government-id": "#/components/schemas/document-government-id",
              "document/government-id-nfc": "#/components/schemas/document-government-id-nfc",
              "document/mobile-drivers-license": "#/components/schemas/document-mobile-drivers-license",
              "template": "#/components/schemas/template",
              "inquiry-template": "#/components/schemas/inquiry-template",
              "inquiry-template-version": "#/components/schemas/inquiry-template-version",
              "report/watchlist": "#/components/schemas/report-watchlist",
              "report/crypto-address-watchlist": "#/components/schemas/report-crypto-address-watchlist",
              "report/adverse-media": "#/components/schemas/report-adverse-media",
              "report/address-lookup": "#/components/schemas/report-address-lookup",
              "report/politically-exposed-person": "#/components/schemas/report-politically-exposed-person",
              "report/email-address": "#/components/schemas/report-email-address",
              "report/phone-number": "#/components/schemas/report-phone-risk",
              "report/social-media": "#/components/schemas/report-social-media",
              "report/business-lookup": "#/components/schemas/report-business-lookup",
              "report/sentilink-scores": "#/components/schemas/report-sentilink-scores",
              "selfie": "#/components/schemas/selfie",
              "inquiry-session": "#/components/schemas/inquiry-session",
              "verification/aamva": "#/components/schemas/verification-aamva",
              "verification/document": "#/components/schemas/verification-document",
              "verification/database": "#/components/schemas/verification-database",
              "verification/email-address": "#/components/schemas/verification-email-address",
              "verification/government-id": "#/components/schemas/verification-government-id",
              "verification/phone-number": "#/components/schemas/verification-phone-number",
              "verification/selfie": "#/components/schemas/verification-selfie"
            }
          },
          "anyOf": [
            {
              "$ref": "#/components/schemas/account"
            },
            {
              "$ref": "#/components/schemas/document-generic"
            },
            {
              "$ref": "#/components/schemas/document-government-id"
            },
            {
              "$ref": "#/components/schemas/document-government-id-nfc"
            },
            {
              "$ref": "#/components/schemas/document-mobile-drivers-license"
            },
            {
              "$ref": "#/components/schemas/template"
            },
            {
              "$ref": "#/components/schemas/inquiry-template"
            },
            {
              "$ref": "#/components/schemas/inquiry-template-version"
            },
            {
              "$ref": "#/components/schemas/report-watchlist"
            },
            {
              "$ref": "#/components/schemas/report-crypto-address-watchlist"
            },
            {
              "$ref": "#/components/schemas/report-adverse-media"
            },
            {
              "$ref": "#/components/schemas/report-address-lookup"
            },
            {
              "$ref": "#/components/schemas/report-politically-exposed-person"
            },
            {
              "$ref": "#/components/schemas/report-email-address"
            },
            {
              "$ref": "#/components/schemas/report-phone-risk"
            },
            {
              "$ref": "#/components/schemas/report-social-media"
            },
            {
              "$ref": "#/components/schemas/report-business-lookup"
            },
            {
              "$ref": "#/components/schemas/report-sentilink-scores"
            },
            {
              "$ref": "#/components/schemas/selfie"
            },
            {
              "$ref": "#/components/schemas/inquiry-session"
            },
            {
              "$ref": "#/components/schemas/verification-aamva"
            },
            {
              "$ref": "#/components/schemas/verification-document"
            },
            {
              "$ref": "#/components/schemas/verification-database"
            },
            {
              "$ref": "#/components/schemas/verification-email-address"
            },
            {
              "$ref": "#/components/schemas/verification-government-id"
            },
            {
              "$ref": "#/components/schemas/verification-phone-number"
            },
            {
              "$ref": "#/components/schemas/verification-selfie"
            }
          ]
        }
      },
      "inquiry-status-action": {
        "title": "Inquiry Status Action",
        "type": "object",
        "properties": {
          "type": {
            "description": "The type of simulate action. See [valid actions](https://docs.withpersona.com/docs/integration-testing#inquiry-status).",
            "type": "string",
            "enum": [
              "start_inquiry",
              "complete_inquiry",
              "fail_inquiry",
              "expire_inquiry",
              "mark_for_review_inquiry",
              "approve_inquiry",
              "decline_inquiry"
            ]
          }
        },
        "required": [
          "type"
        ]
      },
      "create-verification-action": {
        "title": "Create Verification Action",
        "type": "object",
        "properties": {
          "type": {
            "description": "The type of simulate action. See [valid actions](https://docs.withpersona.com/docs/integration-testing#creating-verification-with-status).",
            "type": "string",
            "enum": [
              "create_passed_verification",
              "create_failed_verification"
            ]
          },
          "data": {
            "type": "object",
            "properties": {
              "verification-template-id": {
                "description": "The token of the Verification Template. See [supported Verification types](https://docs.withpersona.com/docs/integration-testing#supported-verification-types).",
                "type": "string"
              }
            },
            "required": [
              "verification-template-id"
            ]
          }
        },
        "required": [
          "type",
          "data"
        ]
      },
      "list-item-shared-attributes": {
        "type": "object",
        "properties": {
          "status": {
            "description": "Possible values:\n- pending\n- active\n- archived\n\nDo not assume this is a static enumeration; Persona may add new values in\nthe future without a versioned update.",
            "type": "string"
          },
          "archived-at": {
            "examples": [
              "2020-04-18T15:43:25.000Z"
            ],
            "type": [
              "string",
              "null"
            ],
            "format": "date-time"
          },
          "updated-at": {
            "examples": [
              "2020-04-18T15:43:25.000Z"
            ],
            "type": [
              "null",
              "string"
            ],
            "format": "date-time"
          },
          "created-at": {
            "examples": [
              "2020-04-18T15:43:25.000Z"
            ],
            "type": [
              "string"
            ],
            "format": "date-time"
          },
          "match-count": {
            "default": 0,
            "examples": [
              0
            ],
            "type": "integer"
          }
        }
      },
      "list-item-browser-fingerprint": {
        "title": "Browser Fingerprint List Item",
        "description": "A Browser Fingerprint List Item",
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier for this list item. Starts with `libf_`.",
            "examples": [
              "libf_N6PqYkfSqeqiQYWoeHA3GGDo"
            ],
            "type": "string"
          },
          "type": {
            "const": "list-item/browser-fingerprint",
            "description": "list-item/browser-fingerprint",
            "type": "string"
          },
          "attributes": {
            "properties": {},
            "allOf": [
              {
                "$ref": "#/components/schemas/list-item-shared-attributes"
              },
              {
                "type": "object",
                "properties": {
                  "value": {
                    "examples": [
                      "3082c312c9bfc8f0a43bc7173b18afe6"
                    ],
                    "type": "string"
                  }
                }
              }
            ]
          },
          "relationships": {
            "properties": {
              "creator": {
                "properties": {
                  "data": {}
                },
                "type": "object"
              }
            },
            "type": "object"
          }
        }
      },
      "list-item-country": {
        "title": "Country List Item",
        "description": "A Country List Item",
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier for this list item. Starts with `lic_`.",
            "examples": [
              "lic_wt5cgLbSi7twJ8itK7jxCs8q"
            ],
            "type": "string"
          },
          "type": {
            "type": "string",
            "const": "list-item/country",
            "description": "list-item/country"
          },
          "attributes": {
            "properties": {},
            "allOf": [
              {
                "$ref": "#/components/schemas/list-item-shared-attributes"
              },
              {
                "type": "object",
                "properties": {
                  "country-code": {
                    "description": "Alpha-2 country code",
                    "type": "string"
                  }
                }
              }
            ]
          },
          "relationships": {
            "properties": {
              "creator": {
                "properties": {
                  "data": {}
                },
                "type": "object"
              }
            },
            "type": "object"
          }
        }
      },
      "list-item-email-address": {
        "title": "Email Address List Item",
        "description": "An Email Address List Item",
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier for this list item. Starts with `liea_`.",
            "examples": [
              "liea_wt5cgLbSi7twJ8itK7jxCs8q"
            ],
            "type": "string"
          },
          "type": {
            "const": "list-item/email-address",
            "description": "list-item/email-address",
            "type": "string"
          },
          "attributes": {
            "properties": {},
            "allOf": [
              {
                "$ref": "#/components/schemas/list-item-shared-attributes"
              },
              {
                "type": "object",
                "properties": {
                  "match-type": {
                    "examples": [
                      "email_address"
                    ],
                    "type": "string"
                  },
                  "value": {
                    "examples": [
                      "joe-imposter@yahoo.com"
                    ],
                    "type": "string"
                  }
                }
              }
            ]
          },
          "relationships": {
            "properties": {
              "creator": {
                "properties": {
                  "data": {}
                },
                "type": "object"
              }
            },
            "type": "object"
          }
        }
      },
      "list-item-face": {
        "title": "Face List Item",
        "description": "A Face List Item",
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier for this list item. Starts with `lifc_`.",
            "examples": [
              "lifc_FVrbLriSXNwPqMogu8vvuTi8"
            ],
            "type": "string"
          },
          "type": {
            "type": "string",
            "const": "list-item/face",
            "description": "list-item/face"
          },
          "attributes": {
            "properties": {},
            "allOf": [
              {
                "$ref": "#/components/schemas/list-item-shared-attributes"
              },
              {
                "type": "object",
                "properties": {
                  "face-photo": {
                    "$ref": "#/components/schemas/file"
                  }
                }
              }
            ]
          },
          "relationships": {
            "properties": {
              "creator": {
                "properties": {
                  "data": {}
                },
                "type": "object"
              }
            },
            "type": "object"
          }
        }
      },
      "list-item-field": {
        "title": "Field List Item",
        "description": "A Field List Item",
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier for this list item. Starts with `liif_`.",
            "examples": [
              "liif_soqGRWaUXZct3pCRbjRaXFqz"
            ],
            "type": "string"
          },
          "type": {
            "type": "string",
            "const": "list-item/field",
            "description": "list-item/field"
          },
          "attributes": {
            "properties": {},
            "allOf": [
              {
                "$ref": "#/components/schemas/list-item-shared-attributes"
              },
              {
                "type": "object",
                "properties": {
                  "field-value": {
                    "type": "string"
                  }
                }
              }
            ]
          },
          "relationships": {
            "properties": {
              "creator": {
                "properties": {
                  "data": {}
                },
                "type": "object"
              }
            },
            "type": "object"
          }
        }
      },
      "list-item-geolocation": {
        "title": "Geolocation List Item",
        "description": "A Geolocation List Item",
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier for this list item. Starts with `ligl_`.",
            "examples": [
              "ligl_DQdchRN288UN6sn9mAmEcMu5"
            ],
            "type": "string"
          },
          "type": {
            "const": "list-item/geolocation",
            "description": "list-item/geolocation",
            "type": "string"
          },
          "attributes": {
            "properties": {},
            "allOf": [
              {
                "$ref": "#/components/schemas/list-item-shared-attributes"
              },
              {
                "type": "object",
                "properties": {
                  "latitude": {
                    "default": 0,
                    "examples": [
                      37.7879461
                    ],
                    "type": "number"
                  },
                  "longitude": {
                    "default": 0,
                    "examples": [
                      -122.3977409
                    ],
                    "type": "number"
                  },
                  "radius-meters": {
                    "default": 0,
                    "examples": [
                      10
                    ],
                    "type": "integer"
                  }
                }
              }
            ]
          },
          "relationships": {
            "properties": {
              "creator": {
                "properties": {
                  "data": {}
                },
                "type": "object"
              }
            },
            "type": "object"
          }
        }
      },
      "list-item-government-id-number": {
        "title": "Government ID Number List Item",
        "description": "A Government ID Number List Item",
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier for this list item. Starts with `ligin_`.",
            "examples": [
              "ligin_soqGRWaUXZct3pCRbjRaXFqz"
            ],
            "type": "string"
          },
          "type": {
            "const": "list-item/government-id-number",
            "description": "list-item/government-id-number",
            "type": "string"
          },
          "attributes": {
            "properties": {},
            "allOf": [
              {
                "$ref": "#/components/schemas/list-item-shared-attributes"
              },
              {
                "type": "object",
                "properties": {
                  "id-class": {
                    "examples": [
                      "dl"
                    ],
                    "type": "string"
                  },
                  "id-number": {
                    "examples": [
                      "F4K3NUM"
                    ],
                    "type": "string"
                  }
                }
              }
            ]
          },
          "relationships": {
            "properties": {
              "creator": {
                "properties": {
                  "data": {}
                },
                "type": "object"
              }
            },
            "type": "object"
          }
        }
      },
      "list-item-ip-address": {
        "title": "IP Address List Item",
        "description": "An IP Address List Item",
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier for this list item. Starts with `liip_`.",
            "examples": [
              "liip_soqGRWaUXZct3pCRbjRaXFqz"
            ],
            "type": "string"
          },
          "type": {
            "const": "list-item/ip-address",
            "description": "list-item/ip-address",
            "type": "string"
          },
          "attributes": {
            "properties": {},
            "allOf": [
              {
                "$ref": "#/components/schemas/list-item-shared-attributes"
              },
              {
                "type": "object",
                "properties": {
                  "value": {
                    "examples": [
                      "127.0.0.0/24"
                    ],
                    "type": "string"
                  }
                }
              }
            ]
          },
          "relationships": {
            "properties": {
              "creator": {
                "properties": {
                  "data": {}
                },
                "type": "object"
              }
            },
            "type": "object"
          }
        }
      },
      "list-item-name": {
        "title": "Name List Item",
        "description": "A Name List Item",
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier for this list item. Starts with `lin_`.",
            "examples": [
              "lin_soqGRWaUXZct3pCRbjRaXFqz"
            ],
            "type": "string"
          },
          "type": {
            "const": "list-item/name",
            "description": "list-item/name",
            "type": "string"
          },
          "attributes": {
            "properties": {},
            "allOf": [
              {
                "$ref": "#/components/schemas/list-item-shared-attributes"
              },
              {
                "type": "object",
                "properties": {
                  "name-first": {
                    "examples": [
                      "Joe"
                    ],
                    "type": "string"
                  },
                  "name-last": {
                    "examples": [
                      "Imposter"
                    ],
                    "type": "string"
                  }
                }
              }
            ]
          },
          "relationships": {
            "properties": {
              "creator": {
                "properties": {
                  "data": {}
                },
                "type": "object"
              }
            },
            "type": "object"
          }
        }
      },
      "list-item-phone-number": {
        "title": "Phone Number List Item",
        "description": "A Phone Number List Item",
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier for this list item. Starts with `lipn_`.",
            "examples": [
              "lipn_soqGRWaUXZct3pCRbjRaXFqz"
            ],
            "type": "string"
          },
          "type": {
            "type": "string",
            "const": "list-item/phone-number",
            "description": "list-item/phone-number"
          },
          "attributes": {
            "properties": {},
            "allOf": [
              {
                "$ref": "#/components/schemas/list-item-shared-attributes"
              },
              {
                "type": "object",
                "properties": {
                  "value": {
                    "examples": [
                      "18006009777"
                    ],
                    "type": "string"
                  }
                }
              }
            ]
          },
          "relationships": {
            "properties": {
              "creator": {
                "properties": {
                  "data": {}
                },
                "type": "object"
              }
            },
            "type": "object"
          }
        }
      },
      "list-item-string": {
        "title": "String List Item",
        "description": "A String List Item",
        "type": "object",
        "properties": {
          "id": {
            "examples": [
              "lin_soqGRWaUXZct3pCRbjRaXFqz"
            ],
            "type": "string"
          },
          "type": {
            "type": "string",
            "const": "list-item/string",
            "description": "list-item/string"
          },
          "attributes": {
            "properties": {},
            "allOf": [
              {
                "$ref": "#/components/schemas/list-item-shared-attributes"
              },
              {
                "type": "object",
                "properties": {
                  "value": {
                    "type": "string"
                  }
                }
              }
            ]
          },
          "relationships": {
            "properties": {
              "creator": {
                "properties": {
                  "data": {}
                },
                "type": "object"
              }
            },
            "type": "object"
          }
        }
      },
      "list": {
        "type": "object",
        "description": "A List object",
        "properties": {
          "type": {
            "x-polymorphic": true,
            "type": "string",
            "description": "Possible values:\n- list/browser-fingerprint\n- list/country\n- list/email-address\n- list/face\n- list/geolocation\n- list/government-id-number\n- list/ip-address\n- list/name\n- list/phone-number\n\nDo not assume this is a static enumeration; Persona may add new values in\nthe future without a versioned update."
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "status": {
                "type": "string"
              },
              "archived-at": {
                "type": [
                  "null",
                  "string"
                ],
                "format": "date-time"
              },
              "created-at": {
                "type": "string",
                "format": "date-time"
              },
              "updated-at": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": {
              "list-items": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "description": "List items associated with this list."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "report-shared-request-attributes": {
        "type": "object",
        "properties": {
          "account-id": {
            "description": "Account ID to associate with this Report.",
            "examples": [
              "act_ABC123"
            ],
            "type": "string"
          },
          "reference-id": {
            "description": "Reference ID to refer to an entity in your user model. This field is deprecated in favor of `meta.auto-create-account-reference-id`.",
            "deprecated": true,
            "examples": [
              "abc-123"
            ],
            "type": "string"
          },
          "report-template-id": {
            "description": "ID of Verification Template. Starts with `rptp_`. You can find your Report Template IDs [here](https://app.withpersona.com/dashboard/report-templates).",
            "examples": [
              "rptp_abc123"
            ],
            "type": "string"
          }
        }
      },
      "report-watchlist-request": {
        "title": "Watchlist Request",
        "description": "Fields required to create a Watchlist Report",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "const": "report/watchlist",
            "description": "report/watchlist"
          },
          "attributes": {
            "properties": {},
            "allOf": [
              {
                "$ref": "#/components/schemas/report-shared-request-attributes"
              },
              {
                "type": "object",
                "properties": {
                  "name-first": {
                    "type": "string",
                    "description": "The input first name of the search individual.",
                    "example": "Joe"
                  },
                  "name-middle": {
                    "type": "string",
                    "description": "The input middle name of the search individual.",
                    "example": "N"
                  },
                  "name-last": {
                    "type": "string",
                    "description": "The input last name of the search individual.",
                    "example": "Doe"
                  },
                  "term": {
                    "type": "string",
                    "description": "The input combined term used for searching (first + middle + last name). At least one of name-first, name-middle, name-last, or term is required.",
                    "example": "Joe N Doe"
                  },
                  "birthdate": {
                    "type": "string",
                    "description": "The input DOB in YYYY-MM-DD format.",
                    "example": "1991-10-07"
                  },
                  "address-country-code": {
                    "type": "string",
                    "description": "The input search country in alpha2 format.",
                    "example": "US"
                  }
                }
              }
            ]
          }
        }
      },
      "report-crypto-address-watchlist-request": {
        "title": "Crypto Address Watchlist Request",
        "description": "Fields required to create a Crypto Address Watchlist Report",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "const": "report/crypto-address-watchlist",
            "description": "report/crypto-address-watchlist"
          },
          "attributes": {
            "properties": {},
            "allOf": [
              {
                "$ref": "#/components/schemas/report-shared-request-attributes"
              },
              {
                "type": "object",
                "properties": {
                  "crypto-address": {
                    "type": "string",
                    "description": "The crypto address to search.",
                    "example": "1Fz29BQp82pE3vXXcsZoMNQ3KSHfMzfMe3"
                  }
                }
              }
            ],
            "required": [
              "crypto-address"
            ]
          }
        }
      },
      "report-adverse-media-request": {
        "title": "Adverse Media Request",
        "description": "Fields required to create an Adverse Media Report",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "const": "report/adverse-media",
            "description": "report/adverse-media"
          },
          "attributes": {
            "properties": {},
            "allOf": [
              {
                "$ref": "#/components/schemas/report-shared-request-attributes"
              },
              {
                "type": "object",
                "properties": {
                  "name-first": {
                    "type": "string",
                    "description": "The input first name of the search individual.",
                    "example": "Joe"
                  },
                  "name-middle": {
                    "type": "string",
                    "description": "The input middle name of the search individual.",
                    "example": "N"
                  },
                  "name-last": {
                    "type": "string",
                    "description": "The input last name of the search individual.",
                    "example": "Doe"
                  },
                  "term": {
                    "type": "string",
                    "description": "The input combined term used for searching (first + middle + last name). At least one of name-first, name-middle, name-last, or term is required.",
                    "example": "Joe N Doe"
                  },
                  "birthdate": {
                    "type": "string",
                    "description": "The input DOB in YYYY-MM-DD format.",
                    "example": "1991-10-07"
                  },
                  "country-code": {
                    "type": "string",
                    "description": "The input search country in alpha2 format.",
                    "example": "US"
                  }
                }
              }
            ]
          }
        }
      },
      "report-address-lookup-request": {
        "title": "Address Lookup Request",
        "description": "Fields required to create an Address Lookup Report",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "const": "report/address-lookup",
            "description": "report/address-lookup"
          },
          "attributes": {
            "properties": {},
            "allOf": [
              {
                "$ref": "#/components/schemas/report-shared-request-attributes"
              },
              {
                "type": "object",
                "properties": {
                  "addressee": {
                    "type": "string",
                    "example": "Joe Doe"
                  },
                  "address-street-1": {
                    "type": "string",
                    "example": "1 Example Way"
                  },
                  "address-street-2": {
                    "type": "string",
                    "example": "Ste 300"
                  },
                  "address-city": {
                    "type": "string",
                    "example": "Cupertino"
                  },
                  "address-subdivision": {
                    "type": "string",
                    "example": "California"
                  },
                  "address-postal-code": {
                    "type": "string",
                    "example": "95014"
                  },
                  "address-country-code": {
                    "type": "string",
                    "example": "US"
                  }
                }
              }
            ],
            "required": [
              "address-street-1",
              "address-city",
              "address-subdivision",
              "address-postal-code"
            ]
          }
        }
      },
      "report-politically-exposed-person-request": {
        "title": "Politically Exposed Person Request",
        "description": "Fields required to create a Politically Exposed Person Report",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "const": "report/politically-exposed-person",
            "description": "report/politically-exposed-person"
          },
          "attributes": {
            "properties": {},
            "allOf": [
              {
                "$ref": "#/components/schemas/report-shared-request-attributes"
              },
              {
                "type": "object",
                "properties": {
                  "query": {
                    "type": "object",
                    "properties": {
                      "name-first": {
                        "type": "string",
                        "description": "The input first name of the search individual.",
                        "example": "Joe"
                      },
                      "name-middle": {
                        "type": "string",
                        "description": "The input middle name of the search individual.",
                        "example": "N"
                      },
                      "name-last": {
                        "type": "string",
                        "description": "The input last name of the search individual.",
                        "example": "Doe"
                      },
                      "term": {
                        "type": "string",
                        "description": "The input combined term used for searching (first + middle + last name). At least one of name-first, name-middle, name-last, or term is required.",
                        "example": "Joe N Doe"
                      },
                      "birthdate": {
                        "type": "string",
                        "description": "The input DOB in YYYY-MM-DD format.",
                        "example": "1991-10-07"
                      },
                      "country-code": {
                        "type": "string",
                        "description": "The input search country in alpha2 format.",
                        "example": "US"
                      }
                    }
                  }
                }
              }
            ]
          }
        }
      },
      "report-email-address-request": {
        "title": "Email Address Request",
        "description": "Fields required to create an Email Address Report",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "const": "report/email-address",
            "description": "report/email-address"
          },
          "attributes": {
            "properties": {},
            "allOf": [
              {
                "$ref": "#/components/schemas/report-shared-request-attributes"
              },
              {
                "type": "object",
                "properties": {
                  "query": {
                    "type": "object",
                    "properties": {
                      "email-address": {
                        "type": "string",
                        "description": "The input email address of the search.",
                        "example": "example@domain.com"
                      }
                    },
                    "required": [
                      "email-address"
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      "report-phone-risk-request": {
        "title": "Phone Risk Request",
        "description": "Fields required to create a Phone Risk Report",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "const": "report/phone-number",
            "description": "report/phone-number"
          },
          "attributes": {
            "properties": {},
            "allOf": [
              {
                "$ref": "#/components/schemas/report-shared-request-attributes"
              },
              {
                "type": "object",
                "properties": {
                  "phone-number": {
                    "type": "string",
                    "description": "The input phone number of the search.",
                    "example": "+14169671111"
                  }
                }
              }
            ],
            "required": [
              "phone-number"
            ]
          }
        }
      },
      "report-social-media-request": {
        "title": "Social Media Request",
        "description": "Fields required to create a Social Media Report",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "const": "report/social-media",
            "description": "report/social-media"
          },
          "attributes": {
            "properties": {},
            "allOf": [
              {
                "$ref": "#/components/schemas/report-shared-request-attributes"
              },
              {
                "type": "object",
                "properties": {
                  "name-first": {
                    "type": "string",
                    "example": "Norman"
                  },
                  "name-last": {
                    "type": "string",
                    "example": "Mannor"
                  },
                  "birthdate": {
                    "type": "string",
                    "description": "Date of birth in ISO 8601 format",
                    "example": "19911007T000000-0400"
                  },
                  "phone-number": {
                    "type": "string",
                    "example": "+14169671111"
                  },
                  "email-address": {
                    "type": "string",
                    "example": "address@domain.com"
                  },
                  "address-city": {
                    "type": "string",
                    "example": "Funkyville"
                  },
                  "address-subdivision": {
                    "type": "string",
                    "description": "Sub-national subdivision such as a US state or a Canadian province",
                    "example": "Wisconsin"
                  }
                }
              }
            ]
          }
        }
      },
      "report-business-lookup-request": {
        "title": "Business Lookup Request",
        "description": "Fields required to create a Business Lookup Report",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "const": "report/business-lookup",
            "description": "report/business-lookup"
          },
          "attributes": {
            "properties": {},
            "allOf": [
              {
                "$ref": "#/components/schemas/report-shared-request-attributes"
              },
              {
                "type": "object",
                "properties": {
                  "query": {
                    "type": "object",
                    "properties": {
                      "business-name": {
                        "type": "string",
                        "example": "Coffee Shop"
                      },
                      "phone-number": {
                        "type": "string"
                      },
                      "website": {
                        "type": "string"
                      },
                      "ein": {
                        "type": "string"
                      },
                      "address-street-1": {
                        "type": "string",
                        "example": "123 Funky St"
                      },
                      "address-street-2": {
                        "type": "string"
                      },
                      "address-city": {
                        "type": "string",
                        "example": "Funkyville"
                      },
                      "address-subdivision": {
                        "type": "string",
                        "description": "Subnational division of a country such as a US state.",
                        "example": "CA"
                      },
                      "address-postal-code": {
                        "type": "string",
                        "example": "12345"
                      },
                      "address-country-code": {
                        "type": "string",
                        "example": "US"
                      },
                      "incorporation-state": {
                        "type": "string",
                        "example": "CA"
                      },
                      "associated-people": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "example": "John Doe"
                        }
                      }
                    },
                    "required": [
                      "business-name"
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      "report-sentilink-scores-request": {
        "title": "SentiLink Scores Request",
        "description": "Fields required to create a SentiLink Scores Report",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "const": "report/sentilink-scores",
            "description": "report/sentilink-scores"
          },
          "attributes": {
            "properties": {},
            "allOf": [
              {
                "$ref": "#/components/schemas/report-shared-request-attributes"
              },
              {
                "type": "object",
                "properties": {
                  "birthdate": {
                    "description": "Birthdate, must be in the format \"YYYY-MM-DD\".",
                    "format": "date",
                    "examples": [
                      "1994-04-12"
                    ],
                    "type": "string"
                  },
                  "name-first": {
                    "description": "Given or first name.",
                    "examples": [
                      "Jane"
                    ],
                    "type": "string"
                  },
                  "name-last": {
                    "description": "Family or last name.",
                    "examples": [
                      "Doe"
                    ],
                    "type": "string"
                  },
                  "address-street-1": {
                    "description": "Street name of residence address.",
                    "examples": [
                      "123 Main St"
                    ],
                    "type": "string"
                  },
                  "address-city": {
                    "description": "City of residence address. Not all international addresses use this attribute.",
                    "examples": [
                      "San Francisco"
                    ],
                    "type": "string"
                  },
                  "address-subdivision": {
                    "description": "State or subdivision of residence address. In the US, this should be the unabbreviated name. Not all international addresses use this attribute.",
                    "examples": [
                      "California"
                    ],
                    "type": "string"
                  },
                  "address-postal-code": {
                    "description": "ZIP or postal code of residence address. Not all international addresses use this attribute.",
                    "examples": [
                      "94111"
                    ],
                    "type": "string"
                  },
                  "address-country-code": {
                    "description": "Country code of residence address.",
                    "examples": [
                      "US"
                    ],
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "social-security-number": {
                    "description": "Social security number.",
                    "type": "string",
                    "examples": [
                      "123-45-6789"
                    ]
                  },
                  "user-id": {
                    "description": "A reference ID for the applicant.",
                    "type": "string",
                    "examples": [
                      "USER-123"
                    ]
                  },
                  "phone-number": {
                    "description": "Phone number.",
                    "examples": [
                      "415-555-1234"
                    ],
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "email-address": {
                    "description": "Email address.",
                    "examples": [
                      "jane@doe.com"
                    ],
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                }
              }
            ],
            "required": [
              "name-first",
              "name-last",
              "birthdate",
              "address-street-1",
              "address-city",
              "address-subdivision",
              "address-postal-code",
              "social-security-number",
              "user-id"
            ]
          }
        }
      },
      "transaction": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for this Transaction. Starts with `txn_`.",
            "examples": [
              "txn_ABC123"
            ]
          },
          "type": {
            "type": "string",
            "const": "transaction",
            "description": "transaction"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "examples": [
                  "approved",
                  "created",
                  "declined",
                  "needs review"
                ]
              },
              "reference-id": {
                "type": [
                  "string",
                  "null"
                ],
                "examples": [
                  "abc-123"
                ]
              },
              "external-id": {
                "type": [
                  "string",
                  "null"
                ],
                "examples": [
                  "1513"
                ]
              },
              "fields": {
                "description": "JSON key-value pairs of field name to field value. Exact schema depends on the configuration of the Transaction Type for this Transaction.",
                "type": "object",
                "additionalProperties": true
              },
              "tags": {
                "type": "array"
              },
              "created-at": {
                "format": "date-time",
                "examples": [
                  "2023-05-26T16:49:33.860Z"
                ]
              },
              "updated-at": {
                "format": "date-time",
                "examples": [
                  "2023-05-26T16:49:43.965Z"
                ]
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": {
              "reviewer": {
                "type": "object",
                "description": "The entity that reviewed the transaction",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "x-polymorphic": true,
                        "type": "string",
                        "examples": [
                          "workflow-run",
                          "workflow-step",
                          "user"
                        ]
                      },
                      "id": {
                        "type": "string",
                        "examples": [
                          "wfr_ABC123",
                          "wfs_ABC123",
                          "user_ABC123"
                        ]
                      }
                    }
                  }
                }
              },
              "transaction-label": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": [
                      "object",
                      "null"
                    ],
                    "properties": {
                      "type": {
                        "type": "string",
                        "const": "transaction-label",
                        "description": "transaction-label"
                      },
                      "id": {
                        "description": "Unique identifier for this Transaction Label. Starts with `txnl_`.",
                        "type": "string",
                        "examples": [
                          "txnl_ABC123"
                        ]
                      }
                    }
                  }
                }
              },
              "transaction-type": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "const": "transaction-type",
                        "description": "transaction-type"
                      },
                      "id": {
                        "description": "Unique identifier for this Transaction Type. Starts with `txntp_`.",
                        "type": "string",
                        "examples": [
                          "txntp_ABC123"
                        ]
                      }
                    }
                  }
                }
              },
              "related-objects": {
                "type": "object",
                "description": "Any object involved in this transaction's related workflow runs (Deprecated)",
                "deprecated": true,
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "x-polymorphic": true,
                          "type": "string",
                          "examples": [
                            "account",
                            "inquiry",
                            "verification/government-id"
                          ]
                        },
                        "id": {
                          "type": "string",
                          "description": "Unique identifier for this object.",
                          "examples": [
                            "act_ABC123",
                            "inq_ABC123",
                            "ver_ABC123"
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "transaction-label": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "const": "transaction-label",
            "description": "transaction-label"
          },
          "id": {
            "description": "Unique identifier for this Transaction Label. Starts with `txnl_`.",
            "type": "string",
            "examples": [
              "txnl_ABC123"
            ]
          },
          "attributes": {
            "type": "object",
            "properties": {
              "model-label": {
                "type": "string",
                "examples": [
                  "test"
                ]
              },
              "model-version": {
                "type": "string",
                "examples": [
                  "1.2.3"
                ]
              },
              "created-at": {
                "type": "string",
                "format": "date-time",
                "examples": [
                  "2023-06-29T23:54:35.293Z"
                ]
              },
              "updated-at": {
                "type": [
                  "string",
                  "null"
                ],
                "format": "date-time",
                "examples": [
                  "2023-06-29T23:54:35.293Z"
                ]
              }
            }
          }
        }
      },
      "user-audit-log": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "const": "user-audit-log",
            "description": "user-audit-log"
          },
          "id": {
            "type": "string",
            "examples": [
              "ual_ABC123"
            ]
          },
          "attributes": {
            "type": "object",
            "properties": {
              "path": {
                "type": "string",
                "examples": [
                  "/api/internal/dashboard/v1/cases/case_ABC123"
                ]
              },
              "method": {
                "type": "string",
                "examples": [
                  "GET",
                  "POST"
                ]
              },
              "get-params": {
                "type": "object",
                "description": "The GET params of the request. Schema depends on the action taken.",
                "additionalProperties": true
              },
              "post-params": {
                "type": "object",
                "description": "The POST params of the request. Schema depends on the action taken.",
                "additionalProperties": true
              },
              "ip-address": {
                "type": "string",
                "examples": [
                  "127.0.0.1"
                ]
              },
              "created-at": {
                "type": "string",
                "format": "date-time",
                "examples": [
                  "2023-10-03T19:41:30.155Z"
                ]
              },
              "impersonator-email-address": {
                "type": [
                  "string",
                  "null"
                ],
                "examples": [
                  "user@withpersona.com"
                ]
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": {
              "user": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "const": "user",
                        "description": "user"
                      },
                      "id": {
                        "type": "string",
                        "examples": [
                          "user_ABC123"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "user": {
        "type": "object",
        "description": "A User object",
        "properties": {
          "type": {
            "type": "string",
            "const": "user",
            "description": "user"
          },
          "id": {
            "type": "string",
            "examples": [
              "user_ABC123"
            ]
          },
          "attributes": {
            "type": "object",
            "properties": {
              "email-address": {
                "type": "string",
                "examples": [
                  "jane@doe.com"
                ]
              },
              "name-first": {
                "type": "string",
                "examples": [
                  "Jane"
                ]
              },
              "name-last": {
                "type": "string",
                "examples": [
                  "Doe"
                ]
              }
            }
          }
        }
      },
      "verification-database-phone-carrier": {
        "title": "Phone Carrier Database Verification",
        "description": "A Phone Carrier Database Verification",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "verification/database-phone-carrier",
            "const": "verification/database-phone-carrier"
          },
          "id": {
            "type": "string",
            "description": "The token of the verification",
            "example": "ver_ABC123"
          },
          "attributes": {
            "properties": {},
            "allOf": [
              {
                "$ref": "#/components/schemas/verification-shared-attributes"
              },
              {
                "$ref": "#/components/schemas/default-fields"
              },
              {
                "type": "object",
                "properties": {
                  "name-first": {
                    "type": "string"
                  },
                  "name-last": {
                    "type": "string"
                  }
                }
              }
            ]
          },
          "relationships": {
            "$ref": "#/components/schemas/verification-shared-relationships"
          }
        }
      },
      "verification-database-serpro": {
        "title": "Serpro Database Verification",
        "description": "A Serpro Database Verification",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "verification/database-serpro",
            "const": "verification/database-serpro"
          },
          "id": {
            "type": "string",
            "description": "The token of the verification",
            "example": "ver_ABC123"
          },
          "attributes": {
            "properties": {},
            "allOf": [
              {
                "$ref": "#/components/schemas/verification-shared-attributes"
              },
              {
                "$ref": "#/components/schemas/default-fields"
              },
              {
                "type": "object",
                "properties": {
                  "birthdate": {
                    "description": "Birthdate of the individual",
                    "format": "date",
                    "type": "string"
                  },
                  "cpf": {
                    "description": "The Cadastro de Pessoas Físicas for the individual",
                    "type": "string"
                  },
                  "name-first": {
                    "description": "First name of the individual. This will be overwritten by name-full.",
                    "type": "string"
                  },
                  "name-full": {
                    "description": "Full name of the individual. This will overwrite values for name-first and name-last if provided.",
                    "type": "string"
                  },
                  "name-last": {
                    "description": "Last name of the individual. This will be overwritten by name-full.",
                    "type": "string"
                  },
                  "selfie-id": {
                    "description": "ID of a selfie of the individual. This id should begin with self_.",
                    "type": "string"
                  },
                  "verification-template-id": {
                    "description": "ID of Verification Template. You can find your Verification Template IDs [here](https://app.withpersona.com/dashboard/verification-templates?filter=%7B%22type%22%3A%5B%22verification-template%2Fdatabase-serpro\"%5D%7D).",
                    "type": "string"
                  }
                }
              }
            ]
          },
          "relationships": {
            "$ref": "#/components/schemas/verification-shared-relationships"
          }
        }
      },
      "verification-database-tin": {
        "title": "TIN Database Verification",
        "description": "A TIN Database Verification",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "verification/database-tin",
            "const": "verification/database-tin"
          },
          "id": {
            "type": "string",
            "description": "The token of the verification",
            "example": "ver_ABC123"
          },
          "attributes": {
            "properties": {},
            "allOf": [
              {
                "$ref": "#/components/schemas/verification-shared-attributes"
              },
              {
                "type": "object",
                "properties": {
                  "tin": {
                    "type": "string",
                    "examples": [
                      "287654321",
                      "123456789"
                    ]
                  },
                  "tin-type": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "examples": [
                      "ssn",
                      "ein",
                      "itin"
                    ]
                  },
                  "name-first": {
                    "type": "string"
                  },
                  "name-last": {
                    "type": "string"
                  },
                  "name-business": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "checks": {
                    "items": {
                      "properties": {
                        "metadata": {
                          "properties": {},
                          "type": "object"
                        },
                        "name": {
                          "examples": [
                            "database_tin_name_comparison"
                          ],
                          "type": "string"
                        },
                        "reasons": {
                          "type": "array"
                        },
                        "status": {
                          "examples": [
                            "passed"
                          ],
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  }
                }
              }
            ]
          },
          "relationships": {
            "$ref": "#/components/schemas/verification-shared-relationships"
          }
        }
      },
      "verification-government-id-nfc": {
        "type": "object",
        "title": "Government ID NFC Verification",
        "description": "A Government ID NFC Verification",
        "properties": {
          "type": {
            "type": "string",
            "description": "verification/government-id-nfc",
            "const": "verification/government-id-nfc"
          },
          "id": {
            "type": "string",
            "description": "The token of the verification",
            "example": "ver_ABC123"
          },
          "attributes": {
            "properties": {},
            "allOf": [
              {
                "$ref": "#/components/schemas/verification-shared-attributes"
              },
              {
                "type": "object",
                "properties": {
                  "birthdate": {
                    "examples": [
                      "2000-01-01"
                    ],
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "checks": {
                    "items": {
                      "properties": {
                        "metadata": {
                          "additionalProperties": true,
                          "type": "object"
                        },
                        "name": {
                          "examples": [
                            "id_nfc_expired_detection"
                          ],
                          "type": "string"
                        },
                        "reasons": {
                          "items": {
                            "examples": [
                              "expired"
                            ],
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "status": {
                          "examples": [
                            "failed"
                          ],
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "expiration-date": {
                    "examples": [
                      "2000-01-01"
                    ],
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "id-class": {
                    "examples": [
                      "dl"
                    ],
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "identification-number": {
                    "examples": [
                      "P123456AA"
                    ],
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "name-first": {
                    "examples": [
                      "ALEXANDER"
                    ],
                    "type": "string"
                  },
                  "name-last": {
                    "examples": [
                      "SAMPLE"
                    ],
                    "type": "string"
                  },
                  "selfie-photo": {
                    "properties": {
                      "byte-size": {
                        "default": 0,
                        "examples": [
                          316802
                        ],
                        "type": "integer"
                      },
                      "url": {
                        "examples": [
                          "https://files.withpersona.com/..."
                        ],
                        "type": "string"
                      }
                    },
                    "type": [
                      "object",
                      "null"
                    ]
                  },
                  "restrictions": {},
                  "sex": {
                    "examples": [
                      "M",
                      "F",
                      "X"
                    ],
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                }
              },
              {
                "$ref": "#/components/schemas/address-fields"
              }
            ]
          },
          "relationships": {
            "properties": {},
            "allOf": [
              {
                "$ref": "#/components/schemas/verification-shared-relationships"
              },
              {
                "type": "object",
                "properties": {
                  "document": {
                    "properties": {
                      "data": {
                        "properties": {
                          "id": {
                            "examples": [
                              "doc_ABC123"
                            ],
                            "type": "string"
                          },
                          "type": {
                            "x-polymorphic": true,
                            "examples": [
                              "document/generic"
                            ],
                            "type": "string"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  }
                }
              }
            ]
          }
        }
      },
      "webhook": {
        "type": "object",
        "description": "A Webhook object",
        "properties": {
          "type": {
            "type": "string",
            "const": "webhook",
            "description": "webhook"
          },
          "id": {
            "examples": [
              "wbh_ABC123"
            ],
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "examples": [
                  "disabled"
                ]
              },
              "url": {
                "type": "string",
                "examples": [
                  "https://withpersona.com"
                ]
              },
              "api-version": {
                "type": "string",
                "format": "date",
                "examples": [
                  "2023-01-05"
                ]
              },
              "api-key-inflection": {
                "type": "string",
                "examples": [
                  "kebab"
                ]
              },
              "api-attributes-blocklist": {
                "type": "array",
                "items": {
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "examples": [
                  [
                    "address-*",
                    "name-last",
                    "/data/attributes/fields/*-number"
                  ]
                ]
              },
              "file-access-token-expires-in": {
                "type": "integer",
                "format": "int32",
                "examples": [
                  21600
                ]
              },
              "enabled-events": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "examples": [
                  [
                    "account.created",
                    "verification.created",
                    "*"
                  ]
                ]
              },
              "payload-filter": {
                "type": [
                  "object",
                  "null"
                ]
              },
              "created-at": {
                "type": "string",
                "format": "date-time",
                "examples": [
                  "2023-09-21T18:29:40.000Z"
                ]
              }
            }
          }
        }
      },
      "webhook-request-attributes": {
        "type": "object",
        "properties": {
          "url": {
            "description": "URL to which webhook events are forwarded.",
            "type": "string"
          },
          "enabled-events": {
            "description": "Supported events that you want to receive webhooks for. Set `*` to enable all events. Descriptions of all events can be found [here](https://docs.withpersona.com/docs/events). Retrieve Events for your organization using the [Events API](https://docs.withpersona.com/reference/events-api).",
            "items": {
              "type": "string",
              "enum": [
                "*",
                "account.created",
                "account.redacted",
                "account.archived",
                "account.restored",
                "account.consolidated",
                "account.tag-added",
                "account.tag-removed",
                "case.created",
                "case.assigned",
                "case.resolved",
                "case.reopened",
                "case.updated",
                "document.created",
                "document.submitted",
                "document.processed",
                "document.errored",
                "inquiry.created",
                "inquiry.expired",
                "inquiry.completed",
                "inquiry.failed",
                "inquiry.marked-for-review",
                "inquiry.approved",
                "inquiry.declined",
                "inquiry.transitioned",
                "inquiry-session.started",
                "inquiry-session.expired",
                "inquiry-session.canceled",
                "report/address-lookup.ready",
                "report/address-lookup.errored",
                "report/adverse-media.matched",
                "report/adverse-media.ready",
                "report/adverse-media.errored",
                "report/business-adverse-media.matched",
                "report/business-adverse-media.ready",
                "report/business-adverse-media.errored",
                "report/business-watchlist.ready",
                "report/business-watchlist.matched",
                "report/business-watchlist.errored",
                "report/email-address.ready",
                "report/email-address.errored",
                "report/phone-number.ready",
                "report/phone-number.errored",
                "report/profile.ready",
                "report/profile.errored",
                "report/politically-exposed-person.matched",
                "report/politically-exposed-person.ready",
                "report/politically-exposed-person.errored",
                "report/watchlist.matched",
                "report/watchlist.ready",
                "report/watchlist.errored",
                "selfie.created",
                "selfie.submitted",
                "selfie.processed",
                "selfie.errored",
                "transaction.created",
                "transaction.labeled",
                "transaction.redacted",
                "transaction.status-updated",
                "verification.created",
                "verification.submitted",
                "verification.passed",
                "verification.failed",
                "verification.requires-retry",
                "verification.canceled"
              ]
            },
            "type": "array"
          },
          "api-version": {
            "type": "string",
            "examples": [
              "2023-01-05"
            ],
            "default": "2023-01-05",
            "enum": [
              "2023-01-05",
              "2022-09-01",
              "2021-08-18",
              "2021-07-05",
              "2021-02-21",
              "2020-05-18"
            ]
          },
          "api-key-inflection": {
            "description": "Default key inflection for attribute keys in incoming webhook requests. For more info see the [Key Inflection docs](https://docs.withpersona.com/reference/key-inflection).",
            "type": "string",
            "default": "kebab",
            "enum": [
              "camel",
              "kebab",
              "snake"
            ]
          },
          "api-attributes-blocklist": {
            "description": "Attributes blocked from webhook requests. For more info see [Webhook Attributes Blocklists](https://docs.withpersona.com/docs/webhook-attribute-blocklists).",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "file-access-token-expires-in": {
            "description": "How soon any file access tokens in webhook requests expire. For more info see [Downloading Files](https://docs.withpersona.com/reference/downloading-files).",
            "example": 21600,
            "type": "integer"
          },
          "payload-filter": {
            "type": "object",
            "description": "Filter webhook events based on payload data. Only available for enterprise clients. For more info see [Webhook Event Filters](https://docs.withpersona.com/docs/webhook-event-filters).",
            "properties": {
              "data": {
                "type": "object",
                "format": "json"
              }
            }
          }
        }
      },
      "webhook-with-secret": {
        "type": "object",
        "description": "A Webhook object",
        "properties": {
          "type": {
            "type": "string",
            "const": "webhook",
            "description": "webhook"
          },
          "id": {
            "examples": [
              "wbh_ABC123"
            ],
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "examples": [
                  "disabled"
                ]
              },
              "url": {
                "type": "string",
                "examples": [
                  "https://withpersona.com"
                ]
              },
              "secret": {
                "description": "secret is deprecated in favor of secrets",
                "type": "string",
                "examples": [
                  "wbhsec_abcdefgh-1234-5678-9ijk-lmnopqrstuvw"
                ]
              },
              "secrets": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "value": {
                      "type": "string",
                      "examples": [
                        "wbhsec_abcdefgh-1234-5678-9ijk-lmnopqrstuvw"
                      ]
                    },
                    "expires-at": {
                      "type": [
                        "string",
                        "null"
                      ],
                      "format": "date-time"
                    }
                  }
                }
              },
              "api-version": {
                "type": "string",
                "format": "date",
                "examples": [
                  "2023-01-05"
                ]
              },
              "api-key-inflection": {
                "type": "string",
                "examples": [
                  "kebab"
                ]
              },
              "api-attributes-blocklist": {
                "type": "array",
                "items": {
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "examples": [
                  [
                    "address-*",
                    "name-last",
                    "/data/attributes/fields/*-number"
                  ]
                ]
              },
              "file-access-token-expires-in": {
                "type": "integer",
                "format": "int32",
                "examples": [
                  21600
                ]
              },
              "enabled-events": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "examples": [
                  [
                    "account.created",
                    "verification.created",
                    "*"
                  ]
                ]
              },
              "payload-filter": {
                "type": [
                  "object",
                  "null"
                ]
              },
              "created-at": {
                "type": "string",
                "format": "date-time",
                "examples": [
                  "2023-09-21T18:29:40.000Z"
                ]
              }
            }
          }
        }
      },
      "webhook-body-shared-data": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "const": "event",
            "description": "event"
          },
          "id": {
            "type": "string",
            "description": "Unique identifier for this Event. Starts with `evt_`.",
            "examples": [
              "evt_ABC123"
            ]
          }
        }
      },
      "webhook-body-shared-attributes": {
        "type": "object",
        "properties": {
          "created-at": {
            "type": "string",
            "format": "date-time",
            "description": "Datetime when the event was created.",
            "examples": [
              "2023-09-21T18:29:40.000Z"
            ]
          }
        }
      }
    },
    "responses": {
      "bad-request": {
        "description": "Bad Request",
        "content": {
          "application/json": {
            "examples": {
              "Result": {
                "summary": "Bad Request",
                "value": {
                  "errors": [
                    {
                      "title": "Bad Request",
                      "details": "data.attributes.type must be a string"
                    }
                  ]
                }
              }
            },
            "schema": {
              "properties": {
                "errors": {
                  "type": "array",
                  "items": {
                    "properties": {
                      "title": {
                        "description": "Bad Request",
                        "type": "string"
                      },
                      "details": {
                        "type": "string",
                        "examples": [
                          "data.attributes.name is missing",
                          "data.type must be filled",
                          "meta.object_ids must be an array"
                        ]
                      }
                    }
                  }
                }
              },
              "type": "object"
            }
          }
        }
      },
      "unauthorized": {
        "description": "Unauthorized",
        "content": {
          "application/json": {
            "examples": {
              "Result": {
                "summary": "Unauthorized",
                "value": {
                  "errors": [
                    {
                      "title": "Must be authenticated to access this endpoint"
                    }
                  ]
                }
              }
            },
            "schema": {
              "properties": {
                "errors": {
                  "type": "array",
                  "items": {
                    "properties": {
                      "title": {
                        "description": "Unauthorized",
                        "examples": [
                          "Must be authenticated to access this endpoint",
                          "Token is invalid"
                        ],
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "type": "object"
            }
          }
        }
      },
      "forbidden": {
        "description": "Forbidden",
        "content": {
          "application/json": {
            "examples": {
              "Result": {
                "summary": "Forbidden",
                "value": {
                  "errors": [
                    {
                      "title": "Forbidden",
                      "details": "IP address is not permitted access to current environment"
                    }
                  ]
                }
              }
            },
            "schema": {
              "properties": {
                "errors": {
                  "type": "array",
                  "items": {
                    "properties": {
                      "title": {
                        "description": "Forbidden",
                        "type": "string"
                      },
                      "details": {
                        "type": "string",
                        "examples": [
                          "Resource cannot be created in an inactive environment",
                          "Verification creation API is not enabled",
                          "IP address is not permitted access to current environment"
                        ]
                      }
                    }
                  }
                }
              },
              "type": "object"
            }
          }
        }
      },
      "too-many-requests": {
        "description": "Too Many Requests",
        "content": {
          "application/json": {
            "examples": {
              "Result": {
                "summary": "Too Many Requests",
                "value": {
                  "errors": [
                    {
                      "title": "Rate limit exceeded",
                      "details": "You have hit your rate limit of 300 requests / min. Please reach out to support@withpersona.com if you need this changed."
                    }
                  ]
                }
              }
            },
            "schema": {
              "properties": {
                "errors": {
                  "type": "array",
                  "items": {
                    "properties": {
                      "title": {
                        "type": "string",
                        "examples": [
                          "Rate limit exceeded",
                          "Quota exceeded"
                        ]
                      },
                      "details": {
                        "type": "string",
                        "examples": [
                          "You have hit your rate limit of 300 requests / min. Please reach out to support@withpersona.com if you need this changed.",
                          "You have hit your create_verification quota limit of 300 requests. Please reach out to support@withpersona.com if you need this changed."
                        ]
                      }
                    }
                  }
                }
              },
              "type": "object"
            }
          }
        }
      },
      "conflict": {
        "description": "Conflict",
        "content": {
          "application/json": {
            "examples": {
              "Result": {
                "summary": "Conflict",
                "value": {
                  "errors": [
                    {
                      "title": "Conflict",
                      "details": "Resource already exists as an active resource"
                    }
                  ]
                }
              }
            },
            "schema": {
              "properties": {
                "errors": {
                  "type": "array",
                  "items": {
                    "properties": {
                      "title": {
                        "description": "Conflict",
                        "examples": [
                          "Conflict",
                          "Record not unique",
                          "Stale object error"
                        ],
                        "type": "string"
                      },
                      "details": {
                        "type": "string",
                        "examples": [
                          "Name already exists as an active item in list",
                          "Inquiry already redacted",
                          "Record not unique",
                          "Attempted to update a record that was just modified. Please try again.",
                          "data.attributes.inquiry_id does not require verification/email-address"
                        ]
                      }
                    }
                  }
                }
              },
              "type": "object"
            }
          }
        }
      },
      "unprocessable-entity": {
        "description": "Unprocessable Entity",
        "content": {
          "application/json": {
            "examples": {
              "Result": {
                "summary": "Unprocessable Entity",
                "value": {
                  "errors": [
                    {
                      "title": "Unprocessable entity",
                      "details": "Invalid confirmation code"
                    }
                  ]
                }
              }
            },
            "schema": {
              "properties": {
                "errors": {
                  "type": "array",
                  "items": {
                    "properties": {
                      "title": {
                        "type": "string",
                        "examples": [
                          "Unprocessable entity",
                          "Record invalid"
                        ]
                      },
                      "details": {
                        "type": "string",
                        "examples": [
                          "File must be under 2 bytes",
                          "Selected country code invalid selected country code of ZX",
                          "Invalid confirmation code"
                        ]
                      },
                      "source": {
                        "type": "object",
                        "properties": {
                          "pointer": {
                            "type": "string",
                            "examples": [
                              "/data/attributes/files",
                              "/data/attributes/selected-country-code"
                            ]
                          }
                        }
                      }
                    }
                  }
                }
              },
              "type": "object"
            }
          }
        }
      },
      "not-found": {
        "description": "Not Found",
        "content": {
          "application/json": {
            "examples": {
              "Result": {
                "summary": "Not Found",
                "value": {
                  "errors": [
                    {
                      "title": "Record not found"
                    }
                  ]
                }
              }
            },
            "schema": {
              "properties": {
                "errors": {
                  "items": {
                    "properties": {
                      "title": {
                        "examples": [
                          "Record not found"
                        ],
                        "type": "string"
                      },
                      "details": {
                        "examples": [
                          "data.attributes.inquiry_id is not found"
                        ],
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            }
          }
        }
      },
      "success": {
        "description": "Return a 2xx status code to indicate that the data was received successfully. Any other status will trigger retries. For more info see [Retry Logic](https://docs.withpersona.com/docs/webhooks#retry-logic)."
      }
    },
    "examples": {
      "account": {
        "value": {
          "data": {
            "type": "account",
            "id": "act_hpNqyAbEG4HeVjZoBRNCMKkA",
            "attributes": {
              "reference-id": "abc-123",
              "created-at": "2023-09-22T17:13:49.000Z",
              "updated-at": "2023-09-23T00:22:19.000Z",
              "redacted-at": null,
              "fields": {
                "name": {
                  "type": "hash",
                  "value": {
                    "first": {
                      "type": "string",
                      "value": "Jane"
                    },
                    "middle": {
                      "type": "string",
                      "value": "Marie"
                    },
                    "last": {
                      "type": "string",
                      "value": "Doe"
                    }
                  }
                },
                "address": {
                  "type": "hash",
                  "value": {
                    "street_1": {
                      "type": "string",
                      "value": "123 Main St"
                    },
                    "street_2": {
                      "type": "string",
                      "value": null
                    },
                    "subdivision": {
                      "type": "string",
                      "value": "California"
                    },
                    "city": {
                      "type": "string",
                      "value": "San Francisco"
                    },
                    "postal_code": {
                      "type": "string",
                      "value": "94111"
                    },
                    "country_code": {
                      "type": "string",
                      "value": "US"
                    }
                  }
                },
                "identification_numbers": {
                  "type": "array",
                  "value": [
                    {
                      "type": "hash",
                      "value": {
                        "identification_class": {
                          "type": "string",
                          "value": "visa"
                        },
                        "identification_number": {
                          "type": "string",
                          "value": "12345678"
                        },
                        "issuing_country": {
                          "type": "string",
                          "value": "US"
                        }
                      }
                    },
                    {
                      "type": "hash",
                      "value": {
                        "identification_class": {
                          "type": "string",
                          "value": "visa"
                        },
                        "identification_number": {
                          "type": "string",
                          "value": "87654321"
                        },
                        "issuing_country": {
                          "type": "string",
                          "value": "UK"
                        }
                      }
                    },
                    {
                      "type": "hash",
                      "value": {
                        "identification_class": {
                          "type": "string",
                          "value": "cct"
                        },
                        "identification_number": {
                          "type": "string",
                          "value": "A12345678"
                        },
                        "issuing_country": {
                          "type": "string",
                          "value": "AF"
                        }
                      }
                    }
                  ]
                },
                "birthdate": {
                  "type": "date",
                  "value": "1994-12-30"
                },
                "phone_number": {
                  "type": "string",
                  "value": "111-222-3333"
                },
                "email_address": {
                  "type": "string",
                  "value": "jane@doe.com"
                },
                "selfie_photo": {
                  "type": "file",
                  "value": null
                }
              },
              "name-first": "Jane",
              "name-middle": "Marie",
              "name-last": "Doe",
              "phone-number": "111-222-3333",
              "email-address": "jane@doe.com",
              "address-street-1": "123 Main St",
              "address-street-2": null,
              "address-city": "San Francisco",
              "address-subdivision": "California",
              "address-postal-code": "94111",
              "country-code": "US",
              "birthdate": "1994-12-30",
              "social-security-number": "123-45-6789",
              "tags": [
                "tag1",
                "tag2"
              ],
              "identification-numbers": {
                "visa": [
                  {
                    "issuing-country": "US",
                    "identification-class": "visa",
                    "identification-number": "12345678",
                    "created-at": "2023-09-23T00:22:09.934Z",
                    "updated-at": "2023-09-23T00:22:19.900Z"
                  },
                  {
                    "issuing-country": "UK",
                    "identification-class": "visa",
                    "identification-number": "87654321",
                    "created-at": "2023-09-23T00:22:09.934Z",
                    "updated-at": "2023-09-23T00:22:19.900Z"
                  }
                ],
                "cct": [
                  {
                    "issuing-country": "AF",
                    "identification-class": "cct",
                    "identification-number": "A12345678",
                    "created-at": "2023-09-23T00:22:19.963Z",
                    "updated-at": "2023-09-23T00:22:19.963Z"
                  }
                ]
              }
            }
          }
        }
      },
      "api-key-list": {
        "value": {
          "data": [
            {
              "type": "api-key",
              "id": "api_ABC123",
              "attributes": {
                "name": "Default API Key",
                "note": null,
                "api-version": "2023-01-05",
                "api-key-inflection": "kebab",
                "api-attributes-blocklist": [
                  "address-*",
                  "name-last",
                  "/data/attributes/fields/*-number"
                ],
                "permissions": [
                  "account.read",
                  "account.write",
                  "api_log.read"
                ],
                "ip-address-allowlist": [
                  "*"
                ],
                "file-access-token-expires-in": 21600,
                "last-used-at": "2023-08-17T23:24:00.000Z",
                "expires-at": null,
                "created-at": "2023-08-17T23:18:13.000Z"
              }
            }
          ],
          "links": {
            "prev": null,
            "next": "/api/v1/api-keys?page%5Bafter%5D=api_ByBdXDqUrguLAHjGZMuDZLCx"
          }
        }
      },
      "api-key-with-value": {
        "value": {
          "data": {
            "type": "api-key",
            "id": "api_ABC123",
            "attributes": {
              "name": "Default API Key",
              "note": null,
              "api-version": "2023-01-05",
              "api-key-inflection": "kebab",
              "api-attributes-blocklist": [
                "address-*",
                "name-last",
                "/data/attributes/fields/*-number"
              ],
              "permissions": [
                "account.read",
                "account.write",
                "api_log.read"
              ],
              "ip-address-allowlist": [
                "*"
              ],
              "file-access-token-expires-in": 21600,
              "last-used-at": "2023-08-17T23:24:00.000Z",
              "expires-at": null,
              "created-at": "2023-08-17T23:18:13.000Z",
              "value": "persona_production_abcdefg"
            }
          }
        }
      },
      "api-key": {
        "value": {
          "data": {
            "type": "api-key",
            "id": "api_ABC123",
            "attributes": {
              "name": "Default API Key",
              "note": null,
              "api-version": "2023-01-05",
              "api-key-inflection": "kebab",
              "api-attributes-blocklist": [
                "address-*",
                "name-last",
                "/data/attributes/fields/*-number"
              ],
              "permissions": [
                "account.read",
                "account.write",
                "api_log.read"
              ],
              "ip-address-allowlist": [
                "*"
              ],
              "file-access-token-expires-in": 21600,
              "last-used-at": "2023-08-17T23:24:00.000Z",
              "expires-at": null,
              "created-at": "2023-08-17T23:18:13.000Z"
            }
          }
        }
      },
      "api-log-list": {
        "value": {
          "data": [
            {
              "type": "api-log",
              "id": "req_ABC123",
              "attributes": {
                "request": {
                  "method": "GET",
                  "path": "/api/v1/inquiries",
                  "headers": {
                    "Accept": "application/json",
                    "Host": "withpersona.com",
                    "Persona-Version": "2023-01-05",
                    "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/"
                  },
                  "get-params": {},
                  "post-params": {},
                  "ip-address": "127.0.0.1"
                },
                "response": {
                  "status": 200,
                  "headers": {
                    "Persona-Host": "us-central1 persona-web-web-77b874ff88-rrdk9 53e23b240",
                    "Cache-Control": "no-cache, no-store, max-age=0, must-revalidate",
                    "Pragma": "no-cache",
                    "Expires": "Fri, 01 Jan 1990 00:00:00 GMT",
                    "RateLimit-Limit": 300,
                    "RateLimit-Remaining": 299,
                    "RateLimit-Reset": 60,
                    "Request-Id": "req_ABC123",
                    "Content-Type": "application/json; charset=utf-8",
                    "Vary": "Accept"
                  }
                },
                "created-at": "2023-09-20T20:20:03.485+00:00"
              }
            }
          ],
          "links": {
            "prev": null,
            "next": "/api/v1/api-logs?page%5Bafter%5D=req_ByBdXDqUrguLAHjGZMuDZLCx"
          }
        }
      },
      "api-log": {
        "value": {
          "data": {
            "type": "api-log",
            "id": "req_ABC123",
            "attributes": {
              "request": {
                "method": "GET",
                "path": "/api/v1/inquiries",
                "headers": {
                  "Accept": "application/json",
                  "Host": "withpersona.com",
                  "Persona-Version": "2023-01-05",
                  "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/"
                },
                "get-params": {},
                "post-params": {},
                "ip-address": "127.0.0.1"
              },
              "response": {
                "status": 200,
                "headers": {
                  "Persona-Host": "us-central1 persona-web-web-77b874ff88-rrdk9 53e23b240",
                  "Cache-Control": "no-cache, no-store, max-age=0, must-revalidate",
                  "Pragma": "no-cache",
                  "Expires": "Fri, 01 Jan 1990 00:00:00 GMT",
                  "RateLimit-Limit": 300,
                  "RateLimit-Remaining": 299,
                  "RateLimit-Reset": 60,
                  "Request-Id": "req_ABC123",
                  "Content-Type": "application/json; charset=utf-8",
                  "Vary": "Accept"
                }
              },
              "created-at": "2023-09-20T20:20:03.485+00:00"
            }
          }
        }
      },
      "device-list": {
        "value": {
          "data": [
            {
              "type": "device",
              "id": "dev_ABC123",
              "attributes": {
                "device-vendor-id": "1a2b3c4d-5e6f-7g8h-9ijk-1A2B3C4D5E6F",
                "device-fingerprint": "1a2b3c4d5e6f7g8h9ijk",
                "browser-fingerprint": "1a2b3c4d5e6f7g8h9ijklmnopqrstuvw"
              }
            }
          ],
          "links": {
            "prev": null,
            "next": null
          }
        }
      },
      "device": {
        "value": {
          "data": {
            "type": "device",
            "id": "dev_ABC123",
            "attributes": {
              "device-vendor-id": "1a2b3c4d-5e6f-7g8h-9ijk-1A2B3C4D5E6F",
              "device-fingerprint": "1a2b3c4d5e6f7g8h9ijk",
              "browser-fingerprint": "1a2b3c4d5e6f7g8h9ijklmnopqrstuvw"
            }
          }
        }
      },
      "document-generic": {
        "value": {
          "data": {
            "type": "document/generic",
            "id": "doc_bzyijToBPnSHtbW2mMdpKM8W",
            "attributes": {
              "status": "processed",
              "created-at": "2023-12-20T00:47:09.000Z",
              "processed-at": "2023-12-20T00:47:15.000Z",
              "processed-at-ts": 1703033235,
              "kind": "document",
              "files": [
                {
                  "filename": "abc123.JPEG",
                  "url": "https://files.withpersona.com/abc123.JPEG?access_token=ACCESS_TOKEN",
                  "byte-size": 124917
                }
              ],
              "files-normalized": [
                {
                  "filename": "abc123.JPEG",
                  "url": "https://files.withpersona.com/abc123.JPEG?access_token=ACCESS_TOKEN",
                  "byte-size": 124917
                }
              ],
              "extraction-responses": [
                {
                  "extraction-type": "unguided",
                  "field-name": "dates",
                  "results": [
                    {
                      "value": "Oct 14 2023",
                      "page": 1,
                      "match-level": "full",
                      "metadata": {
                        "day": 14,
                        "month": 10,
                        "year": 2023
                      }
                    }
                  ]
                },
                {
                  "extraction-type": "guided",
                  "field-name": "address_street_1",
                  "results": [
                    {
                      "value": "1234 Main St.",
                      "page": 1,
                      "match-level": "full",
                      "metadata": null
                    }
                  ]
                },
                {
                  "extraction-type": "guided",
                  "field-name": "address_street_2",
                  "results": []
                },
                {
                  "extraction-type": "guided",
                  "field-name": "address_city",
                  "results": []
                },
                {
                  "extraction-type": "guided",
                  "field-name": "address_postal_code",
                  "results": []
                },
                {
                  "extraction-type": "guided",
                  "field-name": "name",
                  "results": []
                }
              ],
              "document-type": "other",
              "fields": {}
            },
            "relationships": {
              "inquiry": {
                "data": {
                  "type": "inquiry",
                  "id": "inq_5noeVrHSRUWeFMv5T6wLA8qt"
                }
              },
              "template": {
                "data": {
                  "type": "template",
                  "id": "tmpl_jGTjQgGMyei68sdf8NyCeDMh"
                }
              },
              "inquiry-template-version": {
                "data": null
              },
              "inquiry-template": {
                "data": null
              },
              "document-files": {
                "data": []
              }
            }
          }
        }
      },
      "document-government-id": {
        "value": {
          "data": {
            "type": "document/government-id",
            "id": "doc_vXwNeVfVCcgedQ2Sg4R5F9VD",
            "attributes": {
              "status": "processed",
              "created-at": "2024-01-23T20:54:08.000Z",
              "processed-at": "2024-01-23T20:54:14.000Z",
              "processed-at-ts": 1706043254,
              "front-photo": {
                "filename": "persona_camera_1706043245796.jpg",
                "url": "https://files.withpersona.com/persona_camera_1706043245796.jpg?access_token=ACCESS_TOKEN",
                "byte-size": 298279
              },
              "back-photo": null,
              "selfie-photo": {
                "filename": "selfie_photo.jpg",
                "url": "https://files.withpersona.com/selfie_photo.jpg?access_token=ACCESS_TOKEN",
                "byte-size": 11686
              },
              "id-class": "dl",
              "name-first": "Jane",
              "name-middle": "Marie",
              "name-last": "Doe",
              "name-suffix": null,
              "birthdate": "1994-12-30",
              "address-street-1": "123 Main St",
              "address-street-2": null,
              "address-city": "San Francisco",
              "address-subdivision": "CA",
              "address-postal-code": "94111",
              "issuing-authority": null,
              "issuing-subdivision": "CA",
              "nationality": null,
              "document-number": null,
              "visa-status": null,
              "issue-date": "2021-04-29",
              "expiration-date": "2029-05-11",
              "designations": [],
              "birthplace": null,
              "height": null,
              "sex": null,
              "endorsements": null,
              "restrictions": null,
              "vehicle-class": null,
              "identification-number": "25995844"
            },
            "relationships": {
              "inquiry": {
                "data": {
                  "type": "inquiry",
                  "id": "inq_VbHWkX4hjmZryYCTGtVWHFRy"
                }
              },
              "template": {
                "data": null
              },
              "inquiry-template-version": {
                "data": {
                  "type": "inquiry-template-version",
                  "id": "itmplv_HAVumeSgCxWxhVb8tTRjaiUB"
                }
              },
              "inquiry-template": {
                "data": {
                  "type": "inquiry-template",
                  "id": "itmpl_srQQ2Ui2gvNY353u65vD61gr"
                }
              },
              "document-files": {
                "data": []
              }
            }
          }
        }
      },
      "inquiry-list": {
        "value": {
          "data": [
            {
              "type": "inquiry",
              "id": "inq_zEx4jL84ShbUyuwX6AzPSqt6",
              "attributes": {
                "status": "pending",
                "reference-id": "abc-123",
                "note": null,
                "behaviors": {
                  "request-spoof-attempts": 0,
                  "user-agent-spoof-attempts": 0,
                  "distraction-events": 0,
                  "hesitation-baseline": 29677,
                  "hesitation-count": 3,
                  "hesitation-time": 28752,
                  "shortcut-copies": 0,
                  "shortcut-pastes": 0,
                  "autofill-cancels": 0,
                  "autofill-starts": 0,
                  "devtools-open": false,
                  "completion-time": 40.172463903,
                  "hesitation-percentage": 96.88310813087575,
                  "behavior-threat-level": "low"
                },
                "tags": [],
                "creator": "creator@withpersona.com",
                "reviewer-comment": null,
                "created-at": "2023-03-29T19:06:45.000Z",
                "started-at": "2023-03-30T19:07:01.000Z",
                "completed-at": null,
                "failed-at": null,
                "marked-for-review-at": null,
                "decisioned-at": null,
                "expired-at": null,
                "redacted-at": null,
                "previous-step-name": "start",
                "next-step-name": "verification_document",
                "name-first": "Jane",
                "name-middle": "Marie",
                "name-last": "Doe",
                "birthdate": "1995-09-08",
                "address-street-1": "123 Main St",
                "address-street-2": null,
                "address-city": "San Francisco",
                "address-subdivision": "California",
                "address-subdivision-abbr": "CA",
                "address-postal-code": "94111",
                "address-postal-code-abbr": "94111",
                "social-security-number": null,
                "identification-number": null,
                "email-address": "jane@doe.com",
                "phone-number": null,
                "fields": {
                  "name-first": {
                    "type": "string",
                    "value": "Jane"
                  },
                  "name-middle": {
                    "type": "string",
                    "value": "Marie"
                  },
                  "name-last": {
                    "type": "string",
                    "value": "Doe"
                  },
                  "address-street-1": {
                    "type": "string",
                    "value": "123 Main St"
                  },
                  "address-street-2": {
                    "type": "string",
                    "value": null
                  },
                  "address-city": {
                    "type": "string",
                    "value": "San Francisco"
                  },
                  "address-subdivision": {
                    "type": "string",
                    "value": "California"
                  },
                  "address-postal-code": {
                    "type": "string",
                    "value": "94111"
                  },
                  "address-country-code": {
                    "type": "string",
                    "value": "US"
                  },
                  "birthdate": {
                    "type": "date",
                    "value": "1995-09-08"
                  },
                  "email-address": {
                    "type": "string",
                    "value": "jane@doe.com"
                  },
                  "phone-number": {
                    "type": "string",
                    "value": null
                  },
                  "identification-number": {
                    "type": "string",
                    "value": null
                  }
                }
              },
              "relationships": {
                "account": {
                  "data": {
                    "type": "account",
                    "id": "act_n2uq9eKMboaCQzu9ALWYcVdN"
                  }
                },
                "template": {
                  "data": {}
                },
                "inquiry-template": {
                  "data": {
                    "type": "inquiry-template",
                    "id": "itmpl_p8ANAJy9iqadm2buF2xcVgqH"
                  }
                },
                "inquiry-template-version": {
                  "data": {
                    "type": "inquiry-template-version",
                    "id": "itmplv_iXhqfNWqwYLAWs9G8Fm8hPfo"
                  }
                },
                "reviewer": {
                  "data": {}
                },
                "reports": {
                  "data": []
                },
                "verifications": {
                  "data": [
                    {
                      "type": "verification/database",
                      "id": "ver_uHDiwtcx3htjajvEaeMjPQcE"
                    }
                  ]
                },
                "sessions": {
                  "data": []
                },
                "documents": {
                  "data": []
                },
                "selfies": {
                  "data": []
                }
              }
            }
          ],
          "links": {
            "prev": null,
            "next": "/api/v1/inquiries?page%5Bafter%5D=inq_ByBdXDqUrguLAHjGZMuDZLCx"
          }
        }
      },
      "inquiry": {
        "value": {
          "data": {
            "type": "inquiry",
            "id": "inq_zEx4jL84ShbUyuwX6AzPSqt6",
            "attributes": {
              "status": "pending",
              "reference-id": "abc-123",
              "note": null,
              "behaviors": {
                "request-spoof-attempts": 0,
                "user-agent-spoof-attempts": 0,
                "distraction-events": 0,
                "hesitation-baseline": 29677,
                "hesitation-count": 3,
                "hesitation-time": 28752,
                "shortcut-copies": 0,
                "shortcut-pastes": 0,
                "autofill-cancels": 0,
                "autofill-starts": 0,
                "devtools-open": false,
                "completion-time": 40.172463903,
                "hesitation-percentage": 96.88310813087575,
                "behavior-threat-level": "low"
              },
              "tags": [],
              "creator": "creator@withpersona.com",
              "reviewer-comment": null,
              "created-at": "2023-03-29T19:06:45.000Z",
              "started-at": "2023-03-30T19:07:01.000Z",
              "completed-at": null,
              "failed-at": null,
              "marked-for-review-at": null,
              "decisioned-at": null,
              "expired-at": null,
              "redacted-at": null,
              "previous-step-name": "start",
              "next-step-name": "verification_document",
              "name-first": "Jane",
              "name-middle": "Marie",
              "name-last": "Doe",
              "birthdate": "1995-09-08",
              "address-street-1": "123 Main St",
              "address-street-2": null,
              "address-city": "San Francisco",
              "address-subdivision": "California",
              "address-subdivision-abbr": "CA",
              "address-postal-code": "94111",
              "address-postal-code-abbr": "94111",
              "social-security-number": null,
              "identification-number": null,
              "email-address": "jane@doe.com",
              "phone-number": null,
              "fields": {
                "name-first": {
                  "type": "string",
                  "value": "Jane"
                },
                "name-middle": {
                  "type": "string",
                  "value": "Marie"
                },
                "name-last": {
                  "type": "string",
                  "value": "Doe"
                },
                "address-street-1": {
                  "type": "string",
                  "value": "123 Main St"
                },
                "address-street-2": {
                  "type": "string",
                  "value": null
                },
                "address-city": {
                  "type": "string",
                  "value": "San Francisco"
                },
                "address-subdivision": {
                  "type": "string",
                  "value": "California"
                },
                "address-postal-code": {
                  "type": "string",
                  "value": "94111"
                },
                "address-country-code": {
                  "type": "string",
                  "value": "US"
                },
                "birthdate": {
                  "type": "date",
                  "value": "1995-09-08"
                },
                "email-address": {
                  "type": "string",
                  "value": "jane@doe.com"
                },
                "phone-number": {
                  "type": "string",
                  "value": null
                },
                "identification-number": {
                  "type": "string",
                  "value": null
                }
              }
            },
            "relationships": {
              "account": {
                "data": {
                  "type": "account",
                  "id": "act_n2uq9eKMboaCQzu9ALWYcVdN"
                }
              },
              "template": {
                "data": {}
              },
              "inquiry-template": {
                "data": {
                  "type": "inquiry-template",
                  "id": "itmpl_p8ANAJy9iqadm2buF2xcVgqH"
                }
              },
              "inquiry-template-version": {
                "data": {
                  "type": "inquiry-template-version",
                  "id": "itmplv_iXhqfNWqwYLAWs9G8Fm8hPfo"
                }
              },
              "reviewer": {
                "data": {}
              },
              "reports": {
                "data": []
              },
              "verifications": {
                "data": [
                  {
                    "type": "verification/database",
                    "id": "ver_uHDiwtcx3htjajvEaeMjPQcE"
                  }
                ]
              },
              "sessions": {
                "data": []
              },
              "documents": {
                "data": []
              },
              "selfies": {
                "data": []
              }
            }
          }
        }
      },
      "inquiry-retrieve": {
        "value": {
          "data": {
            "type": "inquiry",
            "id": "inq_zEx4jL84ShbUyuwX6AzPSqt6",
            "attributes": {
              "status": "pending",
              "reference-id": "abc-123",
              "note": null,
              "behaviors": {
                "request-spoof-attempts": 0,
                "user-agent-spoof-attempts": 0,
                "distraction-events": 0,
                "hesitation-baseline": 29677,
                "hesitation-count": 3,
                "hesitation-time": 28752,
                "shortcut-copies": 0,
                "shortcut-pastes": 0,
                "autofill-cancels": 0,
                "autofill-starts": 0,
                "devtools-open": false,
                "completion-time": 40.172463903,
                "hesitation-percentage": 96.88310813087575,
                "behavior-threat-level": "low"
              },
              "tags": [],
              "creator": "creator@withpersona.com",
              "reviewer-comment": null,
              "created-at": "2023-03-29T19:06:45.000Z",
              "started-at": "2023-03-30T19:07:01.000Z",
              "completed-at": null,
              "failed-at": null,
              "marked-for-review-at": null,
              "decisioned-at": null,
              "expired-at": null,
              "redacted-at": null,
              "previous-step-name": "start",
              "next-step-name": "verification_document",
              "name-first": "Jane",
              "name-middle": "Marie",
              "name-last": "Doe",
              "birthdate": "1995-09-08",
              "address-street-1": "123 Main St",
              "address-street-2": null,
              "address-city": "San Francisco",
              "address-subdivision": "California",
              "address-subdivision-abbr": "CA",
              "address-postal-code": "94111",
              "address-postal-code-abbr": "94111",
              "social-security-number": null,
              "identification-number": null,
              "email-address": "jane@doe.com",
              "phone-number": null,
              "fields": {
                "name-first": {
                  "type": "string",
                  "value": "Jane"
                },
                "name-middle": {
                  "type": "string",
                  "value": "Marie"
                },
                "name-last": {
                  "type": "string",
                  "value": "Doe"
                },
                "address-street-1": {
                  "type": "string",
                  "value": "123 Main St"
                },
                "address-street-2": {
                  "type": "string",
                  "value": null
                },
                "address-city": {
                  "type": "string",
                  "value": "San Francisco"
                },
                "address-subdivision": {
                  "type": "string",
                  "value": "California"
                },
                "address-postal-code": {
                  "type": "string",
                  "value": "94111"
                },
                "address-country-code": {
                  "type": "string",
                  "value": "US"
                },
                "birthdate": {
                  "type": "date",
                  "value": "1995-09-08"
                },
                "email-address": {
                  "type": "string",
                  "value": "jane@doe.com"
                },
                "phone-number": {
                  "type": "string",
                  "value": null
                },
                "identification-number": {
                  "type": "string",
                  "value": null
                }
              }
            },
            "relationships": {
              "account": {
                "data": {
                  "type": "account",
                  "id": "act_n2uq9eKMboaCQzu9ALWYcVdN"
                }
              },
              "template": {
                "data": {}
              },
              "inquiry-template": {
                "data": {
                  "type": "inquiry-template",
                  "id": "itmpl_p8ANAJy9iqadm2buF2xcVgqH"
                }
              },
              "inquiry-template-version": {
                "data": {
                  "type": "inquiry-template-version",
                  "id": "itmplv_iXhqfNWqwYLAWs9G8Fm8hPfo"
                }
              },
              "reviewer": {
                "data": {}
              },
              "reports": {
                "data": []
              },
              "verifications": {
                "data": [
                  {
                    "type": "verification/database",
                    "id": "ver_uHDiwtcx3htjajvEaeMjPQcE"
                  }
                ]
              },
              "sessions": {
                "data": []
              },
              "documents": {
                "data": []
              },
              "selfies": {
                "data": []
              }
            }
          },
          "included": [
            {
              "type": "inquiry-session",
              "id": "iqse_ABC123",
              "attributes": {
                "status": "expired",
                "created-at": "2023-07-25T04:15:20.000Z",
                "started-at": "2023-07-25T05:14:50.000Z",
                "expired-at": "2023-07-26T05:14:50.000Z",
                "ip-address": "127.0.0.1",
                "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36",
                "os-name": "Mac",
                "os-full-version": "10.15.7",
                "device-type": "desktop",
                "device-name": null,
                "browser-name": "Chrome",
                "browser-full-version": "115.0.0.0",
                "mobile-sdk-name": null,
                "mobile-sdk-full-version": null,
                "device-handoff-method": null,
                "is-proxy": false,
                "is-tor": false,
                "is-datacenter": false,
                "threat-level": "low",
                "country-code": "US",
                "country-name": "United States",
                "region-code": "CA",
                "region-name": "California",
                "latitude": 37.7688,
                "longitude": -122.262
              },
              "relationships": {
                "inquiry": {
                  "data": {
                    "type": "inquiry",
                    "id": "inq_ABC123"
                  }
                }
              }
            },
            {
              "type": "inquiry-template",
              "id": "itmpl_ABC123",
              "attributes": {
                "status": "active",
                "name": "Twilio Desktop"
              },
              "relationships": {
                "latest-published-version": {
                  "data": {
                    "type": "inquiry-template-version",
                    "id": "itmplv_ABC123"
                  }
                }
              }
            }
          ]
        }
      },
      "inquiry-one-time-link": {
        "value": {
          "data": {
            "type": "inquiry",
            "id": "inq_zEx4jL84ShbUyuwX6AzPSqt6",
            "attributes": {
              "status": "pending",
              "reference-id": "abc-123",
              "note": null,
              "behaviors": {
                "request-spoof-attempts": 0,
                "user-agent-spoof-attempts": 0,
                "distraction-events": 0,
                "hesitation-baseline": 29677,
                "hesitation-count": 3,
                "hesitation-time": 28752,
                "shortcut-copies": 0,
                "shortcut-pastes": 0,
                "autofill-cancels": 0,
                "autofill-starts": 0,
                "devtools-open": false,
                "completion-time": 40.172463903,
                "hesitation-percentage": 96.88310813087575,
                "behavior-threat-level": "low"
              },
              "tags": [],
              "creator": "creator@withpersona.com",
              "reviewer-comment": null,
              "created-at": "2023-03-29T19:06:45.000Z",
              "started-at": "2023-03-30T19:07:01.000Z",
              "completed-at": null,
              "failed-at": null,
              "marked-for-review-at": null,
              "decisioned-at": null,
              "expired-at": null,
              "redacted-at": null,
              "previous-step-name": "start",
              "next-step-name": "verification_document",
              "name-first": "Jane",
              "name-middle": "Marie",
              "name-last": "Doe",
              "birthdate": "1995-09-08",
              "address-street-1": "123 Main St",
              "address-street-2": null,
              "address-city": "San Francisco",
              "address-subdivision": "California",
              "address-subdivision-abbr": "CA",
              "address-postal-code": "94111",
              "address-postal-code-abbr": "94111",
              "social-security-number": null,
              "identification-number": null,
              "email-address": "jane@doe.com",
              "phone-number": null,
              "fields": {
                "name-first": {
                  "type": "string",
                  "value": "Jane"
                },
                "name-middle": {
                  "type": "string",
                  "value": "Marie"
                },
                "name-last": {
                  "type": "string",
                  "value": "Doe"
                },
                "address-street-1": {
                  "type": "string",
                  "value": "123 Main St"
                },
                "address-street-2": {
                  "type": "string",
                  "value": null
                },
                "address-city": {
                  "type": "string",
                  "value": "San Francisco"
                },
                "address-subdivision": {
                  "type": "string",
                  "value": "California"
                },
                "address-postal-code": {
                  "type": "string",
                  "value": "94111"
                },
                "address-country-code": {
                  "type": "string",
                  "value": "US"
                },
                "birthdate": {
                  "type": "date",
                  "value": "1995-09-08"
                },
                "email-address": {
                  "type": "string",
                  "value": "jane@doe.com"
                },
                "phone-number": {
                  "type": "string",
                  "value": null
                },
                "identification-number": {
                  "type": "string",
                  "value": null
                }
              }
            },
            "relationships": {
              "account": {
                "data": {
                  "type": "account",
                  "id": "act_n2uq9eKMboaCQzu9ALWYcVdN"
                }
              },
              "template": {
                "data": {}
              },
              "inquiry-template": {
                "data": {
                  "type": "inquiry-template",
                  "id": "itmpl_p8ANAJy9iqadm2buF2xcVgqH"
                }
              },
              "inquiry-template-version": {
                "data": {
                  "type": "inquiry-template-version",
                  "id": "itmplv_iXhqfNWqwYLAWs9G8Fm8hPfo"
                }
              },
              "reviewer": {
                "data": {}
              },
              "reports": {
                "data": []
              },
              "verifications": {
                "data": [
                  {
                    "type": "verification/database",
                    "id": "ver_uHDiwtcx3htjajvEaeMjPQcE"
                  }
                ]
              },
              "sessions": {
                "data": []
              },
              "documents": {
                "data": []
              },
              "selfies": {
                "data": []
              }
            }
          },
          "meta": {
            "one-time-link": "https://withpersona.com/verify?code=us1-asdf",
            "one-time-link-short": "https://perso.na/verify?code=ABC123"
          }
        }
      },
      "inquiry-resume": {
        "value": {
          "data": {
            "type": "inquiry",
            "id": "inq_zEx4jL84ShbUyuwX6AzPSqt6",
            "attributes": {
              "status": "pending",
              "reference-id": "abc-123",
              "note": null,
              "behaviors": {
                "request-spoof-attempts": 0,
                "user-agent-spoof-attempts": 0,
                "distraction-events": 0,
                "hesitation-baseline": 29677,
                "hesitation-count": 3,
                "hesitation-time": 28752,
                "shortcut-copies": 0,
                "shortcut-pastes": 0,
                "autofill-cancels": 0,
                "autofill-starts": 0,
                "devtools-open": false,
                "completion-time": 40.172463903,
                "hesitation-percentage": 96.88310813087575,
                "behavior-threat-level": "low"
              },
              "tags": [],
              "creator": "creator@withpersona.com",
              "reviewer-comment": null,
              "created-at": "2023-03-29T19:06:45.000Z",
              "started-at": "2023-03-30T19:07:01.000Z",
              "completed-at": null,
              "failed-at": null,
              "marked-for-review-at": null,
              "decisioned-at": null,
              "expired-at": null,
              "redacted-at": null,
              "previous-step-name": "start",
              "next-step-name": "verification_document",
              "name-first": "Jane",
              "name-middle": "Marie",
              "name-last": "Doe",
              "birthdate": "1995-09-08",
              "address-street-1": "123 Main St",
              "address-street-2": null,
              "address-city": "San Francisco",
              "address-subdivision": "California",
              "address-subdivision-abbr": "CA",
              "address-postal-code": "94111",
              "address-postal-code-abbr": "94111",
              "social-security-number": null,
              "identification-number": null,
              "email-address": "jane@doe.com",
              "phone-number": null,
              "fields": {
                "name-first": {
                  "type": "string",
                  "value": "Jane"
                },
                "name-middle": {
                  "type": "string",
                  "value": "Marie"
                },
                "name-last": {
                  "type": "string",
                  "value": "Doe"
                },
                "address-street-1": {
                  "type": "string",
                  "value": "123 Main St"
                },
                "address-street-2": {
                  "type": "string",
                  "value": null
                },
                "address-city": {
                  "type": "string",
                  "value": "San Francisco"
                },
                "address-subdivision": {
                  "type": "string",
                  "value": "California"
                },
                "address-postal-code": {
                  "type": "string",
                  "value": "94111"
                },
                "address-country-code": {
                  "type": "string",
                  "value": "US"
                },
                "birthdate": {
                  "type": "date",
                  "value": "1995-09-08"
                },
                "email-address": {
                  "type": "string",
                  "value": "jane@doe.com"
                },
                "phone-number": {
                  "type": "string",
                  "value": null
                },
                "identification-number": {
                  "type": "string",
                  "value": null
                }
              }
            },
            "relationships": {
              "account": {
                "data": {
                  "type": "account",
                  "id": "act_n2uq9eKMboaCQzu9ALWYcVdN"
                }
              },
              "template": {
                "data": {}
              },
              "inquiry-template": {
                "data": {
                  "type": "inquiry-template",
                  "id": "itmpl_p8ANAJy9iqadm2buF2xcVgqH"
                }
              },
              "inquiry-template-version": {
                "data": {
                  "type": "inquiry-template-version",
                  "id": "itmplv_iXhqfNWqwYLAWs9G8Fm8hPfo"
                }
              },
              "reviewer": {
                "data": {}
              },
              "reports": {
                "data": []
              },
              "verifications": {
                "data": [
                  {
                    "type": "verification/database",
                    "id": "ver_uHDiwtcx3htjajvEaeMjPQcE"
                  }
                ]
              },
              "sessions": {
                "data": []
              },
              "documents": {
                "data": []
              },
              "selfies": {
                "data": []
              }
            }
          },
          "meta": {
            "session-token": "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJpcXNlX1Q4UHJxcG9FaHdoVVYxd0hSZXVVOW9mcyIsImF1ZCI6InBlcnNvbmEtdmVyaWZ5IiwiaXNzIjoic3RhZ2luZy53aXRocGVyc29uYS5jb20iLCJpYXQiOjE1NzM4NTI2NjEsIm5iZiI6MTU3Mzg1MjY2MSwiZXhwIjoxNTczOTM5MDYxLCJqdGkiOiI5NWRlNjhkOS1hZjI4LTRiMzItOWIxYi03MjA4MTg3NTI3N2IiLCJzaWQiOiJpcXNlX1Q4UHJxcG9FaHdoVVYxd0hSZXVVOW9mcyJ9.LN6DEnfjP5cZoZ3w41RgyX5QVmutmjHja_bRHOmDjg0"
          }
        }
      },
      "inquiry-session": {
        "value": {
          "data": {
            "type": "inquiry-session",
            "id": "iqse_ABC123",
            "attributes": {
              "status": "expired",
              "created-at": "2023-07-25T04:15:20.000Z",
              "started-at": "2023-07-25T05:14:50.000Z",
              "expired-at": "2023-07-26T05:14:50.000Z",
              "ip-address": "127.0.0.1",
              "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36",
              "os-name": "Mac",
              "os-full-version": "10.15.7",
              "device-type": "desktop",
              "device-name": null,
              "browser-name": "Chrome",
              "browser-full-version": "115.0.0.0",
              "mobile-sdk-name": null,
              "mobile-sdk-full-version": null,
              "device-handoff-method": null,
              "is-proxy": false,
              "is-tor": false,
              "is-datacenter": false,
              "threat-level": "low",
              "country-code": "US",
              "country-name": "United States",
              "region-code": "CA",
              "region-name": "California",
              "latitude": 37.7688,
              "longitude": -122.262
            },
            "relationships": {
              "inquiry": {
                "data": {
                  "type": "inquiry",
                  "id": "inq_ABC123"
                }
              }
            }
          }
        }
      },
      "list-item-browser-fingerprint": {
        "value": {
          "data": {
            "type": "list-item/browser-fingerprint",
            "id": "libf_N6PqYkfSqeqiQYWoeHA3GGDo",
            "attributes": {
              "status": "pending",
              "archived-at": null,
              "updated-at": "2020-09-18T18:06:40.515Z'",
              "created-at": "2020-09-18T18:06:40.515Z'",
              "match-count": 0,
              "value": "3082c312c9bfc8f0a43bc7173b18afe6"
            },
            "relationships": {
              "creator": {
                "data": null
              }
            }
          }
        }
      },
      "list-item-browser-fingerprint-archived": {
        "value": {
          "data": {
            "type": "list-item/browser-fingerprint",
            "id": "libf_N6PqYkfSqeqiQYWoeHA3GGDo",
            "attributes": {
              "status": "archived",
              "archived-at": "2020-12-18T19:07:53.000Z",
              "updated-at": "2020-09-18T18:06:40.515Z'",
              "created-at": "2020-09-18T18:06:40.515Z'",
              "match-count": 0,
              "value": "3082c312c9bfc8f0a43bc7173b18afe6"
            },
            "relationships": {
              "creator": {
                "data": null
              }
            }
          }
        }
      },
      "list-item-country": {
        "value": {
          "data": {
            "type": "list-item/country",
            "id": "lic_wt5cgLbSi7twJ8itK7jxCs8q",
            "attributes": {
              "status": "pending",
              "archived-at": null,
              "updated-at": "2020-09-18T17:58:06.866Z",
              "created-at": "2020-09-18T17:58:06.866Z",
              "match-count": 0,
              "country-code": "US"
            },
            "relationships": {
              "creator": {
                "data": null
              }
            }
          }
        }
      },
      "list-item-country-archived": {
        "value": {
          "data": {
            "type": "list-item/country",
            "id": "lic_wt5cgLbSi7twJ8itK7jxCs8q",
            "attributes": {
              "status": "archived",
              "archived-at": "2020-12-18T19:07:53.000Z",
              "updated-at": "2020-09-18T17:58:06.866Z",
              "created-at": "2020-09-18T17:58:06.866Z",
              "match-count": 0,
              "country-code": "US"
            },
            "relationships": {
              "creator": {
                "data": null
              }
            }
          }
        }
      },
      "list-item-email-address": {
        "value": {
          "data": {
            "type": "list-item/email-address",
            "id": "liea_wt5cgLbSi7twJ8itK7jxCs8q",
            "attributes": {
              "status": "pending",
              "archived-at": null,
              "updated-at": "2020-09-18T17:58:06.866Z",
              "created-at": "2020-09-18T17:58:06.866Z",
              "match-count": 0,
              "value": "joe-imposter@yahoo.com",
              "match-type": "email_address"
            },
            "relationships": {
              "creator": {
                "data": null
              }
            }
          }
        }
      },
      "list-item-email-address-archived": {
        "value": {
          "data": {
            "type": "list-item/email-address",
            "id": "liea_wt5cgLbSi7twJ8itK7jxCs8q",
            "attributes": {
              "status": "archived",
              "archived-at": "2020-12-18T19:07:53.000Z",
              "updated-at": "2020-09-18T17:58:06.866Z",
              "created-at": "2020-09-18T17:58:06.866Z",
              "match-count": 0,
              "value": "joe-imposter@yahoo.com",
              "match-type": "email_address"
            },
            "relationships": {
              "creator": {
                "data": null
              }
            }
          }
        }
      },
      "list-item-face": {
        "value": {
          "data": {
            "type": "list-item/face",
            "id": "lifc_wt5cgLbSi7twJ8itK7jxCs8q",
            "attributes": {
              "status": "pending",
              "archived-at": null,
              "updated-at": "2020-09-18T17:58:06.866Z",
              "created-at": "2020-09-18T17:58:06.866Z",
              "match-count": 0,
              "face-photo": {
                "filename": "photo.png",
                "url": "https://files.withpersona.com/photo.png?access_token=ACCESS_TOKEN",
                "byte-size": 124917
              }
            },
            "relationships": {
              "creator": {
                "data": null
              }
            }
          }
        }
      },
      "list-item-face-archived": {
        "value": {
          "data": {
            "type": "list-item/face",
            "id": "lifc_wt5cgLbSi7twJ8itK7jxCs8q",
            "attributes": {
              "status": "archived",
              "archived-at": "2020-12-18T19:07:53.000Z",
              "updated-at": "2020-09-18T17:58:06.866Z",
              "created-at": "2020-09-18T17:58:06.866Z",
              "match-count": 0,
              "face-photo": {
                "filename": "photo.png",
                "url": "https://files.withpersona.com/photo.png?access_token=ACCESS_TOKEN",
                "byte-size": 124917
              }
            },
            "relationships": {
              "creator": {
                "data": null
              }
            }
          }
        }
      },
      "list-item-field": {
        "value": {
          "data": {
            "type": "list-item/field",
            "id": "liif_soqGRWaUXZct3pCRbjRaXFqz",
            "attributes": {
              "status": "pending",
              "archived-at": "2020-09-18T19:07:53.000Z",
              "updated-at": "2020-09-18T18:07:53.000Z",
              "created-at": "2020-09-18T18:07:53.000Z",
              "match-count": 0,
              "field-value": "abc123"
            },
            "relationships": {
              "creator": {
                "data": null
              }
            }
          }
        }
      },
      "list-item-field-archived": {
        "value": {
          "data": {
            "type": "list-item/field",
            "id": "liif_soqGRWaUXZct3pCRbjRaXFqz",
            "attributes": {
              "status": "archived",
              "archived-at": "2020-12-18T19:07:53.000Z",
              "updated-at": "2020-09-18T18:07:53.000Z",
              "created-at": "2020-09-18T18:07:53.000Z",
              "match-count": 0,
              "field-value": "abc123"
            },
            "relationships": {
              "creator": {
                "data": null
              }
            }
          }
        }
      },
      "list-item-geolocation": {
        "value": {
          "data": {
            "type": "list-item/geolocation",
            "id": "ligl_DQdchRN288UN6sn9mAmEcMu5",
            "attributes": {
              "status": "pending",
              "archived-at": null,
              "updated-at": "2020-09-18T18:03:30.324Z",
              "created-at": "2020-09-18T18:03:30.324Z",
              "match-count": 0,
              "latitude": 37.7879461,
              "longitude": -122.3977409,
              "radius-meters": 10
            },
            "relationships": {
              "creator": {
                "data": null
              }
            }
          }
        }
      },
      "list-item-geolocation-archived": {
        "value": {
          "data": {
            "type": "list-item/geolocation",
            "id": "ligl_DQdchRN288UN6sn9mAmEcMu5",
            "attributes": {
              "status": "archived",
              "archived-at": "2020-12-18T19:07:53.000Z",
              "updated-at": "2020-09-18T18:03:30.324Z",
              "created-at": "2020-09-18T18:03:30.324Z",
              "match-count": 0,
              "latitude": 37.7879461,
              "longitude": -122.3977409,
              "radius-meters": 10
            },
            "relationships": {
              "creator": {
                "data": null
              }
            }
          }
        }
      },
      "list-item-government-id-number": {
        "value": {
          "data": {
            "type": "list-item/government-id-number",
            "id": "ligin_soqGRWaUXZct3pCRbjRaXFqz",
            "attributes": {
              "status": "pending",
              "archived-at": null,
              "updated-at": "2020-09-18T18:07:53.000Z",
              "created-at": "2020-09-18T18:07:53.000Z",
              "match-count": 0,
              "id-class": "dl",
              "id-number": "F4K3NUM"
            },
            "relationships": {
              "creator": {
                "data": null
              }
            }
          }
        }
      },
      "list-item-government-id-number-archived": {
        "value": {
          "data": {
            "type": "list-item/government-id-number",
            "id": "ligin_soqGRWaUXZct3pCRbjRaXFqz",
            "attributes": {
              "status": "archived",
              "archived-at": "2020-12-18T19:07:53.000Z",
              "updated-at": "2020-09-18T18:07:53.000Z",
              "created-at": "2020-09-18T18:07:53.000Z",
              "match-count": 0,
              "id-class": "dl",
              "id-number": "F4K3NUM"
            },
            "relationships": {
              "creator": {
                "data": null
              }
            }
          }
        }
      },
      "list-item-ip-address": {
        "value": {
          "data": {
            "type": "list-item/ip-address",
            "id": "liip_soqGRWaUXZct3pCRbjRaXFqz",
            "attributes": {
              "status": "pending",
              "archived-at": null,
              "updated-at": "2020-09-18T18:07:53.000Z",
              "created-at": "2020-09-18T18:07:53.000Z",
              "match-count": 0,
              "value": "127.0.0.0/24"
            },
            "relationships": {
              "creator": {
                "data": null
              }
            }
          }
        }
      },
      "list-item-address-archived": {
        "value": {
          "data": {
            "type": "list-item/ip-address",
            "id": "liip_soqGRWaUXZct3pCRbjRaXFqz",
            "attributes": {
              "status": "archived",
              "archived-at": "2020-12-18T19:07:53.000Z",
              "updated-at": "2020-09-18T18:07:53.000Z",
              "created-at": "2020-09-18T18:07:53.000Z",
              "match-count": 0,
              "value": "127.0.0.0/24"
            },
            "relationships": {
              "creator": {
                "data": null
              }
            }
          }
        }
      },
      "list-item-name": {
        "value": {
          "data": {
            "type": "list-item/name",
            "id": "lin_soqGRWaUXZct3pCRbjRaXFqz",
            "attributes": {
              "status": "pending",
              "archived-at": null,
              "updated-at": "2020-09-18T18:07:53.000Z",
              "created-at": "2020-09-18T18:07:53.000Z",
              "match-count": 0,
              "name-first": "Joe",
              "name-last": "Imposter"
            },
            "relationships": {
              "creator": {
                "data": null
              }
            }
          }
        }
      },
      "list-item-name-archived": {
        "value": {
          "data": {
            "type": "list-item/name",
            "id": "lin_soqGRWaUXZct3pCRbjRaXFqz",
            "attributes": {
              "status": "archived",
              "archived-at": "2020-12-18T19:07:53.000Z",
              "updated-at": "2020-09-18T18:07:53.000Z",
              "created-at": "2020-09-18T18:07:53.000Z",
              "match-count": 0,
              "name-first": "Joe",
              "name-last": "Imposter"
            },
            "relationships": {
              "creator": {
                "data": null
              }
            }
          }
        }
      },
      "list-item-phone-number": {
        "value": {
          "data": {
            "type": "list-item/phone-number",
            "id": "lipn_soqGRWaUXZct3pCRbjRaXFqz",
            "attributes": {
              "status": "pending",
              "archived-at": null,
              "updated-at": "2020-09-18T18:07:53.000Z",
              "created-at": "2020-09-18T18:07:53.000Z",
              "match-count": 0,
              "value": "18006009777"
            },
            "relationships": {
              "creator": {
                "data": null
              }
            }
          }
        }
      },
      "list-item-phone-number-archived": {
        "value": {
          "data": {
            "type": "list-item/phone-number",
            "id": "lipn_soqGRWaUXZct3pCRbjRaXFqz",
            "attributes": {
              "status": "archived",
              "archived-at": "2020-12-18T19:07:53.000Z",
              "updated-at": "2020-09-18T18:07:53.000Z",
              "created-at": "2020-09-18T18:07:53.000Z",
              "match-count": 0,
              "value": "18006009777"
            },
            "relationships": {
              "creator": {
                "data": null
              }
            }
          }
        }
      },
      "list-item-string": {
        "value": {
          "data": {
            "type": "list-item/string",
            "id": "lin_soqGRWaUXZct3pCRbjRaXFqz",
            "attributes": {
              "status": "pending",
              "archived-at": "2020-09-18T19:07:53.000Z",
              "updated-at": "2020-09-18T18:07:53.000Z",
              "created-at": "2020-09-18T18:07:53.000Z",
              "match-count": 0,
              "value": "abc123"
            },
            "relationships": {
              "creator": {
                "data": null
              }
            }
          }
        }
      },
      "list-item-string-archived": {
        "value": {
          "data": {
            "type": "list-item/string",
            "id": "lin_soqGRWaUXZct3pCRbjRaXFqz",
            "attributes": {
              "status": "archived",
              "archived-at": "2020-12-18T19:07:53.000Z",
              "updated-at": "2020-09-18T18:07:53.000Z",
              "created-at": "2020-09-18T18:07:53.000Z",
              "match-count": 0,
              "value": "abc123"
            },
            "relationships": {
              "creator": {
                "data": null
              }
            }
          }
        }
      },
      "transaction-list": {
        "value": {
          "data": [
            {
              "type": "transaction",
              "id": "txn_ABC123",
              "attributes": {
                "status": "declined",
                "reference-id": null,
                "external-id": null,
                "fields": {
                  "country": {
                    "type": "string",
                    "value": "US"
                  },
                  "name-first": {
                    "type": "string",
                    "value": "LeBron"
                  },
                  "name-last": {
                    "type": "string",
                    "value": "James"
                  },
                  "selected-id-class": {
                    "type": "string",
                    "value": "dl"
                  },
                  "front-photo": {
                    "type": "file",
                    "value": {
                      "filename": "image.png",
                      "byte-size": 237011,
                      "mime-type": "image/png",
                      "url": "https://files.withpersona.com/image.png?access_token=ACCESS_ABC123"
                    }
                  },
                  "back-photo": {
                    "type": "file",
                    "value": {
                      "filename": "image.png",
                      "byte-size": 237011,
                      "mime-type": "image/png",
                      "url": "https://files.withpersona.com/image.png?access_token=ACCESS_ABC123"
                    }
                  }
                },
                "tags": [],
                "created-at": "2023-05-26T16:49:33.860Z",
                "updated-at": "2023-05-26T16:49:43.965Z"
              },
              "relationships": {
                "reviewer": {
                  "data": {
                    "type": "workflow-run",
                    "id": "wfr_ABC123"
                  }
                },
                "transaction-label": {
                  "data": null
                },
                "transaction-type": {
                  "data": {
                    "type": "transaction-type",
                    "id": "txntp_ABC123"
                  }
                },
                "related-objects": {
                  "data": [
                    {
                      "type": "account",
                      "id": "act_ABC123"
                    },
                    {
                      "type": "verification/government-id",
                      "id": "ver_ABC123"
                    }
                  ]
                }
              }
            }
          ],
          "links": {
            "prev": null,
            "next": "/api/v1/transactions?page%5Bafter%5D=txn_ABC123"
          }
        }
      },
      "transaction": {
        "value": {
          "data": {
            "type": "transaction",
            "id": "txn_ABC123",
            "attributes": {
              "status": "declined",
              "reference-id": null,
              "external-id": null,
              "fields": {
                "country": {
                  "type": "string",
                  "value": "US"
                },
                "name-first": {
                  "type": "string",
                  "value": "LeBron"
                },
                "name-last": {
                  "type": "string",
                  "value": "James"
                },
                "selected-id-class": {
                  "type": "string",
                  "value": "dl"
                },
                "front-photo": {
                  "type": "file",
                  "value": {
                    "filename": "image.png",
                    "byte-size": 237011,
                    "mime-type": "image/png",
                    "url": "https://files.withpersona.com/image.png?access_token=ACCESS_ABC123"
                  }
                },
                "back-photo": {
                  "type": "file",
                  "value": {
                    "filename": "image.png",
                    "byte-size": 237011,
                    "mime-type": "image/png",
                    "url": "https://files.withpersona.com/image.png?access_token=ACCESS_ABC123"
                  }
                }
              },
              "tags": [],
              "created-at": "2023-05-26T16:49:33.860Z",
              "updated-at": "2023-05-26T16:49:43.965Z"
            },
            "relationships": {
              "reviewer": {
                "data": {
                  "type": "workflow-run",
                  "id": "wfr_ABC123"
                }
              },
              "transaction-label": {
                "data": null
              },
              "transaction-type": {
                "data": {
                  "type": "transaction-type",
                  "id": "txntp_ABC123"
                }
              },
              "related-objects": {
                "data": [
                  {
                    "type": "account",
                    "id": "act_ABC123"
                  },
                  {
                    "type": "verification/government-id",
                    "id": "ver_ABC123"
                  }
                ]
              }
            }
          }
        }
      },
      "transaction-retrieve": {
        "value": {
          "data": {
            "type": "transaction",
            "id": "txn_ABC123",
            "attributes": {
              "status": "declined",
              "reference-id": null,
              "external-id": null,
              "fields": {
                "country": {
                  "type": "string",
                  "value": "US"
                },
                "name-first": {
                  "type": "string",
                  "value": "LeBron"
                },
                "name-last": {
                  "type": "string",
                  "value": "James"
                },
                "selected-id-class": {
                  "type": "string",
                  "value": "dl"
                },
                "front-photo": {
                  "type": "file",
                  "value": {
                    "filename": "image.png",
                    "byte-size": 237011,
                    "mime-type": "image/png",
                    "url": "https://files.withpersona.com/image.png?access_token=ACCESS_ABC123"
                  }
                },
                "back-photo": {
                  "type": "file",
                  "value": {
                    "filename": "image.png",
                    "byte-size": 237011,
                    "mime-type": "image/png",
                    "url": "https://files.withpersona.com/image.png?access_token=ACCESS_ABC123"
                  }
                }
              },
              "tags": [],
              "created-at": "2023-05-26T16:49:33.860Z",
              "updated-at": "2023-05-26T16:49:43.965Z"
            },
            "relationships": {
              "reviewer": {
                "data": {
                  "type": "workflow-run",
                  "id": "wfr_ABC123"
                }
              },
              "transaction-label": {
                "data": null
              },
              "transaction-type": {
                "data": {
                  "type": "transaction-type",
                  "id": "txntp_ABC123"
                }
              },
              "related-objects": {
                "data": [
                  {
                    "type": "account",
                    "id": "act_ABC123"
                  },
                  {
                    "type": "verification/government-id",
                    "id": "ver_ABC123"
                  }
                ]
              }
            }
          },
          "included": [
            {
              "type": "account",
              "id": "act_ABC123",
              "attributes": {
                "reference-id": null,
                "external-id": null,
                "created-at": "2023-05-26T16:49:35.000Z",
                "updated-at": "2023-05-26T16:49:35.000Z",
                "redacted-at": null,
                "fields": {
                  "name": {
                    "type": "hash",
                    "value": {
                      "first": {
                        "type": "string",
                        "value": null
                      },
                      "middle": {
                        "type": "string",
                        "value": null
                      },
                      "last": {
                        "type": "string",
                        "value": null
                      }
                    }
                  },
                  "address": {
                    "type": "hash",
                    "value": {
                      "street-1": {
                        "type": "string",
                        "value": null
                      },
                      "street-2": {
                        "type": "string",
                        "value": null
                      },
                      "subdivision": {
                        "type": "string",
                        "value": null
                      },
                      "city": {
                        "type": "string",
                        "value": null
                      },
                      "postal-code": {
                        "type": "string",
                        "value": null
                      },
                      "country-code": {
                        "type": "string",
                        "value": null
                      }
                    }
                  },
                  "identification-numbers": {
                    "type": "array",
                    "value": []
                  },
                  "birthdate": {
                    "type": "date",
                    "value": null
                  },
                  "phone-number": {
                    "type": "string",
                    "value": null
                  },
                  "email-address": {
                    "type": "string",
                    "value": null
                  },
                  "selfie-photo": {
                    "type": "file",
                    "value": null
                  }
                },
                "country-code": null,
                "tags": []
              }
            },
            {
              "type": "verification/government-id",
              "id": "ver_ABC123",
              "attributes": {
                "status": "failed",
                "created-at": "2023-05-26T16:49:43.000Z",
                "created-at-ts": 1685119783,
                "submitted-at": "2023-05-26T16:49:43.000Z",
                "submitted-at-ts": 1685119783,
                "completed-at": "2023-05-26T16:49:43.000Z",
                "completed-at-ts": 1685119783,
                "country-code": null,
                "entity-confidence-score": 0,
                "entity-confidence-reasons": [
                  "generic"
                ],
                "front-photo-url": "https://files.withpersona.com/image.jpg?access_token=ACCESS_ABC123",
                "back-photo-url": "https://files.withpersona.com/image.jpg?access_token=ACCESS_ABC123",
                "photo-urls": [
                  {
                    "page": "front",
                    "url": "https://files.withpersona.com/image.jpg?access_token=ACCESS_ABC123",
                    "normalized-url": "https://files.withpersona.com/image.jpg?access_token=ACCESS_ABC123",
                    "original-urls": [
                      "https://files.withpersona.com/image.png?access_token=ACCESS_ABC123"
                    ],
                    "byte-size": 62347
                  },
                  {
                    "page": "back",
                    "url": "https://files.withpersona.com/image.jpg?access_token=ACCESS_ABC123",
                    "normalized-url": "https://files.withpersona.com/image.jpg?access_token=ACCESS_ABC123",
                    "original-urls": [
                      "https://files.withpersona.com/image.png?access_token=ACCESS_ABC123"
                    ],
                    "byte-size": 62347
                  }
                ],
                "selfie-photo": null,
                "selfie-photo-url": null,
                "video-url": null,
                "id-class": null,
                "capture-method": "api",
                "expiration-date": null,
                "endorsements": null,
                "restrictions": null,
                "vehicle-class": null,
                "checks": [
                  {
                    "name": "id_aamva_database_lookup",
                    "status": "not_applicable",
                    "reasons": [
                      "disabled"
                    ],
                    "requirement": "not_required",
                    "metadata": {}
                  },
                  {
                    "name": "id_account_comparison",
                    "status": "not_applicable",
                    "reasons": [
                      "no_account"
                    ],
                    "requirement": "not_required",
                    "metadata": {}
                  },
                  {
                    "name": "id_age_comparison",
                    "status": "not_applicable",
                    "reasons": [
                      "missing_birthdate"
                    ],
                    "requirement": "not_required",
                    "metadata": {}
                  },
                  {
                    "name": "id_barcode_detection",
                    "status": "failed",
                    "reasons": [
                      "barcode_not_decoded"
                    ],
                    "requirement": "not_required",
                    "metadata": {}
                  },
                  {
                    "name": "id_barcode_inconsistency_detection",
                    "status": "not_applicable",
                    "reasons": [
                      "barcode_not_decoded"
                    ],
                    "requirement": "not_required",
                    "metadata": {}
                  },
                  {
                    "name": "id_blur_detection",
                    "status": "passed",
                    "reasons": [],
                    "requirement": "not_required",
                    "metadata": {}
                  },
                  {
                    "name": "id_color_inconsistency_detection",
                    "status": "passed",
                    "reasons": [],
                    "requirement": "not_required",
                    "metadata": {}
                  },
                  {
                    "name": "id_disallowed_country_detection",
                    "status": "not_applicable",
                    "reasons": [
                      "no_country"
                    ],
                    "requirement": "required",
                    "metadata": {}
                  },
                  {
                    "name": "id_disallowed_type_detection",
                    "status": "failed",
                    "reasons": [
                      "type_not_detected"
                    ],
                    "requirement": "required",
                    "metadata": {
                      "country-code": null,
                      "detected-id-designations": [],
                      "disallowed-id-designations": []
                    }
                  },
                  {
                    "name": "id_double_side_detection",
                    "status": "failed",
                    "reasons": [
                      "side_submitted_twice"
                    ],
                    "requirement": "not_required",
                    "metadata": {}
                  },
                  {
                    "name": "id_electronic_replica_detection",
                    "status": "failed",
                    "reasons": [
                      "replica_detected"
                    ],
                    "requirement": "not_required",
                    "metadata": {}
                  },
                  {
                    "name": "id_entity_detection",
                    "status": "failed",
                    "reasons": [
                      "cannot_verify_id"
                    ],
                    "requirement": "required",
                    "metadata": {}
                  },
                  {
                    "name": "id_expired_detection",
                    "status": "not_applicable",
                    "reasons": [
                      "no_expiration_date"
                    ],
                    "requirement": "required",
                    "metadata": {}
                  },
                  {
                    "name": "id_extraction_inconsistency_detection",
                    "status": "not_applicable",
                    "reasons": [
                      "missing_properties"
                    ],
                    "requirement": "not_required",
                    "metadata": {
                      "check-requirements": []
                    }
                  },
                  {
                    "name": "id_extracted_properties_detection",
                    "status": "not_applicable",
                    "reasons": [
                      "no_required_properties"
                    ],
                    "requirement": "not_required",
                    "metadata": {}
                  },
                  {
                    "name": "id_fabrication_detection",
                    "status": "passed",
                    "reasons": [],
                    "requirement": "not_required",
                    "metadata": {}
                  },
                  {
                    "name": "id_glare_detection",
                    "status": "failed",
                    "reasons": [
                      "too_much_glare"
                    ],
                    "requirement": "not_required",
                    "metadata": {}
                  },
                  {
                    "name": "id_handwriting_detection",
                    "status": "passed",
                    "reasons": [],
                    "requirement": "not_required",
                    "metadata": {}
                  },
                  {
                    "name": "id_inquiry_comparison",
                    "status": "not_applicable",
                    "reasons": [
                      "no_inquiry"
                    ],
                    "requirement": "not_required",
                    "metadata": {}
                  },
                  {
                    "name": "id_mrz_detection",
                    "status": "not_applicable",
                    "reasons": [],
                    "requirement": "required",
                    "metadata": {}
                  },
                  {
                    "name": "id_mrz_inconsistency_detection",
                    "status": "not_applicable",
                    "reasons": [
                      "mrz_not_found"
                    ],
                    "requirement": "not_required",
                    "metadata": {}
                  },
                  {
                    "name": "id_number_format_inconsistency_detection",
                    "status": "not_applicable",
                    "reasons": [
                      "invalid_country"
                    ],
                    "requirement": "not_required",
                    "metadata": {}
                  },
                  {
                    "name": "id_po_box_detection",
                    "status": "not_applicable",
                    "reasons": [
                      "missing_address"
                    ],
                    "requirement": "not_required",
                    "metadata": {}
                  },
                  {
                    "name": "id_portrait_clarity_detection",
                    "status": "not_applicable",
                    "reasons": [],
                    "requirement": "required",
                    "metadata": {}
                  },
                  {
                    "name": "id_portrait_detection",
                    "status": "failed",
                    "reasons": [
                      "portrait_not_found"
                    ],
                    "requirement": "required",
                    "metadata": {}
                  },
                  {
                    "name": "id_real_id_detection",
                    "status": "not_applicable",
                    "reasons": [
                      "disabled"
                    ],
                    "requirement": "not_required",
                    "metadata": {}
                  },
                  {
                    "name": "id_tamper_detection",
                    "status": "passed",
                    "reasons": [],
                    "requirement": "not_required",
                    "metadata": {}
                  },
                  {
                    "name": "id_unprocessable_submission_detection",
                    "status": "passed",
                    "reasons": [],
                    "requirement": "not_required",
                    "metadata": {}
                  },
                  {
                    "name": "id_valid_dates_detection",
                    "status": "not_applicable",
                    "reasons": [],
                    "requirement": "not_required",
                    "metadata": {}
                  },
                  {
                    "name": "id_age_inconsistency_detection",
                    "status": "not_applicable",
                    "reasons": [
                      "disabled"
                    ],
                    "requirement": "not_required",
                    "metadata": {}
                  },
                  {
                    "name": "id_compromised_detection",
                    "status": "passed",
                    "reasons": [],
                    "requirement": "required",
                    "metadata": {}
                  },
                  {
                    "name": "id_inconsistent_repeat_detection",
                    "status": "not_applicable",
                    "reasons": [
                      "not_enabled"
                    ],
                    "requirement": "not_required",
                    "metadata": {}
                  },
                  {
                    "name": "id_public_figure_detection",
                    "status": "passed",
                    "reasons": [],
                    "requirement": "not_required",
                    "metadata": {}
                  },
                  {
                    "name": "id_repeat_detection",
                    "status": "not_applicable",
                    "reasons": [
                      "not_enabled"
                    ],
                    "requirement": "not_required",
                    "metadata": {}
                  },
                  {
                    "name": "id_selfie_comparison",
                    "status": "not_applicable",
                    "reasons": [
                      "no_selfie"
                    ],
                    "requirement": "required",
                    "metadata": {}
                  }
                ]
              },
              "relationships": {
                "inquiry": {
                  "data": null
                },
                "template": {
                  "data": null
                },
                "inquiry-template-version": {
                  "data": null
                },
                "inquiry-template": {
                  "data": null
                },
                "verification-template": {
                  "data": {
                    "type": "verification-template/government-id",
                    "id": "vtmpl_ABC123"
                  }
                },
                "verification-template-version": {
                  "data": {
                    "type": "verification-template-version/government-id",
                    "id": "vtmplv_ABC123"
                  }
                },
                "document": {
                  "data": {
                    "type": "document/government-id",
                    "id": "doc_ABC123"
                  }
                }
              }
            }
          ]
        }
      },
      "transaction-with-label": {
        "value": {
          "data": {
            "type": "transaction",
            "id": "txn_ABC123",
            "attributes": {
              "status": "declined",
              "reference-id": null,
              "external-id": null,
              "fields": {
                "country": {
                  "type": "string",
                  "value": "US"
                },
                "name-first": {
                  "type": "string",
                  "value": "LeBron"
                },
                "name-last": {
                  "type": "string",
                  "value": "James"
                },
                "selected-id-class": {
                  "type": "string",
                  "value": "dl"
                },
                "front-photo": {
                  "type": "file",
                  "value": {
                    "filename": "image.png",
                    "byte-size": 237011,
                    "mime-type": "image/png",
                    "url": "https://files.withpersona.com/image.png?access_token=ACCESS_ABC123"
                  }
                },
                "back-photo": {
                  "type": "file",
                  "value": {
                    "filename": "image.png",
                    "byte-size": 237011,
                    "mime-type": "image/png",
                    "url": "https://files.withpersona.com/image.png?access_token=ACCESS_ABC123"
                  }
                }
              },
              "tags": [],
              "created-at": "2023-05-26T16:49:33.860Z",
              "updated-at": "2023-05-26T16:49:43.965Z"
            },
            "relationships": {
              "reviewer": {
                "data": {
                  "type": "workflow-run",
                  "id": "wfr_ABC123"
                }
              },
              "transaction-label": {
                "data": null
              },
              "transaction-type": {
                "data": {
                  "type": "transaction-type",
                  "id": "txntp_ABC123"
                }
              },
              "related-objects": {
                "data": [
                  {
                    "type": "account",
                    "id": "act_ABC123"
                  },
                  {
                    "type": "verification/government-id",
                    "id": "ver_ABC123"
                  }
                ]
              }
            }
          },
          "included": [
            {
              "type": "transaction-label",
              "id": "txnl_ABC123",
              "attributes": {
                "model-label": "test",
                "model-version": "1.2.3",
                "created-at": "2023-06-29T23:54:35.293Z",
                "updated-at": "2023-06-29T23:54:35.293Z"
              }
            }
          ]
        }
      },
      "verification-database-phone-carrier": {
        "value": {
          "data": {
            "type": "verification/database-phone-carrier",
            "id": "ver_sg4L6Zax4TfXrVsGbVaBoSdr",
            "attributes": {
              "status": "failed",
              "created-at": "2022-08-03T03:15:56.000Z",
              "created-at-ts": 1659496556,
              "submitted-at": "2022-08-03T03:16:26.000Z",
              "submitted-at-ts": 1659496586,
              "completed-at": "2022-08-03T03:16:27.000Z",
              "completed-at-ts": 1659496587,
              "country-code": "US",
              "name-first": "ALEXANDER",
              "checks": [
                {
                  "name": "database_phone_carrier_name_first_comparison",
                  "status": "passed",
                  "reasons": [],
                  "metadata": {
                    "match-score": 100,
                    "match-result": "full"
                  }
                },
                {
                  "name": "database_phone_carrier_name_last_comparison",
                  "status": "failed",
                  "reasons": [
                    "insufficient_match"
                  ],
                  "metadata": {
                    "match-score": 63,
                    "match-result": "partial"
                  }
                },
                {
                  "name": "database_phone_carrier_birthdate_comparison",
                  "status": "not_applicable",
                  "reasons": [
                    "unavailable_for_country"
                  ],
                  "metadata": {}
                },
                {
                  "name": "database_phone_carrier_address_comparison",
                  "status": "passed",
                  "reasons": [],
                  "metadata": {
                    "match-score": 48,
                    "match-result": "none"
                  }
                }
              ]
            },
            "relationships": {
              "inquiry": {
                "data": null
              }
            }
          }
        }
      },
      "verification-database": {
        "value": {
          "data": {
            "type": "verification/database",
            "id": "ver_ABC123",
            "attributes": {
              "status": "initiated",
              "created-at": "2023-11-03T17:37:06.000Z",
              "created-at-ts": 1699033026,
              "submitted-at": null,
              "submitted-at-ts": null,
              "completed-at": null,
              "completed-at-ts": null,
              "country-code": "US",
              "name-first": "Jane",
              "name-middle": null,
              "name-last": "Doe",
              "address-street-1": "555 Beverly Hills",
              "address-street-2": "Apartment 123",
              "address-city": "Los Angeles",
              "address-subdivision": "California",
              "address-postal-code": "55555",
              "normalized-address-street-1": "555 Beverly Hills",
              "normalized-address-street-2": "Apt 123",
              "normalized-address-city": "Los Angeles",
              "normalized-address-subdivision": "CA",
              "normalized-address-postal-code": "55555",
              "birthdate": "1999-01-01",
              "identification-number": null,
              "document-number": null,
              "phone-number": null,
              "email-address": "jane@doe.com",
              "checks": []
            },
            "relationships": {
              "inquiry": {
                "data": {
                  "type": "inquiry",
                  "id": "inq_ABC123"
                }
              },
              "template": {
                "data": null
              },
              "inquiry-template-version": {
                "data": {
                  "type": "inquiry-template-version",
                  "id": "itmplv_ABC123"
                }
              },
              "inquiry-template": {
                "data": {
                  "type": "inquiry-template",
                  "id": "itmpl_ABC123"
                }
              },
              "verification-template": {
                "data": {
                  "type": "verification-template/database",
                  "id": "vtmpl_ABC123"
                }
              },
              "verification-template-version": {
                "data": {
                  "type": "verification-template-version/database",
                  "id": "vtmplv_ABC123"
                }
              }
            }
          }
        }
      },
      "verification-document": {
        "value": {
          "data": {
            "type": "verification/document",
            "id": "ver_ABC123",
            "attributes": {
              "status": "initiated",
              "created-at": "2023-11-15T16:21:09.000Z",
              "created-at-ts": 1700065269,
              "submitted-at": null,
              "submitted-at-ts": null,
              "completed-at": null,
              "completed-at-ts": null,
              "country-code": null,
              "checks": [
                {
                  "name": "document_unprocessable_submission_detection",
                  "status": "passed",
                  "reasons": [],
                  "requirement": "required",
                  "metadata": {}
                }
              ],
              "fields": {},
              "files": [
                {
                  "filename": "multipage_example.pdf",
                  "url": "https://files.withpersona.com/multipage_example.pdf?access_token=ACCESS_ABC123",
                  "byte-size": 123456
                }
              ],
              "files-normalized": [
                {
                  "filename": "multipage_example.pdf",
                  "url": "https://files.withpersona.com/multipage_example.pdf?access_token=ACCESS_ABC123",
                  "byte-size": 123456
                }
              ],
              "extraction-responses": []
            },
            "relationships": {
              "inquiry": {
                "data": {
                  "type": "inquiry",
                  "id": "inq_ABC123"
                }
              },
              "template": {
                "data": {
                  "type": "template",
                  "id": "tmpl_ABC123"
                }
              },
              "inquiry-template-version": {
                "data": null
              },
              "inquiry-template": {
                "data": null
              },
              "verification-template-version": {
                "data": {
                  "type": "verification-template-version/document",
                  "id": "vtmplv_ABC123"
                }
              },
              "verification-template": {
                "data": {
                  "type": "verification-template/document",
                  "id": "vtmpl_ABC123"
                }
              },
              "document": {
                "data": {
                  "type": "document/generic",
                  "id": "doc_BDxMaFYynbVrKPiGdfv4aJyC"
                }
              }
            }
          }
        }
      },
      "verification-email-address": {
        "value": {
          "data": {
            "type": "verification/email-address",
            "id": "ver_ABC123",
            "attributes": {
              "status": "initiated",
              "created-at": "2023-11-03T17:37:06.000Z",
              "created-at-ts": 1699033026,
              "submitted-at": null,
              "submitted-at-ts": null,
              "completed-at": null,
              "completed-at-ts": null,
              "country-code": "US",
              "email-address": "jane@doe.com",
              "confirmation-code": "12345"
            },
            "relationships": {
              "inquiry": {
                "data": {
                  "type": "inquiry",
                  "id": "inq_ABC123"
                }
              },
              "template": {
                "data": null
              },
              "inquiry-template-version": {
                "data": {
                  "type": "inquiry-template-version",
                  "id": "itmplv_ABC123"
                }
              },
              "inquiry-template": {
                "data": {
                  "type": "inquiry-template",
                  "id": "itmpl_ABC123"
                }
              },
              "verification-template": {
                "data": {
                  "type": "verification-template/email-address",
                  "id": "vtmpl_ABC123"
                }
              },
              "verification-template-version": {
                "data": {
                  "type": "verification-template-version/email-address",
                  "id": "vtmplv_ABC123"
                }
              }
            }
          }
        }
      },
      "verification-government-id-passed": {
        "value": {
          "data": {
            "type": "verification/government-id",
            "id": "ver_ABC123",
            "attributes": {
              "status": "passed",
              "created-at": "2024-03-20T21:22:25.000Z",
              "created-at-ts": 1710969745,
              "submitted-at": "2024-03-20T21:22:25.000Z",
              "submitted-at-ts": 1710969745,
              "completed-at": "2024-03-20T21:22:31.000Z",
              "completed-at-ts": 1710969751,
              "country-code": "US",
              "entity-confidence-score": 96.1831512451172,
              "entity-confidence-reasons": [
                "generic"
              ],
              "front-photo-url": "https://files.withpersona.com/id-front.jpg?access_token=ACCESS_TOKEN",
              "back-photo-url": null,
              "photo-urls": [
                {
                  "page": "front",
                  "url": "https://files.withpersona.com/id-front.jpg?access_token=ACCESS_TOKEN",
                  "normalized-url": "https://files.withpersona.com/id-front.jpg?access_token=ACCESS_TOKEN",
                  "original-urls": [
                    "https://files.withpersona.com/id-front.jpg?access_token=ACCESS_TOKEN"
                  ],
                  "byte-size": 2849115
                }
              ],
              "selfie-photo": {
                "url": "https://files.withpersona.com/selfie-photo.jpg?access_token=ACCESS_TOKEN",
                "byte-size": 201105
              },
              "selfie-photo-url": "https://files.withpersona.com/selfie-photo.jpg?access_token=ACCESS_TOKEN",
              "video-url": null,
              "id-class": "dl",
              "capture-method": "upload",
              "name-first": "JANE",
              "name-middle": null,
              "name-last": "DOE",
              "name-suffix": null,
              "birthdate": "1990-01-01",
              "address-street-1": "123 MAIN ST",
              "address-street-2": null,
              "address-city": "SAN FRANCISCO",
              "address-subdivision": "CA",
              "address-postal-code": "94111",
              "issuing-authority": null,
              "issuing-subdivision": "CA",
              "nationality": null,
              "document-number": null,
              "visa-status": null,
              "issue-date": "2020-07-28",
              "expiration-date": "2025-01-01",
              "designations": [],
              "birthplace": null,
              "endorsements": null,
              "height": null,
              "sex": null,
              "restrictions": null,
              "vehicle-class": null,
              "identification-number": "Y123ABC"
            },
            "relationships": {
              "inquiry": {
                "data": {
                  "type": "inquiry",
                  "id": "inq_ABC123"
                }
              },
              "template": {
                "data": null
              },
              "inquiry-template-version": {
                "data": {
                  "type": "inquiry-template-version",
                  "id": "itmplv_ABC123"
                }
              },
              "inquiry-template": {
                "data": {
                  "type": "inquiry-template",
                  "id": "itmpl_ABC123"
                }
              },
              "verification-template": {
                "data": {
                  "type": "verification-template/government-id",
                  "id": "vtmpl_ABC123"
                }
              },
              "verification-template-version": {
                "data": {
                  "type": "verification-template-version/government-id",
                  "id": "vtmplv_ABC123"
                }
              },
              "document": {
                "data": {
                  "type": "document/government-id",
                  "id": "doc_ABC123"
                }
              }
            }
          }
        }
      },
      "verification-government-id": {
        "value": {
          "data": {
            "type": "verification/government-id",
            "id": "ver_ABC123",
            "attributes": {
              "status": "initiated",
              "created-at": "2024-03-20T21:22:25.000Z",
              "created-at-ts": 1710969745,
              "submitted-at": null,
              "submitted-at-ts": null,
              "completed-at": null,
              "completed-at-ts": null,
              "country-code": "US",
              "entity-confidence-score": null,
              "entity-confidence-reasons": [
                "generic"
              ],
              "front-photo-url": null,
              "back-photo-url": null,
              "photo-urls": [],
              "selfie-photo": null,
              "selfie-photo-url": null,
              "video-url": null,
              "id-class": null,
              "capture-method": "api",
              "name-first": null,
              "name-middle": null,
              "name-last": null,
              "name-suffix": null,
              "birthdate": null,
              "address-street-1": null,
              "address-street-2": null,
              "address-city": null,
              "address-subdivision": null,
              "address-postal-code": null,
              "issuing-authority": null,
              "issuing-subdivision": null,
              "nationality": null,
              "document-number": null,
              "visa-status": null,
              "issue-date": null,
              "expiration-date": null,
              "designations": null,
              "birthplace": null,
              "endorsements": null,
              "height": null,
              "sex": null,
              "restrictions": null,
              "vehicle-class": null,
              "identification-number": null
            },
            "relationships": {
              "inquiry": {
                "data": null
              },
              "template": {
                "data": null
              },
              "inquiry-template-version": {
                "data": {
                  "type": "inquiry-template-version",
                  "id": "itmplv_ABC123"
                }
              },
              "inquiry-template": {
                "data": {
                  "type": "inquiry-template",
                  "id": "itmpl_ABC123"
                }
              },
              "verification-template": {
                "data": {
                  "type": "verification-template/government-id",
                  "id": "vtmpl_ABC123"
                }
              },
              "verification-template-version": {
                "data": {
                  "type": "verification-template-version/government-id",
                  "id": "vtmplv_ABC123"
                }
              },
              "document": {
                "data": {
                  "type": "document/government-id",
                  "id": "doc_ABC123"
                }
              }
            }
          }
        }
      },
      "verification-phone-number": {
        "value": {
          "data": {
            "type": "verification/phone-number",
            "id": "ver_ABC123",
            "attributes": {
              "status": "initiated",
              "created-at": "2023-11-03T17:37:06.000Z",
              "created-at-ts": 1699033026,
              "submitted-at": null,
              "submitted-at-ts": null,
              "completed-at": null,
              "completed-at-ts": null,
              "country-code": "US",
              "phone-number": "+14169671111",
              "confirmation-code": "12345",
              "metadata": {}
            },
            "relationships": {
              "inquiry": {
                "data": {
                  "type": "inquiry",
                  "id": "inq_ABC123"
                }
              },
              "template": {
                "data": null
              },
              "inquiry-template-version": {
                "data": {
                  "type": "inquiry-template-version",
                  "id": "itmplv_ABC123"
                }
              },
              "inquiry-template": {
                "data": {
                  "type": "inquiry-template",
                  "id": "itmpl_ABC123"
                }
              },
              "verification-template": {
                "data": {
                  "type": "verification-template/email-address",
                  "id": "vtmpl_ABC123"
                }
              },
              "verification-template-version": {
                "data": {
                  "type": "verification-template-version/email-address",
                  "id": "vtmplv_ABC123"
                }
              }
            }
          }
        }
      },
      "webhook-created": {
        "value": {
          "data": {
            "type": "webhook",
            "id": "wbh_ABC123",
            "attributes": {
              "status": "disabled",
              "url": "https://withpersona.com",
              "secret": "wbhsec_abcdefgh-1234-5678-9ijk-lmnopqrstuvw",
              "secrets": [
                {
                  "value": "wbhsec_abcdefgh-1234-5678-9ijk-lmnopqrstuvw",
                  "expires-at": null
                }
              ],
              "api-version": "2023-01-05",
              "api-key-inflection": "kebab",
              "api-attributes-blocklist": [
                "address-*",
                "name-last",
                "/data/attributes/fields/*-number"
              ],
              "file-access-token-expires-in": 21600,
              "enabled-events": [
                "account.created",
                "verification.created"
              ],
              "payload-filter": {
                "data": {
                  "relationships": {
                    "inquiry-template": {
                      "data": {
                        "id": "itmpl_abc123def456"
                      }
                    }
                  }
                }
              },
              "created-at": "2023-08-17T23:18:13.000Z"
            }
          }
        }
      },
      "webhook-disabled": {
        "value": {
          "data": {
            "type": "webhook",
            "id": "wbh_ABC123",
            "attributes": {
              "status": "disabled",
              "url": "https://withpersona.com",
              "api-version": "2023-01-05",
              "api-key-inflection": "kebab",
              "api-attributes-blocklist": [
                "address-*",
                "name-last",
                "/data/attributes/fields/*-number"
              ],
              "file-access-token-expires-in": 21600,
              "enabled-events": [
                "account.created",
                "verification.created"
              ],
              "payload-filter": {
                "data": {
                  "relationships": {
                    "inquiry-template": {
                      "data": {
                        "id": "itmpl_abc123def456"
                      }
                    }
                  }
                }
              },
              "created-at": "2023-08-17T23:18:13.000Z"
            }
          }
        }
      },
      "webhook-archived": {
        "value": {
          "data": {
            "type": "webhook",
            "id": "wbh_ABC123",
            "attributes": {
              "status": "archived",
              "url": "https://withpersona.com",
              "api-version": "2023-01-05",
              "api-key-inflection": "kebab",
              "api-attributes-blocklist": [
                "address-*",
                "name-last",
                "/data/attributes/fields/*-number"
              ],
              "file-access-token-expires-in": 21600,
              "enabled-events": [
                "account.created",
                "verification.created"
              ],
              "payload-filter": {
                "data": {
                  "relationships": {
                    "inquiry-template": {
                      "data": {
                        "id": "itmpl_abc123def456"
                      }
                    }
                  }
                }
              },
              "created-at": "2023-08-17T23:18:13.000Z"
            }
          }
        }
      },
      "webhook-enabled": {
        "value": {
          "data": {
            "type": "webhook",
            "id": "wbh_ABC123",
            "attributes": {
              "status": "enabled",
              "url": "https://withpersona.com",
              "api-version": "2023-01-05",
              "api-key-inflection": "kebab",
              "api-attributes-blocklist": [
                "address-*",
                "name-last",
                "/data/attributes/fields/*-number"
              ],
              "file-access-token-expires-in": 21600,
              "enabled-events": [
                "account.created",
                "verification.created"
              ],
              "payload-filter": {
                "data": {
                  "relationships": {
                    "inquiry-template": {
                      "data": {
                        "id": "itmpl_abc123def456"
                      }
                    }
                  }
                }
              },
              "created-at": "2023-08-17T23:18:13.000Z"
            }
          }
        }
      },
      "account-created-webhook-body": {
        "value": {
          "data": {
            "type": "event",
            "id": "evt_o9byQRbjygu76Jbtea9wuJ1boP7a",
            "attributes": {
              "name": "account.created",
              "payload": {
                "data": {
                  "type": "account",
                  "id": "act_hpNqyAbEG4HeVjZoBRNCMKkA",
                  "attributes": {
                    "reference-id": "abc-123",
                    "created-at": "2023-09-22T17:13:49.000Z",
                    "updated-at": "2023-09-23T00:22:19.000Z",
                    "redacted-at": null,
                    "fields": {
                      "name": {
                        "type": "hash",
                        "value": {
                          "first": {
                            "type": "string",
                            "value": "Jane"
                          },
                          "middle": {
                            "type": "string",
                            "value": "Marie"
                          },
                          "last": {
                            "type": "string",
                            "value": "Doe"
                          }
                        }
                      },
                      "address": {
                        "type": "hash",
                        "value": {
                          "street_1": {
                            "type": "string",
                            "value": "123 Main St"
                          },
                          "street_2": {
                            "type": "string",
                            "value": null
                          },
                          "subdivision": {
                            "type": "string",
                            "value": "California"
                          },
                          "city": {
                            "type": "string",
                            "value": "San Francisco"
                          },
                          "postal_code": {
                            "type": "string",
                            "value": "94111"
                          },
                          "country_code": {
                            "type": "string",
                            "value": "US"
                          }
                        }
                      },
                      "identification_numbers": {
                        "type": "array",
                        "value": [
                          {
                            "type": "hash",
                            "value": {
                              "identification_class": {
                                "type": "string",
                                "value": "visa"
                              },
                              "identification_number": {
                                "type": "string",
                                "value": "12345678"
                              },
                              "issuing_country": {
                                "type": "string",
                                "value": "US"
                              }
                            }
                          },
                          {
                            "type": "hash",
                            "value": {
                              "identification_class": {
                                "type": "string",
                                "value": "visa"
                              },
                              "identification_number": {
                                "type": "string",
                                "value": "87654321"
                              },
                              "issuing_country": {
                                "type": "string",
                                "value": "UK"
                              }
                            }
                          },
                          {
                            "type": "hash",
                            "value": {
                              "identification_class": {
                                "type": "string",
                                "value": "cct"
                              },
                              "identification_number": {
                                "type": "string",
                                "value": "A12345678"
                              },
                              "issuing_country": {
                                "type": "string",
                                "value": "AF"
                              }
                            }
                          }
                        ]
                      },
                      "birthdate": {
                        "type": "date",
                        "value": "1994-12-30"
                      },
                      "phone_number": {
                        "type": "string",
                        "value": "111-222-3333"
                      },
                      "email_address": {
                        "type": "string",
                        "value": "jane@doe.com"
                      },
                      "selfie_photo": {
                        "type": "file",
                        "value": null
                      }
                    },
                    "name-first": "Jane",
                    "name-middle": "Marie",
                    "name-last": "Doe",
                    "phone-number": "111-222-3333",
                    "email-address": "jane@doe.com",
                    "address-street-1": "123 Main St",
                    "address-street-2": null,
                    "address-city": "San Francisco",
                    "address-subdivision": "California",
                    "address-postal-code": "94111",
                    "country-code": "US",
                    "birthdate": "1994-12-30",
                    "social-security-number": "123-45-6789",
                    "tags": [
                      "tag1",
                      "tag2"
                    ],
                    "identification-numbers": {
                      "visa": [
                        {
                          "issuing-country": "US",
                          "identification-class": "visa",
                          "identification-number": "12345678",
                          "created-at": "2023-09-23T00:22:09.934Z",
                          "updated-at": "2023-09-23T00:22:19.900Z"
                        },
                        {
                          "issuing-country": "UK",
                          "identification-class": "visa",
                          "identification-number": "87654321",
                          "created-at": "2023-09-23T00:22:09.934Z",
                          "updated-at": "2023-09-23T00:22:19.900Z"
                        }
                      ],
                      "cct": [
                        {
                          "issuing-country": "AF",
                          "identification-class": "cct",
                          "identification-number": "A12345678",
                          "created-at": "2023-09-23T00:22:19.963Z",
                          "updated-at": "2023-09-23T00:22:19.963Z"
                        }
                      ]
                    }
                  }
                }
              },
              "created-at": "2024-02-15T23:48:17.732Z"
            }
          }
        }
      },
      "account-redacted-webhook-body": {
        "value": {
          "data": {
            "type": "event",
            "id": "evt_o9byQRbjygu76Jbtea9wuJ1boP7a",
            "attributes": {
              "name": "account.redacted",
              "payload": {
                "data": {
                  "type": "account",
                  "id": "act_hpNqyAbEG4HeVjZoBRNCMKkA",
                  "attributes": {
                    "reference-id": "abc-123",
                    "created-at": "2023-09-22T17:13:49.000Z",
                    "updated-at": "2023-09-23T00:22:19.000Z",
                    "redacted-at": null,
                    "fields": {
                      "name": {
                        "type": "hash",
                        "value": {
                          "first": {
                            "type": "string",
                            "value": "Jane"
                          },
                          "middle": {
                            "type": "string",
                            "value": "Marie"
                          },
                          "last": {
                            "type": "string",
                            "value": "Doe"
                          }
                        }
                      },
                      "address": {
                        "type": "hash",
                        "value": {
                          "street_1": {
                            "type": "string",
                            "value": "123 Main St"
                          },
                          "street_2": {
                            "type": "string",
                            "value": null
                          },
                          "subdivision": {
                            "type": "string",
                            "value": "California"
                          },
                          "city": {
                            "type": "string",
                            "value": "San Francisco"
                          },
                          "postal_code": {
                            "type": "string",
                            "value": "94111"
                          },
                          "country_code": {
                            "type": "string",
                            "value": "US"
                          }
                        }
                      },
                      "identification_numbers": {
                        "type": "array",
                        "value": [
                          {
                            "type": "hash",
                            "value": {
                              "identification_class": {
                                "type": "string",
                                "value": "visa"
                              },
                              "identification_number": {
                                "type": "string",
                                "value": "12345678"
                              },
                              "issuing_country": {
                                "type": "string",
                                "value": "US"
                              }
                            }
                          },
                          {
                            "type": "hash",
                            "value": {
                              "identification_class": {
                                "type": "string",
                                "value": "visa"
                              },
                              "identification_number": {
                                "type": "string",
                                "value": "87654321"
                              },
                              "issuing_country": {
                                "type": "string",
                                "value": "UK"
                              }
                            }
                          },
                          {
                            "type": "hash",
                            "value": {
                              "identification_class": {
                                "type": "string",
                                "value": "cct"
                              },
                              "identification_number": {
                                "type": "string",
                                "value": "A12345678"
                              },
                              "issuing_country": {
                                "type": "string",
                                "value": "AF"
                              }
                            }
                          }
                        ]
                      },
                      "birthdate": {
                        "type": "date",
                        "value": "1994-12-30"
                      },
                      "phone_number": {
                        "type": "string",
                        "value": "111-222-3333"
                      },
                      "email_address": {
                        "type": "string",
                        "value": "jane@doe.com"
                      },
                      "selfie_photo": {
                        "type": "file",
                        "value": null
                      }
                    },
                    "name-first": "Jane",
                    "name-middle": "Marie",
                    "name-last": "Doe",
                    "phone-number": "111-222-3333",
                    "email-address": "jane@doe.com",
                    "address-street-1": "123 Main St",
                    "address-street-2": null,
                    "address-city": "San Francisco",
                    "address-subdivision": "California",
                    "address-postal-code": "94111",
                    "country-code": "US",
                    "birthdate": "1994-12-30",
                    "social-security-number": "123-45-6789",
                    "tags": [
                      "tag1",
                      "tag2"
                    ],
                    "identification-numbers": {
                      "visa": [
                        {
                          "issuing-country": "US",
                          "identification-class": "visa",
                          "identification-number": "12345678",
                          "created-at": "2023-09-23T00:22:09.934Z",
                          "updated-at": "2023-09-23T00:22:19.900Z"
                        },
                        {
                          "issuing-country": "UK",
                          "identification-class": "visa",
                          "identification-number": "87654321",
                          "created-at": "2023-09-23T00:22:09.934Z",
                          "updated-at": "2023-09-23T00:22:19.900Z"
                        }
                      ],
                      "cct": [
                        {
                          "issuing-country": "AF",
                          "identification-class": "cct",
                          "identification-number": "A12345678",
                          "created-at": "2023-09-23T00:22:19.963Z",
                          "updated-at": "2023-09-23T00:22:19.963Z"
                        }
                      ]
                    }
                  }
                }
              },
              "created-at": "2024-02-15T23:48:17.732Z"
            }
          }
        }
      },
      "account-archived-webhook-body": {
        "value": {
          "data": {
            "type": "event",
            "id": "evt_o9byQRbjygu76Jbtea9wuJ1boP7a",
            "attributes": {
              "name": "account.archived",
              "payload": {
                "data": {
                  "type": "account",
                  "id": "act_hpNqyAbEG4HeVjZoBRNCMKkA",
                  "attributes": {
                    "reference-id": "abc-123",
                    "created-at": "2023-09-22T17:13:49.000Z",
                    "updated-at": "2023-09-23T00:22:19.000Z",
                    "redacted-at": null,
                    "fields": {
                      "name": {
                        "type": "hash",
                        "value": {
                          "first": {
                            "type": "string",
                            "value": "Jane"
                          },
                          "middle": {
                            "type": "string",
                            "value": "Marie"
                          },
                          "last": {
                            "type": "string",
                            "value": "Doe"
                          }
                        }
                      },
                      "address": {
                        "type": "hash",
                        "value": {
                          "street_1": {
                            "type": "string",
                            "value": "123 Main St"
                          },
                          "street_2": {
                            "type": "string",
                            "value": null
                          },
                          "subdivision": {
                            "type": "string",
                            "value": "California"
                          },
                          "city": {
                            "type": "string",
                            "value": "San Francisco"
                          },
                          "postal_code": {
                            "type": "string",
                            "value": "94111"
                          },
                          "country_code": {
                            "type": "string",
                            "value": "US"
                          }
                        }
                      },
                      "identification_numbers": {
                        "type": "array",
                        "value": [
                          {
                            "type": "hash",
                            "value": {
                              "identification_class": {
                                "type": "string",
                                "value": "visa"
                              },
                              "identification_number": {
                                "type": "string",
                                "value": "12345678"
                              },
                              "issuing_country": {
                                "type": "string",
                                "value": "US"
                              }
                            }
                          },
                          {
                            "type": "hash",
                            "value": {
                              "identification_class": {
                                "type": "string",
                                "value": "visa"
                              },
                              "identification_number": {
                                "type": "string",
                                "value": "87654321"
                              },
                              "issuing_country": {
                                "type": "string",
                                "value": "UK"
                              }
                            }
                          },
                          {
                            "type": "hash",
                            "value": {
                              "identification_class": {
                                "type": "string",
                                "value": "cct"
                              },
                              "identification_number": {
                                "type": "string",
                                "value": "A12345678"
                              },
                              "issuing_country": {
                                "type": "string",
                                "value": "AF"
                              }
                            }
                          }
                        ]
                      },
                      "birthdate": {
                        "type": "date",
                        "value": "1994-12-30"
                      },
                      "phone_number": {
                        "type": "string",
                        "value": "111-222-3333"
                      },
                      "email_address": {
                        "type": "string",
                        "value": "jane@doe.com"
                      },
                      "selfie_photo": {
                        "type": "file",
                        "value": null
                      }
                    },
                    "name-first": "Jane",
                    "name-middle": "Marie",
                    "name-last": "Doe",
                    "phone-number": "111-222-3333",
                    "email-address": "jane@doe.com",
                    "address-street-1": "123 Main St",
                    "address-street-2": null,
                    "address-city": "San Francisco",
                    "address-subdivision": "California",
                    "address-postal-code": "94111",
                    "country-code": "US",
                    "birthdate": "1994-12-30",
                    "social-security-number": "123-45-6789",
                    "tags": [
                      "tag1",
                      "tag2"
                    ],
                    "identification-numbers": {
                      "visa": [
                        {
                          "issuing-country": "US",
                          "identification-class": "visa",
                          "identification-number": "12345678",
                          "created-at": "2023-09-23T00:22:09.934Z",
                          "updated-at": "2023-09-23T00:22:19.900Z"
                        },
                        {
                          "issuing-country": "UK",
                          "identification-class": "visa",
                          "identification-number": "87654321",
                          "created-at": "2023-09-23T00:22:09.934Z",
                          "updated-at": "2023-09-23T00:22:19.900Z"
                        }
                      ],
                      "cct": [
                        {
                          "issuing-country": "AF",
                          "identification-class": "cct",
                          "identification-number": "A12345678",
                          "created-at": "2023-09-23T00:22:19.963Z",
                          "updated-at": "2023-09-23T00:22:19.963Z"
                        }
                      ]
                    }
                  }
                }
              },
              "created-at": "2024-02-15T23:48:17.732Z"
            }
          }
        }
      },
      "account-restored-webhook-body": {
        "value": {
          "data": {
            "type": "event",
            "id": "evt_o9byQRbjygu76Jbtea9wuJ1boP7a",
            "attributes": {
              "name": "account.restored",
              "payload": {
                "data": {
                  "type": "account",
                  "id": "act_hpNqyAbEG4HeVjZoBRNCMKkA",
                  "attributes": {
                    "reference-id": "abc-123",
                    "created-at": "2023-09-22T17:13:49.000Z",
                    "updated-at": "2023-09-23T00:22:19.000Z",
                    "redacted-at": null,
                    "fields": {
                      "name": {
                        "type": "hash",
                        "value": {
                          "first": {
                            "type": "string",
                            "value": "Jane"
                          },
                          "middle": {
                            "type": "string",
                            "value": "Marie"
                          },
                          "last": {
                            "type": "string",
                            "value": "Doe"
                          }
                        }
                      },
                      "address": {
                        "type": "hash",
                        "value": {
                          "street_1": {
                            "type": "string",
                            "value": "123 Main St"
                          },
                          "street_2": {
                            "type": "string",
                            "value": null
                          },
                          "subdivision": {
                            "type": "string",
                            "value": "California"
                          },
                          "city": {
                            "type": "string",
                            "value": "San Francisco"
                          },
                          "postal_code": {
                            "type": "string",
                            "value": "94111"
                          },
                          "country_code": {
                            "type": "string",
                            "value": "US"
                          }
                        }
                      },
                      "identification_numbers": {
                        "type": "array",
                        "value": [
                          {
                            "type": "hash",
                            "value": {
                              "identification_class": {
                                "type": "string",
                                "value": "visa"
                              },
                              "identification_number": {
                                "type": "string",
                                "value": "12345678"
                              },
                              "issuing_country": {
                                "type": "string",
                                "value": "US"
                              }
                            }
                          },
                          {
                            "type": "hash",
                            "value": {
                              "identification_class": {
                                "type": "string",
                                "value": "visa"
                              },
                              "identification_number": {
                                "type": "string",
                                "value": "87654321"
                              },
                              "issuing_country": {
                                "type": "string",
                                "value": "UK"
                              }
                            }
                          },
                          {
                            "type": "hash",
                            "value": {
                              "identification_class": {
                                "type": "string",
                                "value": "cct"
                              },
                              "identification_number": {
                                "type": "string",
                                "value": "A12345678"
                              },
                              "issuing_country": {
                                "type": "string",
                                "value": "AF"
                              }
                            }
                          }
                        ]
                      },
                      "birthdate": {
                        "type": "date",
                        "value": "1994-12-30"
                      },
                      "phone_number": {
                        "type": "string",
                        "value": "111-222-3333"
                      },
                      "email_address": {
                        "type": "string",
                        "value": "jane@doe.com"
                      },
                      "selfie_photo": {
                        "type": "file",
                        "value": null
                      }
                    },
                    "name-first": "Jane",
                    "name-middle": "Marie",
                    "name-last": "Doe",
                    "phone-number": "111-222-3333",
                    "email-address": "jane@doe.com",
                    "address-street-1": "123 Main St",
                    "address-street-2": null,
                    "address-city": "San Francisco",
                    "address-subdivision": "California",
                    "address-postal-code": "94111",
                    "country-code": "US",
                    "birthdate": "1994-12-30",
                    "social-security-number": "123-45-6789",
                    "tags": [
                      "tag1",
                      "tag2"
                    ],
                    "identification-numbers": {
                      "visa": [
                        {
                          "issuing-country": "US",
                          "identification-class": "visa",
                          "identification-number": "12345678",
                          "created-at": "2023-09-23T00:22:09.934Z",
                          "updated-at": "2023-09-23T00:22:19.900Z"
                        },
                        {
                          "issuing-country": "UK",
                          "identification-class": "visa",
                          "identification-number": "87654321",
                          "created-at": "2023-09-23T00:22:09.934Z",
                          "updated-at": "2023-09-23T00:22:19.900Z"
                        }
                      ],
                      "cct": [
                        {
                          "issuing-country": "AF",
                          "identification-class": "cct",
                          "identification-number": "A12345678",
                          "created-at": "2023-09-23T00:22:19.963Z",
                          "updated-at": "2023-09-23T00:22:19.963Z"
                        }
                      ]
                    }
                  }
                }
              },
              "created-at": "2024-02-15T23:48:17.732Z"
            }
          }
        }
      },
      "account-consolidated-webhook-body": {
        "value": {
          "data": {
            "type": "event",
            "id": "evt_o9byQRbjygu76Jbtea9wuJ1boP7a",
            "attributes": {
              "name": "account.consolidated",
              "payload": {
                "data": {
                  "type": "account",
                  "id": "act_hpNqyAbEG4HeVjZoBRNCMKkA",
                  "attributes": {
                    "reference-id": "abc-123",
                    "created-at": "2023-09-22T17:13:49.000Z",
                    "updated-at": "2023-09-23T00:22:19.000Z",
                    "redacted-at": null,
                    "fields": {
                      "name": {
                        "type": "hash",
                        "value": {
                          "first": {
                            "type": "string",
                            "value": "Jane"
                          },
                          "middle": {
                            "type": "string",
                            "value": "Marie"
                          },
                          "last": {
                            "type": "string",
                            "value": "Doe"
                          }
                        }
                      },
                      "address": {
                        "type": "hash",
                        "value": {
                          "street_1": {
                            "type": "string",
                            "value": "123 Main St"
                          },
                          "street_2": {
                            "type": "string",
                            "value": null
                          },
                          "subdivision": {
                            "type": "string",
                            "value": "California"
                          },
                          "city": {
                            "type": "string",
                            "value": "San Francisco"
                          },
                          "postal_code": {
                            "type": "string",
                            "value": "94111"
                          },
                          "country_code": {
                            "type": "string",
                            "value": "US"
                          }
                        }
                      },
                      "identification_numbers": {
                        "type": "array",
                        "value": [
                          {
                            "type": "hash",
                            "value": {
                              "identification_class": {
                                "type": "string",
                                "value": "visa"
                              },
                              "identification_number": {
                                "type": "string",
                                "value": "12345678"
                              },
                              "issuing_country": {
                                "type": "string",
                                "value": "US"
                              }
                            }
                          },
                          {
                            "type": "hash",
                            "value": {
                              "identification_class": {
                                "type": "string",
                                "value": "visa"
                              },
                              "identification_number": {
                                "type": "string",
                                "value": "87654321"
                              },
                              "issuing_country": {
                                "type": "string",
                                "value": "UK"
                              }
                            }
                          },
                          {
                            "type": "hash",
                            "value": {
                              "identification_class": {
                                "type": "string",
                                "value": "cct"
                              },
                              "identification_number": {
                                "type": "string",
                                "value": "A12345678"
                              },
                              "issuing_country": {
                                "type": "string",
                                "value": "AF"
                              }
                            }
                          }
                        ]
                      },
                      "birthdate": {
                        "type": "date",
                        "value": "1994-12-30"
                      },
                      "phone_number": {
                        "type": "string",
                        "value": "111-222-3333"
                      },
                      "email_address": {
                        "type": "string",
                        "value": "jane@doe.com"
                      },
                      "selfie_photo": {
                        "type": "file",
                        "value": null
                      }
                    },
                    "name-first": "Jane",
                    "name-middle": "Marie",
                    "name-last": "Doe",
                    "phone-number": "111-222-3333",
                    "email-address": "jane@doe.com",
                    "address-street-1": "123 Main St",
                    "address-street-2": null,
                    "address-city": "San Francisco",
                    "address-subdivision": "California",
                    "address-postal-code": "94111",
                    "country-code": "US",
                    "birthdate": "1994-12-30",
                    "social-security-number": "123-45-6789",
                    "tags": [
                      "tag1",
                      "tag2"
                    ],
                    "identification-numbers": {
                      "visa": [
                        {
                          "issuing-country": "US",
                          "identification-class": "visa",
                          "identification-number": "12345678",
                          "created-at": "2023-09-23T00:22:09.934Z",
                          "updated-at": "2023-09-23T00:22:19.900Z"
                        },
                        {
                          "issuing-country": "UK",
                          "identification-class": "visa",
                          "identification-number": "87654321",
                          "created-at": "2023-09-23T00:22:09.934Z",
                          "updated-at": "2023-09-23T00:22:19.900Z"
                        }
                      ],
                      "cct": [
                        {
                          "issuing-country": "AF",
                          "identification-class": "cct",
                          "identification-number": "A12345678",
                          "created-at": "2023-09-23T00:22:19.963Z",
                          "updated-at": "2023-09-23T00:22:19.963Z"
                        }
                      ]
                    }
                  }
                }
              },
              "created-at": "2024-02-15T23:48:17.732Z"
            }
          }
        }
      },
      "account-tag-added-webhook-body": {
        "value": {
          "data": {
            "type": "event",
            "id": "evt_o9byQRbjygu76Jbtea9wuJ1boP7a",
            "attributes": {
              "name": "account.tag-added",
              "payload": {
                "data": {
                  "type": "account",
                  "id": "act_hpNqyAbEG4HeVjZoBRNCMKkA",
                  "attributes": {
                    "reference-id": "abc-123",
                    "created-at": "2023-09-22T17:13:49.000Z",
                    "updated-at": "2023-09-23T00:22:19.000Z",
                    "redacted-at": null,
                    "fields": {
                      "name": {
                        "type": "hash",
                        "value": {
                          "first": {
                            "type": "string",
                            "value": "Jane"
                          },
                          "middle": {
                            "type": "string",
                            "value": "Marie"
                          },
                          "last": {
                            "type": "string",
                            "value": "Doe"
                          }
                        }
                      },
                      "address": {
                        "type": "hash",
                        "value": {
                          "street_1": {
                            "type": "string",
                            "value": "123 Main St"
                          },
                          "street_2": {
                            "type": "string",
                            "value": null
                          },
                          "subdivision": {
                            "type": "string",
                            "value": "California"
                          },
                          "city": {
                            "type": "string",
                            "value": "San Francisco"
                          },
                          "postal_code": {
                            "type": "string",
                            "value": "94111"
                          },
                          "country_code": {
                            "type": "string",
                            "value": "US"
                          }
                        }
                      },
                      "identification_numbers": {
                        "type": "array",
                        "value": [
                          {
                            "type": "hash",
                            "value": {
                              "identification_class": {
                                "type": "string",
                                "value": "visa"
                              },
                              "identification_number": {
                                "type": "string",
                                "value": "12345678"
                              },
                              "issuing_country": {
                                "type": "string",
                                "value": "US"
                              }
                            }
                          },
                          {
                            "type": "hash",
                            "value": {
                              "identification_class": {
                                "type": "string",
                                "value": "visa"
                              },
                              "identification_number": {
                                "type": "string",
                                "value": "87654321"
                              },
                              "issuing_country": {
                                "type": "string",
                                "value": "UK"
                              }
                            }
                          },
                          {
                            "type": "hash",
                            "value": {
                              "identification_class": {
                                "type": "string",
                                "value": "cct"
                              },
                              "identification_number": {
                                "type": "string",
                                "value": "A12345678"
                              },
                              "issuing_country": {
                                "type": "string",
                                "value": "AF"
                              }
                            }
                          }
                        ]
                      },
                      "birthdate": {
                        "type": "date",
                        "value": "1994-12-30"
                      },
                      "phone_number": {
                        "type": "string",
                        "value": "111-222-3333"
                      },
                      "email_address": {
                        "type": "string",
                        "value": "jane@doe.com"
                      },
                      "selfie_photo": {
                        "type": "file",
                        "value": null
                      }
                    },
                    "name-first": "Jane",
                    "name-middle": "Marie",
                    "name-last": "Doe",
                    "phone-number": "111-222-3333",
                    "email-address": "jane@doe.com",
                    "address-street-1": "123 Main St",
                    "address-street-2": null,
                    "address-city": "San Francisco",
                    "address-subdivision": "California",
                    "address-postal-code": "94111",
                    "country-code": "US",
                    "birthdate": "1994-12-30",
                    "social-security-number": "123-45-6789",
                    "tags": [
                      "tag1",
                      "tag2"
                    ],
                    "identification-numbers": {
                      "visa": [
                        {
                          "issuing-country": "US",
                          "identification-class": "visa",
                          "identification-number": "12345678",
                          "created-at": "2023-09-23T00:22:09.934Z",
                          "updated-at": "2023-09-23T00:22:19.900Z"
                        },
                        {
                          "issuing-country": "UK",
                          "identification-class": "visa",
                          "identification-number": "87654321",
                          "created-at": "2023-09-23T00:22:09.934Z",
                          "updated-at": "2023-09-23T00:22:19.900Z"
                        }
                      ],
                      "cct": [
                        {
                          "issuing-country": "AF",
                          "identification-class": "cct",
                          "identification-number": "A12345678",
                          "created-at": "2023-09-23T00:22:19.963Z",
                          "updated-at": "2023-09-23T00:22:19.963Z"
                        }
                      ]
                    }
                  }
                }
              },
              "created-at": "2024-02-15T23:48:17.732Z"
            }
          }
        }
      },
      "account-tag-removed-webhook-body": {
        "value": {
          "data": {
            "type": "event",
            "id": "evt_o9byQRbjygu76Jbtea9wuJ1boP7a",
            "attributes": {
              "name": "account.tag-removed",
              "payload": {
                "data": {
                  "type": "account",
                  "id": "act_hpNqyAbEG4HeVjZoBRNCMKkA",
                  "attributes": {
                    "reference-id": "abc-123",
                    "created-at": "2023-09-22T17:13:49.000Z",
                    "updated-at": "2023-09-23T00:22:19.000Z",
                    "redacted-at": null,
                    "fields": {
                      "name": {
                        "type": "hash",
                        "value": {
                          "first": {
                            "type": "string",
                            "value": "Jane"
                          },
                          "middle": {
                            "type": "string",
                            "value": "Marie"
                          },
                          "last": {
                            "type": "string",
                            "value": "Doe"
                          }
                        }
                      },
                      "address": {
                        "type": "hash",
                        "value": {
                          "street_1": {
                            "type": "string",
                            "value": "123 Main St"
                          },
                          "street_2": {
                            "type": "string",
                            "value": null
                          },
                          "subdivision": {
                            "type": "string",
                            "value": "California"
                          },
                          "city": {
                            "type": "string",
                            "value": "San Francisco"
                          },
                          "postal_code": {
                            "type": "string",
                            "value": "94111"
                          },
                          "country_code": {
                            "type": "string",
                            "value": "US"
                          }
                        }
                      },
                      "identification_numbers": {
                        "type": "array",
                        "value": [
                          {
                            "type": "hash",
                            "value": {
                              "identification_class": {
                                "type": "string",
                                "value": "visa"
                              },
                              "identification_number": {
                                "type": "string",
                                "value": "12345678"
                              },
                              "issuing_country": {
                                "type": "string",
                                "value": "US"
                              }
                            }
                          },
                          {
                            "type": "hash",
                            "value": {
                              "identification_class": {
                                "type": "string",
                                "value": "visa"
                              },
                              "identification_number": {
                                "type": "string",
                                "value": "87654321"
                              },
                              "issuing_country": {
                                "type": "string",
                                "value": "UK"
                              }
                            }
                          },
                          {
                            "type": "hash",
                            "value": {
                              "identification_class": {
                                "type": "string",
                                "value": "cct"
                              },
                              "identification_number": {
                                "type": "string",
                                "value": "A12345678"
                              },
                              "issuing_country": {
                                "type": "string",
                                "value": "AF"
                              }
                            }
                          }
                        ]
                      },
                      "birthdate": {
                        "type": "date",
                        "value": "1994-12-30"
                      },
                      "phone_number": {
                        "type": "string",
                        "value": "111-222-3333"
                      },
                      "email_address": {
                        "type": "string",
                        "value": "jane@doe.com"
                      },
                      "selfie_photo": {
                        "type": "file",
                        "value": null
                      }
                    },
                    "name-first": "Jane",
                    "name-middle": "Marie",
                    "name-last": "Doe",
                    "phone-number": "111-222-3333",
                    "email-address": "jane@doe.com",
                    "address-street-1": "123 Main St",
                    "address-street-2": null,
                    "address-city": "San Francisco",
                    "address-subdivision": "California",
                    "address-postal-code": "94111",
                    "country-code": "US",
                    "birthdate": "1994-12-30",
                    "social-security-number": "123-45-6789",
                    "tags": [
                      "tag1",
                      "tag2"
                    ],
                    "identification-numbers": {
                      "visa": [
                        {
                          "issuing-country": "US",
                          "identification-class": "visa",
                          "identification-number": "12345678",
                          "created-at": "2023-09-23T00:22:09.934Z",
                          "updated-at": "2023-09-23T00:22:19.900Z"
                        },
                        {
                          "issuing-country": "UK",
                          "identification-class": "visa",
                          "identification-number": "87654321",
                          "created-at": "2023-09-23T00:22:09.934Z",
                          "updated-at": "2023-09-23T00:22:19.900Z"
                        }
                      ],
                      "cct": [
                        {
                          "issuing-country": "AF",
                          "identification-class": "cct",
                          "identification-number": "A12345678",
                          "created-at": "2023-09-23T00:22:19.963Z",
                          "updated-at": "2023-09-23T00:22:19.963Z"
                        }
                      ]
                    }
                  }
                }
              },
              "created-at": "2024-02-15T23:48:17.732Z"
            }
          }
        }
      },
      "inquiry-created-webhook-body": {
        "value": {
          "data": {
            "type": "event",
            "id": "evt_o9byQRbjygu76Jbtea9wuJ1boP7a",
            "attributes": {
              "name": "inquiry.created",
              "payload": {
                "data": {
                  "type": "inquiry",
                  "id": "inq_zEx4jL84ShbUyuwX6AzPSqt6",
                  "attributes": {
                    "status": "pending",
                    "reference-id": "abc-123",
                    "note": null,
                    "behaviors": {
                      "request-spoof-attempts": 0,
                      "user-agent-spoof-attempts": 0,
                      "distraction-events": 0,
                      "hesitation-baseline": 29677,
                      "hesitation-count": 3,
                      "hesitation-time": 28752,
                      "shortcut-copies": 0,
                      "shortcut-pastes": 0,
                      "autofill-cancels": 0,
                      "autofill-starts": 0,
                      "devtools-open": false,
                      "completion-time": 40.172463903,
                      "hesitation-percentage": 96.88310813087575,
                      "behavior-threat-level": "low"
                    },
                    "tags": [],
                    "creator": "creator@withpersona.com",
                    "reviewer-comment": null,
                    "created-at": "2023-03-29T19:06:45.000Z",
                    "started-at": "2023-03-30T19:07:01.000Z",
                    "completed-at": null,
                    "failed-at": null,
                    "marked-for-review-at": null,
                    "decisioned-at": null,
                    "expired-at": null,
                    "redacted-at": null,
                    "previous-step-name": "start",
                    "next-step-name": "verification_document",
                    "name-first": "Jane",
                    "name-middle": "Marie",
                    "name-last": "Doe",
                    "birthdate": "1995-09-08",
                    "address-street-1": "123 Main St",
                    "address-street-2": null,
                    "address-city": "San Francisco",
                    "address-subdivision": "California",
                    "address-subdivision-abbr": "CA",
                    "address-postal-code": "94111",
                    "address-postal-code-abbr": "94111",
                    "social-security-number": null,
                    "identification-number": null,
                    "email-address": "jane@doe.com",
                    "phone-number": null,
                    "fields": {
                      "name-first": {
                        "type": "string",
                        "value": "Jane"
                      },
                      "name-middle": {
                        "type": "string",
                        "value": "Marie"
                      },
                      "name-last": {
                        "type": "string",
                        "value": "Doe"
                      },
                      "address-street-1": {
                        "type": "string",
                        "value": "123 Main St"
                      },
                      "address-street-2": {
                        "type": "string",
                        "value": null
                      },
                      "address-city": {
                        "type": "string",
                        "value": "San Francisco"
                      },
                      "address-subdivision": {
                        "type": "string",
                        "value": "California"
                      },
                      "address-postal-code": {
                        "type": "string",
                        "value": "94111"
                      },
                      "address-country-code": {
                        "type": "string",
                        "value": "US"
                      },
                      "birthdate": {
                        "type": "date",
                        "value": "1995-09-08"
                      },
                      "email-address": {
                        "type": "string",
                        "value": "jane@doe.com"
                      },
                      "phone-number": {
                        "type": "string",
                        "value": null
                      },
                      "identification-number": {
                        "type": "string",
                        "value": null
                      }
                    }
                  },
                  "relationships": {
                    "account": {
                      "data": {
                        "type": "account",
                        "id": "act_n2uq9eKMboaCQzu9ALWYcVdN"
                      }
                    },
                    "template": {
                      "data": {}
                    },
                    "inquiry-template": {
                      "data": {
                        "type": "inquiry-template",
                        "id": "itmpl_p8ANAJy9iqadm2buF2xcVgqH"
                      }
                    },
                    "inquiry-template-version": {
                      "data": {
                        "type": "inquiry-template-version",
                        "id": "itmplv_iXhqfNWqwYLAWs9G8Fm8hPfo"
                      }
                    },
                    "reviewer": {
                      "data": {}
                    },
                    "reports": {
                      "data": []
                    },
                    "verifications": {
                      "data": [
                        {
                          "type": "verification/database",
                          "id": "ver_uHDiwtcx3htjajvEaeMjPQcE"
                        }
                      ]
                    },
                    "sessions": {
                      "data": []
                    },
                    "documents": {
                      "data": []
                    },
                    "selfies": {
                      "data": []
                    }
                  }
                },
                "included": [
                  {
                    "type": "inquiry-session",
                    "id": "iqse_ABC123",
                    "attributes": {
                      "status": "expired",
                      "created-at": "2023-07-25T04:15:20.000Z",
                      "started-at": "2023-07-25T05:14:50.000Z",
                      "expired-at": "2023-07-26T05:14:50.000Z",
                      "ip-address": "127.0.0.1",
                      "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36",
                      "os-name": "Mac",
                      "os-full-version": "10.15.7",
                      "device-type": "desktop",
                      "device-name": null,
                      "browser-name": "Chrome",
                      "browser-full-version": "115.0.0.0",
                      "mobile-sdk-name": null,
                      "mobile-sdk-full-version": null,
                      "device-handoff-method": null,
                      "is-proxy": false,
                      "is-tor": false,
                      "is-datacenter": false,
                      "threat-level": "low",
                      "country-code": "US",
                      "country-name": "United States",
                      "region-code": "CA",
                      "region-name": "California",
                      "latitude": 37.7688,
                      "longitude": -122.262
                    },
                    "relationships": {
                      "inquiry": {
                        "data": {
                          "type": "inquiry",
                          "id": "inq_ABC123"
                        }
                      }
                    }
                  },
                  {
                    "type": "inquiry-template",
                    "id": "itmpl_ABC123",
                    "attributes": {
                      "status": "active",
                      "name": "Twilio Desktop"
                    },
                    "relationships": {
                      "latest-published-version": {
                        "data": {
                          "type": "inquiry-template-version",
                          "id": "itmplv_ABC123"
                        }
                      }
                    }
                  }
                ]
              },
              "created-at": "2024-02-15T23:48:17.732Z"
            }
          }
        }
      },
      "inquiry-expired-webhook-body": {
        "value": {
          "data": {
            "type": "event",
            "id": "evt_o9byQRbjygu76Jbtea9wuJ1boP7a",
            "attributes": {
              "name": "inquiry.expired",
              "payload": {
                "data": {
                  "type": "inquiry",
                  "id": "inq_zEx4jL84ShbUyuwX6AzPSqt6",
                  "attributes": {
                    "status": "pending",
                    "reference-id": "abc-123",
                    "note": null,
                    "behaviors": {
                      "request-spoof-attempts": 0,
                      "user-agent-spoof-attempts": 0,
                      "distraction-events": 0,
                      "hesitation-baseline": 29677,
                      "hesitation-count": 3,
                      "hesitation-time": 28752,
                      "shortcut-copies": 0,
                      "shortcut-pastes": 0,
                      "autofill-cancels": 0,
                      "autofill-starts": 0,
                      "devtools-open": false,
                      "completion-time": 40.172463903,
                      "hesitation-percentage": 96.88310813087575,
                      "behavior-threat-level": "low"
                    },
                    "tags": [],
                    "creator": "creator@withpersona.com",
                    "reviewer-comment": null,
                    "created-at": "2023-03-29T19:06:45.000Z",
                    "started-at": "2023-03-30T19:07:01.000Z",
                    "completed-at": null,
                    "failed-at": null,
                    "marked-for-review-at": null,
                    "decisioned-at": null,
                    "expired-at": null,
                    "redacted-at": null,
                    "previous-step-name": "start",
                    "next-step-name": "verification_document",
                    "name-first": "Jane",
                    "name-middle": "Marie",
                    "name-last": "Doe",
                    "birthdate": "1995-09-08",
                    "address-street-1": "123 Main St",
                    "address-street-2": null,
                    "address-city": "San Francisco",
                    "address-subdivision": "California",
                    "address-subdivision-abbr": "CA",
                    "address-postal-code": "94111",
                    "address-postal-code-abbr": "94111",
                    "social-security-number": null,
                    "identification-number": null,
                    "email-address": "jane@doe.com",
                    "phone-number": null,
                    "fields": {
                      "name-first": {
                        "type": "string",
                        "value": "Jane"
                      },
                      "name-middle": {
                        "type": "string",
                        "value": "Marie"
                      },
                      "name-last": {
                        "type": "string",
                        "value": "Doe"
                      },
                      "address-street-1": {
                        "type": "string",
                        "value": "123 Main St"
                      },
                      "address-street-2": {
                        "type": "string",
                        "value": null
                      },
                      "address-city": {
                        "type": "string",
                        "value": "San Francisco"
                      },
                      "address-subdivision": {
                        "type": "string",
                        "value": "California"
                      },
                      "address-postal-code": {
                        "type": "string",
                        "value": "94111"
                      },
                      "address-country-code": {
                        "type": "string",
                        "value": "US"
                      },
                      "birthdate": {
                        "type": "date",
                        "value": "1995-09-08"
                      },
                      "email-address": {
                        "type": "string",
                        "value": "jane@doe.com"
                      },
                      "phone-number": {
                        "type": "string",
                        "value": null
                      },
                      "identification-number": {
                        "type": "string",
                        "value": null
                      }
                    }
                  },
                  "relationships": {
                    "account": {
                      "data": {
                        "type": "account",
                        "id": "act_n2uq9eKMboaCQzu9ALWYcVdN"
                      }
                    },
                    "template": {
                      "data": {}
                    },
                    "inquiry-template": {
                      "data": {
                        "type": "inquiry-template",
                        "id": "itmpl_p8ANAJy9iqadm2buF2xcVgqH"
                      }
                    },
                    "inquiry-template-version": {
                      "data": {
                        "type": "inquiry-template-version",
                        "id": "itmplv_iXhqfNWqwYLAWs9G8Fm8hPfo"
                      }
                    },
                    "reviewer": {
                      "data": {}
                    },
                    "reports": {
                      "data": []
                    },
                    "verifications": {
                      "data": [
                        {
                          "type": "verification/database",
                          "id": "ver_uHDiwtcx3htjajvEaeMjPQcE"
                        }
                      ]
                    },
                    "sessions": {
                      "data": []
                    },
                    "documents": {
                      "data": []
                    },
                    "selfies": {
                      "data": []
                    }
                  }
                },
                "included": [
                  {
                    "type": "inquiry-session",
                    "id": "iqse_ABC123",
                    "attributes": {
                      "status": "expired",
                      "created-at": "2023-07-25T04:15:20.000Z",
                      "started-at": "2023-07-25T05:14:50.000Z",
                      "expired-at": "2023-07-26T05:14:50.000Z",
                      "ip-address": "127.0.0.1",
                      "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36",
                      "os-name": "Mac",
                      "os-full-version": "10.15.7",
                      "device-type": "desktop",
                      "device-name": null,
                      "browser-name": "Chrome",
                      "browser-full-version": "115.0.0.0",
                      "mobile-sdk-name": null,
                      "mobile-sdk-full-version": null,
                      "device-handoff-method": null,
                      "is-proxy": false,
                      "is-tor": false,
                      "is-datacenter": false,
                      "threat-level": "low",
                      "country-code": "US",
                      "country-name": "United States",
                      "region-code": "CA",
                      "region-name": "California",
                      "latitude": 37.7688,
                      "longitude": -122.262
                    },
                    "relationships": {
                      "inquiry": {
                        "data": {
                          "type": "inquiry",
                          "id": "inq_ABC123"
                        }
                      }
                    }
                  },
                  {
                    "type": "inquiry-template",
                    "id": "itmpl_ABC123",
                    "attributes": {
                      "status": "active",
                      "name": "Twilio Desktop"
                    },
                    "relationships": {
                      "latest-published-version": {
                        "data": {
                          "type": "inquiry-template-version",
                          "id": "itmplv_ABC123"
                        }
                      }
                    }
                  }
                ]
              },
              "created-at": "2024-02-15T23:48:17.732Z"
            }
          }
        }
      },
      "inquiry-completed-webhook-body": {
        "value": {
          "data": {
            "type": "event",
            "id": "evt_o9byQRbjygu76Jbtea9wuJ1boP7a",
            "attributes": {
              "name": "inquiry.completed",
              "payload": {
                "data": {
                  "type": "inquiry",
                  "id": "inq_zEx4jL84ShbUyuwX6AzPSqt6",
                  "attributes": {
                    "status": "pending",
                    "reference-id": "abc-123",
                    "note": null,
                    "behaviors": {
                      "request-spoof-attempts": 0,
                      "user-agent-spoof-attempts": 0,
                      "distraction-events": 0,
                      "hesitation-baseline": 29677,
                      "hesitation-count": 3,
                      "hesitation-time": 28752,
                      "shortcut-copies": 0,
                      "shortcut-pastes": 0,
                      "autofill-cancels": 0,
                      "autofill-starts": 0,
                      "devtools-open": false,
                      "completion-time": 40.172463903,
                      "hesitation-percentage": 96.88310813087575,
                      "behavior-threat-level": "low"
                    },
                    "tags": [],
                    "creator": "creator@withpersona.com",
                    "reviewer-comment": null,
                    "created-at": "2023-03-29T19:06:45.000Z",
                    "started-at": "2023-03-30T19:07:01.000Z",
                    "completed-at": null,
                    "failed-at": null,
                    "marked-for-review-at": null,
                    "decisioned-at": null,
                    "expired-at": null,
                    "redacted-at": null,
                    "previous-step-name": "start",
                    "next-step-name": "verification_document",
                    "name-first": "Jane",
                    "name-middle": "Marie",
                    "name-last": "Doe",
                    "birthdate": "1995-09-08",
                    "address-street-1": "123 Main St",
                    "address-street-2": null,
                    "address-city": "San Francisco",
                    "address-subdivision": "California",
                    "address-subdivision-abbr": "CA",
                    "address-postal-code": "94111",
                    "address-postal-code-abbr": "94111",
                    "social-security-number": null,
                    "identification-number": null,
                    "email-address": "jane@doe.com",
                    "phone-number": null,
                    "fields": {
                      "name-first": {
                        "type": "string",
                        "value": "Jane"
                      },
                      "name-middle": {
                        "type": "string",
                        "value": "Marie"
                      },
                      "name-last": {
                        "type": "string",
                        "value": "Doe"
                      },
                      "address-street-1": {
                        "type": "string",
                        "value": "123 Main St"
                      },
                      "address-street-2": {
                        "type": "string",
                        "value": null
                      },
                      "address-city": {
                        "type": "string",
                        "value": "San Francisco"
                      },
                      "address-subdivision": {
                        "type": "string",
                        "value": "California"
                      },
                      "address-postal-code": {
                        "type": "string",
                        "value": "94111"
                      },
                      "address-country-code": {
                        "type": "string",
                        "value": "US"
                      },
                      "birthdate": {
                        "type": "date",
                        "value": "1995-09-08"
                      },
                      "email-address": {
                        "type": "string",
                        "value": "jane@doe.com"
                      },
                      "phone-number": {
                        "type": "string",
                        "value": null
                      },
                      "identification-number": {
                        "type": "string",
                        "value": null
                      }
                    }
                  },
                  "relationships": {
                    "account": {
                      "data": {
                        "type": "account",
                        "id": "act_n2uq9eKMboaCQzu9ALWYcVdN"
                      }
                    },
                    "template": {
                      "data": {}
                    },
                    "inquiry-template": {
                      "data": {
                        "type": "inquiry-template",
                        "id": "itmpl_p8ANAJy9iqadm2buF2xcVgqH"
                      }
                    },
                    "inquiry-template-version": {
                      "data": {
                        "type": "inquiry-template-version",
                        "id": "itmplv_iXhqfNWqwYLAWs9G8Fm8hPfo"
                      }
                    },
                    "reviewer": {
                      "data": {}
                    },
                    "reports": {
                      "data": []
                    },
                    "verifications": {
                      "data": [
                        {
                          "type": "verification/database",
                          "id": "ver_uHDiwtcx3htjajvEaeMjPQcE"
                        }
                      ]
                    },
                    "sessions": {
                      "data": []
                    },
                    "documents": {
                      "data": []
                    },
                    "selfies": {
                      "data": []
                    }
                  }
                },
                "included": [
                  {
                    "type": "inquiry-session",
                    "id": "iqse_ABC123",
                    "attributes": {
                      "status": "expired",
                      "created-at": "2023-07-25T04:15:20.000Z",
                      "started-at": "2023-07-25T05:14:50.000Z",
                      "expired-at": "2023-07-26T05:14:50.000Z",
                      "ip-address": "127.0.0.1",
                      "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36",
                      "os-name": "Mac",
                      "os-full-version": "10.15.7",
                      "device-type": "desktop",
                      "device-name": null,
                      "browser-name": "Chrome",
                      "browser-full-version": "115.0.0.0",
                      "mobile-sdk-name": null,
                      "mobile-sdk-full-version": null,
                      "device-handoff-method": null,
                      "is-proxy": false,
                      "is-tor": false,
                      "is-datacenter": false,
                      "threat-level": "low",
                      "country-code": "US",
                      "country-name": "United States",
                      "region-code": "CA",
                      "region-name": "California",
                      "latitude": 37.7688,
                      "longitude": -122.262
                    },
                    "relationships": {
                      "inquiry": {
                        "data": {
                          "type": "inquiry",
                          "id": "inq_ABC123"
                        }
                      }
                    }
                  },
                  {
                    "type": "inquiry-template",
                    "id": "itmpl_ABC123",
                    "attributes": {
                      "status": "active",
                      "name": "Twilio Desktop"
                    },
                    "relationships": {
                      "latest-published-version": {
                        "data": {
                          "type": "inquiry-template-version",
                          "id": "itmplv_ABC123"
                        }
                      }
                    }
                  }
                ]
              },
              "created-at": "2024-02-15T23:48:17.732Z"
            }
          }
        }
      },
      "inquiry-failed-webhook-body": {
        "value": {
          "data": {
            "type": "event",
            "id": "evt_o9byQRbjygu76Jbtea9wuJ1boP7a",
            "attributes": {
              "name": "inquiry.failed",
              "payload": {
                "data": {
                  "type": "inquiry",
                  "id": "inq_zEx4jL84ShbUyuwX6AzPSqt6",
                  "attributes": {
                    "status": "pending",
                    "reference-id": "abc-123",
                    "note": null,
                    "behaviors": {
                      "request-spoof-attempts": 0,
                      "user-agent-spoof-attempts": 0,
                      "distraction-events": 0,
                      "hesitation-baseline": 29677,
                      "hesitation-count": 3,
                      "hesitation-time": 28752,
                      "shortcut-copies": 0,
                      "shortcut-pastes": 0,
                      "autofill-cancels": 0,
                      "autofill-starts": 0,
                      "devtools-open": false,
                      "completion-time": 40.172463903,
                      "hesitation-percentage": 96.88310813087575,
                      "behavior-threat-level": "low"
                    },
                    "tags": [],
                    "creator": "creator@withpersona.com",
                    "reviewer-comment": null,
                    "created-at": "2023-03-29T19:06:45.000Z",
                    "started-at": "2023-03-30T19:07:01.000Z",
                    "completed-at": null,
                    "failed-at": null,
                    "marked-for-review-at": null,
                    "decisioned-at": null,
                    "expired-at": null,
                    "redacted-at": null,
                    "previous-step-name": "start",
                    "next-step-name": "verification_document",
                    "name-first": "Jane",
                    "name-middle": "Marie",
                    "name-last": "Doe",
                    "birthdate": "1995-09-08",
                    "address-street-1": "123 Main St",
                    "address-street-2": null,
                    "address-city": "San Francisco",
                    "address-subdivision": "California",
                    "address-subdivision-abbr": "CA",
                    "address-postal-code": "94111",
                    "address-postal-code-abbr": "94111",
                    "social-security-number": null,
                    "identification-number": null,
                    "email-address": "jane@doe.com",
                    "phone-number": null,
                    "fields": {
                      "name-first": {
                        "type": "string",
                        "value": "Jane"
                      },
                      "name-middle": {
                        "type": "string",
                        "value": "Marie"
                      },
                      "name-last": {
                        "type": "string",
                        "value": "Doe"
                      },
                      "address-street-1": {
                        "type": "string",
                        "value": "123 Main St"
                      },
                      "address-street-2": {
                        "type": "string",
                        "value": null
                      },
                      "address-city": {
                        "type": "string",
                        "value": "San Francisco"
                      },
                      "address-subdivision": {
                        "type": "string",
                        "value": "California"
                      },
                      "address-postal-code": {
                        "type": "string",
                        "value": "94111"
                      },
                      "address-country-code": {
                        "type": "string",
                        "value": "US"
                      },
                      "birthdate": {
                        "type": "date",
                        "value": "1995-09-08"
                      },
                      "email-address": {
                        "type": "string",
                        "value": "jane@doe.com"
                      },
                      "phone-number": {
                        "type": "string",
                        "value": null
                      },
                      "identification-number": {
                        "type": "string",
                        "value": null
                      }
                    }
                  },
                  "relationships": {
                    "account": {
                      "data": {
                        "type": "account",
                        "id": "act_n2uq9eKMboaCQzu9ALWYcVdN"
                      }
                    },
                    "template": {
                      "data": {}
                    },
                    "inquiry-template": {
                      "data": {
                        "type": "inquiry-template",
                        "id": "itmpl_p8ANAJy9iqadm2buF2xcVgqH"
                      }
                    },
                    "inquiry-template-version": {
                      "data": {
                        "type": "inquiry-template-version",
                        "id": "itmplv_iXhqfNWqwYLAWs9G8Fm8hPfo"
                      }
                    },
                    "reviewer": {
                      "data": {}
                    },
                    "reports": {
                      "data": []
                    },
                    "verifications": {
                      "data": [
                        {
                          "type": "verification/database",
                          "id": "ver_uHDiwtcx3htjajvEaeMjPQcE"
                        }
                      ]
                    },
                    "sessions": {
                      "data": []
                    },
                    "documents": {
                      "data": []
                    },
                    "selfies": {
                      "data": []
                    }
                  }
                },
                "included": [
                  {
                    "type": "inquiry-session",
                    "id": "iqse_ABC123",
                    "attributes": {
                      "status": "expired",
                      "created-at": "2023-07-25T04:15:20.000Z",
                      "started-at": "2023-07-25T05:14:50.000Z",
                      "expired-at": "2023-07-26T05:14:50.000Z",
                      "ip-address": "127.0.0.1",
                      "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36",
                      "os-name": "Mac",
                      "os-full-version": "10.15.7",
                      "device-type": "desktop",
                      "device-name": null,
                      "browser-name": "Chrome",
                      "browser-full-version": "115.0.0.0",
                      "mobile-sdk-name": null,
                      "mobile-sdk-full-version": null,
                      "device-handoff-method": null,
                      "is-proxy": false,
                      "is-tor": false,
                      "is-datacenter": false,
                      "threat-level": "low",
                      "country-code": "US",
                      "country-name": "United States",
                      "region-code": "CA",
                      "region-name": "California",
                      "latitude": 37.7688,
                      "longitude": -122.262
                    },
                    "relationships": {
                      "inquiry": {
                        "data": {
                          "type": "inquiry",
                          "id": "inq_ABC123"
                        }
                      }
                    }
                  },
                  {
                    "type": "inquiry-template",
                    "id": "itmpl_ABC123",
                    "attributes": {
                      "status": "active",
                      "name": "Twilio Desktop"
                    },
                    "relationships": {
                      "latest-published-version": {
                        "data": {
                          "type": "inquiry-template-version",
                          "id": "itmplv_ABC123"
                        }
                      }
                    }
                  }
                ]
              },
              "created-at": "2024-02-15T23:48:17.732Z"
            }
          }
        }
      },
      "inquiry-marked-for-review-webhook-body": {
        "value": {
          "data": {
            "type": "event",
            "id": "evt_o9byQRbjygu76Jbtea9wuJ1boP7a",
            "attributes": {
              "name": "inquiry.marked-for-review",
              "payload": {
                "data": {
                  "type": "inquiry",
                  "id": "inq_zEx4jL84ShbUyuwX6AzPSqt6",
                  "attributes": {
                    "status": "pending",
                    "reference-id": "abc-123",
                    "note": null,
                    "behaviors": {
                      "request-spoof-attempts": 0,
                      "user-agent-spoof-attempts": 0,
                      "distraction-events": 0,
                      "hesitation-baseline": 29677,
                      "hesitation-count": 3,
                      "hesitation-time": 28752,
                      "shortcut-copies": 0,
                      "shortcut-pastes": 0,
                      "autofill-cancels": 0,
                      "autofill-starts": 0,
                      "devtools-open": false,
                      "completion-time": 40.172463903,
                      "hesitation-percentage": 96.88310813087575,
                      "behavior-threat-level": "low"
                    },
                    "tags": [],
                    "creator": "creator@withpersona.com",
                    "reviewer-comment": null,
                    "created-at": "2023-03-29T19:06:45.000Z",
                    "started-at": "2023-03-30T19:07:01.000Z",
                    "completed-at": null,
                    "failed-at": null,
                    "marked-for-review-at": null,
                    "decisioned-at": null,
                    "expired-at": null,
                    "redacted-at": null,
                    "previous-step-name": "start",
                    "next-step-name": "verification_document",
                    "name-first": "Jane",
                    "name-middle": "Marie",
                    "name-last": "Doe",
                    "birthdate": "1995-09-08",
                    "address-street-1": "123 Main St",
                    "address-street-2": null,
                    "address-city": "San Francisco",
                    "address-subdivision": "California",
                    "address-subdivision-abbr": "CA",
                    "address-postal-code": "94111",
                    "address-postal-code-abbr": "94111",
                    "social-security-number": null,
                    "identification-number": null,
                    "email-address": "jane@doe.com",
                    "phone-number": null,
                    "fields": {
                      "name-first": {
                        "type": "string",
                        "value": "Jane"
                      },
                      "name-middle": {
                        "type": "string",
                        "value": "Marie"
                      },
                      "name-last": {
                        "type": "string",
                        "value": "Doe"
                      },
                      "address-street-1": {
                        "type": "string",
                        "value": "123 Main St"
                      },
                      "address-street-2": {
                        "type": "string",
                        "value": null
                      },
                      "address-city": {
                        "type": "string",
                        "value": "San Francisco"
                      },
                      "address-subdivision": {
                        "type": "string",
                        "value": "California"
                      },
                      "address-postal-code": {
                        "type": "string",
                        "value": "94111"
                      },
                      "address-country-code": {
                        "type": "string",
                        "value": "US"
                      },
                      "birthdate": {
                        "type": "date",
                        "value": "1995-09-08"
                      },
                      "email-address": {
                        "type": "string",
                        "value": "jane@doe.com"
                      },
                      "phone-number": {
                        "type": "string",
                        "value": null
                      },
                      "identification-number": {
                        "type": "string",
                        "value": null
                      }
                    }
                  },
                  "relationships": {
                    "account": {
                      "data": {
                        "type": "account",
                        "id": "act_n2uq9eKMboaCQzu9ALWYcVdN"
                      }
                    },
                    "template": {
                      "data": {}
                    },
                    "inquiry-template": {
                      "data": {
                        "type": "inquiry-template",
                        "id": "itmpl_p8ANAJy9iqadm2buF2xcVgqH"
                      }
                    },
                    "inquiry-template-version": {
                      "data": {
                        "type": "inquiry-template-version",
                        "id": "itmplv_iXhqfNWqwYLAWs9G8Fm8hPfo"
                      }
                    },
                    "reviewer": {
                      "data": {}
                    },
                    "reports": {
                      "data": []
                    },
                    "verifications": {
                      "data": [
                        {
                          "type": "verification/database",
                          "id": "ver_uHDiwtcx3htjajvEaeMjPQcE"
                        }
                      ]
                    },
                    "sessions": {
                      "data": []
                    },
                    "documents": {
                      "data": []
                    },
                    "selfies": {
                      "data": []
                    }
                  }
                },
                "included": [
                  {
                    "type": "inquiry-session",
                    "id": "iqse_ABC123",
                    "attributes": {
                      "status": "expired",
                      "created-at": "2023-07-25T04:15:20.000Z",
                      "started-at": "2023-07-25T05:14:50.000Z",
                      "expired-at": "2023-07-26T05:14:50.000Z",
                      "ip-address": "127.0.0.1",
                      "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36",
                      "os-name": "Mac",
                      "os-full-version": "10.15.7",
                      "device-type": "desktop",
                      "device-name": null,
                      "browser-name": "Chrome",
                      "browser-full-version": "115.0.0.0",
                      "mobile-sdk-name": null,
                      "mobile-sdk-full-version": null,
                      "device-handoff-method": null,
                      "is-proxy": false,
                      "is-tor": false,
                      "is-datacenter": false,
                      "threat-level": "low",
                      "country-code": "US",
                      "country-name": "United States",
                      "region-code": "CA",
                      "region-name": "California",
                      "latitude": 37.7688,
                      "longitude": -122.262
                    },
                    "relationships": {
                      "inquiry": {
                        "data": {
                          "type": "inquiry",
                          "id": "inq_ABC123"
                        }
                      }
                    }
                  },
                  {
                    "type": "inquiry-template",
                    "id": "itmpl_ABC123",
                    "attributes": {
                      "status": "active",
                      "name": "Twilio Desktop"
                    },
                    "relationships": {
                      "latest-published-version": {
                        "data": {
                          "type": "inquiry-template-version",
                          "id": "itmplv_ABC123"
                        }
                      }
                    }
                  }
                ]
              },
              "created-at": "2024-02-15T23:48:17.732Z"
            }
          }
        }
      },
      "inquiry-approved-webhook-body": {
        "value": {
          "data": {
            "type": "event",
            "id": "evt_o9byQRbjygu76Jbtea9wuJ1boP7a",
            "attributes": {
              "name": "inquiry.approved",
              "payload": {
                "data": {
                  "type": "inquiry",
                  "id": "inq_zEx4jL84ShbUyuwX6AzPSqt6",
                  "attributes": {
                    "status": "pending",
                    "reference-id": "abc-123",
                    "note": null,
                    "behaviors": {
                      "request-spoof-attempts": 0,
                      "user-agent-spoof-attempts": 0,
                      "distraction-events": 0,
                      "hesitation-baseline": 29677,
                      "hesitation-count": 3,
                      "hesitation-time": 28752,
                      "shortcut-copies": 0,
                      "shortcut-pastes": 0,
                      "autofill-cancels": 0,
                      "autofill-starts": 0,
                      "devtools-open": false,
                      "completion-time": 40.172463903,
                      "hesitation-percentage": 96.88310813087575,
                      "behavior-threat-level": "low"
                    },
                    "tags": [],
                    "creator": "creator@withpersona.com",
                    "reviewer-comment": null,
                    "created-at": "2023-03-29T19:06:45.000Z",
                    "started-at": "2023-03-30T19:07:01.000Z",
                    "completed-at": null,
                    "failed-at": null,
                    "marked-for-review-at": null,
                    "decisioned-at": null,
                    "expired-at": null,
                    "redacted-at": null,
                    "previous-step-name": "start",
                    "next-step-name": "verification_document",
                    "name-first": "Jane",
                    "name-middle": "Marie",
                    "name-last": "Doe",
                    "birthdate": "1995-09-08",
                    "address-street-1": "123 Main St",
                    "address-street-2": null,
                    "address-city": "San Francisco",
                    "address-subdivision": "California",
                    "address-subdivision-abbr": "CA",
                    "address-postal-code": "94111",
                    "address-postal-code-abbr": "94111",
                    "social-security-number": null,
                    "identification-number": null,
                    "email-address": "jane@doe.com",
                    "phone-number": null,
                    "fields": {
                      "name-first": {
                        "type": "string",
                        "value": "Jane"
                      },
                      "name-middle": {
                        "type": "string",
                        "value": "Marie"
                      },
                      "name-last": {
                        "type": "string",
                        "value": "Doe"
                      },
                      "address-street-1": {
                        "type": "string",
                        "value": "123 Main St"
                      },
                      "address-street-2": {
                        "type": "string",
                        "value": null
                      },
                      "address-city": {
                        "type": "string",
                        "value": "San Francisco"
                      },
                      "address-subdivision": {
                        "type": "string",
                        "value": "California"
                      },
                      "address-postal-code": {
                        "type": "string",
                        "value": "94111"
                      },
                      "address-country-code": {
                        "type": "string",
                        "value": "US"
                      },
                      "birthdate": {
                        "type": "date",
                        "value": "1995-09-08"
                      },
                      "email-address": {
                        "type": "string",
                        "value": "jane@doe.com"
                      },
                      "phone-number": {
                        "type": "string",
                        "value": null
                      },
                      "identification-number": {
                        "type": "string",
                        "value": null
                      }
                    }
                  },
                  "relationships": {
                    "account": {
                      "data": {
                        "type": "account",
                        "id": "act_n2uq9eKMboaCQzu9ALWYcVdN"
                      }
                    },
                    "template": {
                      "data": {}
                    },
                    "inquiry-template": {
                      "data": {
                        "type": "inquiry-template",
                        "id": "itmpl_p8ANAJy9iqadm2buF2xcVgqH"
                      }
                    },
                    "inquiry-template-version": {
                      "data": {
                        "type": "inquiry-template-version",
                        "id": "itmplv_iXhqfNWqwYLAWs9G8Fm8hPfo"
                      }
                    },
                    "reviewer": {
                      "data": {}
                    },
                    "reports": {
                      "data": []
                    },
                    "verifications": {
                      "data": [
                        {
                          "type": "verification/database",
                          "id": "ver_uHDiwtcx3htjajvEaeMjPQcE"
                        }
                      ]
                    },
                    "sessions": {
                      "data": []
                    },
                    "documents": {
                      "data": []
                    },
                    "selfies": {
                      "data": []
                    }
                  }
                },
                "included": [
                  {
                    "type": "inquiry-session",
                    "id": "iqse_ABC123",
                    "attributes": {
                      "status": "expired",
                      "created-at": "2023-07-25T04:15:20.000Z",
                      "started-at": "2023-07-25T05:14:50.000Z",
                      "expired-at": "2023-07-26T05:14:50.000Z",
                      "ip-address": "127.0.0.1",
                      "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36",
                      "os-name": "Mac",
                      "os-full-version": "10.15.7",
                      "device-type": "desktop",
                      "device-name": null,
                      "browser-name": "Chrome",
                      "browser-full-version": "115.0.0.0",
                      "mobile-sdk-name": null,
                      "mobile-sdk-full-version": null,
                      "device-handoff-method": null,
                      "is-proxy": false,
                      "is-tor": false,
                      "is-datacenter": false,
                      "threat-level": "low",
                      "country-code": "US",
                      "country-name": "United States",
                      "region-code": "CA",
                      "region-name": "California",
                      "latitude": 37.7688,
                      "longitude": -122.262
                    },
                    "relationships": {
                      "inquiry": {
                        "data": {
                          "type": "inquiry",
                          "id": "inq_ABC123"
                        }
                      }
                    }
                  },
                  {
                    "type": "inquiry-template",
                    "id": "itmpl_ABC123",
                    "attributes": {
                      "status": "active",
                      "name": "Twilio Desktop"
                    },
                    "relationships": {
                      "latest-published-version": {
                        "data": {
                          "type": "inquiry-template-version",
                          "id": "itmplv_ABC123"
                        }
                      }
                    }
                  }
                ]
              },
              "created-at": "2024-02-15T23:48:17.732Z"
            }
          }
        }
      },
      "inquiry-declined-webhook-body": {
        "value": {
          "data": {
            "type": "event",
            "id": "evt_o9byQRbjygu76Jbtea9wuJ1boP7a",
            "attributes": {
              "name": "inquiry.declined",
              "payload": {
                "data": {
                  "type": "inquiry",
                  "id": "inq_zEx4jL84ShbUyuwX6AzPSqt6",
                  "attributes": {
                    "status": "pending",
                    "reference-id": "abc-123",
                    "note": null,
                    "behaviors": {
                      "request-spoof-attempts": 0,
                      "user-agent-spoof-attempts": 0,
                      "distraction-events": 0,
                      "hesitation-baseline": 29677,
                      "hesitation-count": 3,
                      "hesitation-time": 28752,
                      "shortcut-copies": 0,
                      "shortcut-pastes": 0,
                      "autofill-cancels": 0,
                      "autofill-starts": 0,
                      "devtools-open": false,
                      "completion-time": 40.172463903,
                      "hesitation-percentage": 96.88310813087575,
                      "behavior-threat-level": "low"
                    },
                    "tags": [],
                    "creator": "creator@withpersona.com",
                    "reviewer-comment": null,
                    "created-at": "2023-03-29T19:06:45.000Z",
                    "started-at": "2023-03-30T19:07:01.000Z",
                    "completed-at": null,
                    "failed-at": null,
                    "marked-for-review-at": null,
                    "decisioned-at": null,
                    "expired-at": null,
                    "redacted-at": null,
                    "previous-step-name": "start",
                    "next-step-name": "verification_document",
                    "name-first": "Jane",
                    "name-middle": "Marie",
                    "name-last": "Doe",
                    "birthdate": "1995-09-08",
                    "address-street-1": "123 Main St",
                    "address-street-2": null,
                    "address-city": "San Francisco",
                    "address-subdivision": "California",
                    "address-subdivision-abbr": "CA",
                    "address-postal-code": "94111",
                    "address-postal-code-abbr": "94111",
                    "social-security-number": null,
                    "identification-number": null,
                    "email-address": "jane@doe.com",
                    "phone-number": null,
                    "fields": {
                      "name-first": {
                        "type": "string",
                        "value": "Jane"
                      },
                      "name-middle": {
                        "type": "string",
                        "value": "Marie"
                      },
                      "name-last": {
                        "type": "string",
                        "value": "Doe"
                      },
                      "address-street-1": {
                        "type": "string",
                        "value": "123 Main St"
                      },
                      "address-street-2": {
                        "type": "string",
                        "value": null
                      },
                      "address-city": {
                        "type": "string",
                        "value": "San Francisco"
                      },
                      "address-subdivision": {
                        "type": "string",
                        "value": "California"
                      },
                      "address-postal-code": {
                        "type": "string",
                        "value": "94111"
                      },
                      "address-country-code": {
                        "type": "string",
                        "value": "US"
                      },
                      "birthdate": {
                        "type": "date",
                        "value": "1995-09-08"
                      },
                      "email-address": {
                        "type": "string",
                        "value": "jane@doe.com"
                      },
                      "phone-number": {
                        "type": "string",
                        "value": null
                      },
                      "identification-number": {
                        "type": "string",
                        "value": null
                      }
                    }
                  },
                  "relationships": {
                    "account": {
                      "data": {
                        "type": "account",
                        "id": "act_n2uq9eKMboaCQzu9ALWYcVdN"
                      }
                    },
                    "template": {
                      "data": {}
                    },
                    "inquiry-template": {
                      "data": {
                        "type": "inquiry-template",
                        "id": "itmpl_p8ANAJy9iqadm2buF2xcVgqH"
                      }
                    },
                    "inquiry-template-version": {
                      "data": {
                        "type": "inquiry-template-version",
                        "id": "itmplv_iXhqfNWqwYLAWs9G8Fm8hPfo"
                      }
                    },
                    "reviewer": {
                      "data": {}
                    },
                    "reports": {
                      "data": []
                    },
                    "verifications": {
                      "data": [
                        {
                          "type": "verification/database",
                          "id": "ver_uHDiwtcx3htjajvEaeMjPQcE"
                        }
                      ]
                    },
                    "sessions": {
                      "data": []
                    },
                    "documents": {
                      "data": []
                    },
                    "selfies": {
                      "data": []
                    }
                  }
                },
                "included": [
                  {
                    "type": "inquiry-session",
                    "id": "iqse_ABC123",
                    "attributes": {
                      "status": "expired",
                      "created-at": "2023-07-25T04:15:20.000Z",
                      "started-at": "2023-07-25T05:14:50.000Z",
                      "expired-at": "2023-07-26T05:14:50.000Z",
                      "ip-address": "127.0.0.1",
                      "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36",
                      "os-name": "Mac",
                      "os-full-version": "10.15.7",
                      "device-type": "desktop",
                      "device-name": null,
                      "browser-name": "Chrome",
                      "browser-full-version": "115.0.0.0",
                      "mobile-sdk-name": null,
                      "mobile-sdk-full-version": null,
                      "device-handoff-method": null,
                      "is-proxy": false,
                      "is-tor": false,
                      "is-datacenter": false,
                      "threat-level": "low",
                      "country-code": "US",
                      "country-name": "United States",
                      "region-code": "CA",
                      "region-name": "California",
                      "latitude": 37.7688,
                      "longitude": -122.262
                    },
                    "relationships": {
                      "inquiry": {
                        "data": {
                          "type": "inquiry",
                          "id": "inq_ABC123"
                        }
                      }
                    }
                  },
                  {
                    "type": "inquiry-template",
                    "id": "itmpl_ABC123",
                    "attributes": {
                      "status": "active",
                      "name": "Twilio Desktop"
                    },
                    "relationships": {
                      "latest-published-version": {
                        "data": {
                          "type": "inquiry-template-version",
                          "id": "itmplv_ABC123"
                        }
                      }
                    }
                  }
                ]
              },
              "created-at": "2024-02-15T23:48:17.732Z"
            }
          }
        }
      },
      "inquiry-transitioned-webhook-body": {
        "value": {
          "data": {
            "type": "event",
            "id": "evt_o9byQRbjygu76Jbtea9wuJ1boP7a",
            "attributes": {
              "name": "inquiry.transitioned",
              "payload": {
                "data": {
                  "type": "inquiry",
                  "id": "inq_zEx4jL84ShbUyuwX6AzPSqt6",
                  "attributes": {
                    "status": "pending",
                    "reference-id": "abc-123",
                    "note": null,
                    "behaviors": {
                      "request-spoof-attempts": 0,
                      "user-agent-spoof-attempts": 0,
                      "distraction-events": 0,
                      "hesitation-baseline": 29677,
                      "hesitation-count": 3,
                      "hesitation-time": 28752,
                      "shortcut-copies": 0,
                      "shortcut-pastes": 0,
                      "autofill-cancels": 0,
                      "autofill-starts": 0,
                      "devtools-open": false,
                      "completion-time": 40.172463903,
                      "hesitation-percentage": 96.88310813087575,
                      "behavior-threat-level": "low"
                    },
                    "tags": [],
                    "creator": "creator@withpersona.com",
                    "reviewer-comment": null,
                    "created-at": "2023-03-29T19:06:45.000Z",
                    "started-at": "2023-03-30T19:07:01.000Z",
                    "completed-at": null,
                    "failed-at": null,
                    "marked-for-review-at": null,
                    "decisioned-at": null,
                    "expired-at": null,
                    "redacted-at": null,
                    "previous-step-name": "start",
                    "next-step-name": "verification_document",
                    "name-first": "Jane",
                    "name-middle": "Marie",
                    "name-last": "Doe",
                    "birthdate": "1995-09-08",
                    "address-street-1": "123 Main St",
                    "address-street-2": null,
                    "address-city": "San Francisco",
                    "address-subdivision": "California",
                    "address-subdivision-abbr": "CA",
                    "address-postal-code": "94111",
                    "address-postal-code-abbr": "94111",
                    "social-security-number": null,
                    "identification-number": null,
                    "email-address": "jane@doe.com",
                    "phone-number": null,
                    "fields": {
                      "name-first": {
                        "type": "string",
                        "value": "Jane"
                      },
                      "name-middle": {
                        "type": "string",
                        "value": "Marie"
                      },
                      "name-last": {
                        "type": "string",
                        "value": "Doe"
                      },
                      "address-street-1": {
                        "type": "string",
                        "value": "123 Main St"
                      },
                      "address-street-2": {
                        "type": "string",
                        "value": null
                      },
                      "address-city": {
                        "type": "string",
                        "value": "San Francisco"
                      },
                      "address-subdivision": {
                        "type": "string",
                        "value": "California"
                      },
                      "address-postal-code": {
                        "type": "string",
                        "value": "94111"
                      },
                      "address-country-code": {
                        "type": "string",
                        "value": "US"
                      },
                      "birthdate": {
                        "type": "date",
                        "value": "1995-09-08"
                      },
                      "email-address": {
                        "type": "string",
                        "value": "jane@doe.com"
                      },
                      "phone-number": {
                        "type": "string",
                        "value": null
                      },
                      "identification-number": {
                        "type": "string",
                        "value": null
                      }
                    }
                  },
                  "relationships": {
                    "account": {
                      "data": {
                        "type": "account",
                        "id": "act_n2uq9eKMboaCQzu9ALWYcVdN"
                      }
                    },
                    "template": {
                      "data": {}
                    },
                    "inquiry-template": {
                      "data": {
                        "type": "inquiry-template",
                        "id": "itmpl_p8ANAJy9iqadm2buF2xcVgqH"
                      }
                    },
                    "inquiry-template-version": {
                      "data": {
                        "type": "inquiry-template-version",
                        "id": "itmplv_iXhqfNWqwYLAWs9G8Fm8hPfo"
                      }
                    },
                    "reviewer": {
                      "data": {}
                    },
                    "reports": {
                      "data": []
                    },
                    "verifications": {
                      "data": [
                        {
                          "type": "verification/database",
                          "id": "ver_uHDiwtcx3htjajvEaeMjPQcE"
                        }
                      ]
                    },
                    "sessions": {
                      "data": []
                    },
                    "documents": {
                      "data": []
                    },
                    "selfies": {
                      "data": []
                    }
                  }
                },
                "included": [
                  {
                    "type": "inquiry-session",
                    "id": "iqse_ABC123",
                    "attributes": {
                      "status": "expired",
                      "created-at": "2023-07-25T04:15:20.000Z",
                      "started-at": "2023-07-25T05:14:50.000Z",
                      "expired-at": "2023-07-26T05:14:50.000Z",
                      "ip-address": "127.0.0.1",
                      "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36",
                      "os-name": "Mac",
                      "os-full-version": "10.15.7",
                      "device-type": "desktop",
                      "device-name": null,
                      "browser-name": "Chrome",
                      "browser-full-version": "115.0.0.0",
                      "mobile-sdk-name": null,
                      "mobile-sdk-full-version": null,
                      "device-handoff-method": null,
                      "is-proxy": false,
                      "is-tor": false,
                      "is-datacenter": false,
                      "threat-level": "low",
                      "country-code": "US",
                      "country-name": "United States",
                      "region-code": "CA",
                      "region-name": "California",
                      "latitude": 37.7688,
                      "longitude": -122.262
                    },
                    "relationships": {
                      "inquiry": {
                        "data": {
                          "type": "inquiry",
                          "id": "inq_ABC123"
                        }
                      }
                    }
                  },
                  {
                    "type": "inquiry-template",
                    "id": "itmpl_ABC123",
                    "attributes": {
                      "status": "active",
                      "name": "Twilio Desktop"
                    },
                    "relationships": {
                      "latest-published-version": {
                        "data": {
                          "type": "inquiry-template-version",
                          "id": "itmplv_ABC123"
                        }
                      }
                    }
                  }
                ]
              },
              "created-at": "2024-02-15T23:48:17.732Z"
            }
          }
        }
      }
    },
    "requestBodies": {
      "api-key-request": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "data": {
                  "properties": {
                    "attributes": {
                      "properties": {
                        "name": {
                          "description": "Human-readable name of the API key",
                          "type": "string"
                        },
                        "note": {
                          "description": "Human readable context about the use of the API key",
                          "type": "string"
                        },
                        "api-version": {
                          "description": "Server API version",
                          "type": "string"
                        },
                        "api-key-inflection": {
                          "description": "Default API response key inflection",
                          "type": "string"
                        },
                        "api-attributes-blocklist": {
                          "description": "Attributes blocked from API responses",
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "ip-address-allowlist": {
                          "description": "IP addresses permitted for use by the API key",
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "permissions": {
                          "description": "Abilities permitted to the API key",
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "file-access-token-expires-in": {
                          "description": "How soon any file access tokens returned in API responses expire",
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            }
          }
        }
      },
      "list-item-importer-csv-request": {
        "content": {
          "multipart/form-data": {
            "schema": {
              "properties": {
                "data": {
                  "properties": {
                    "attributes": {
                      "properties": {
                        "file": {
                          "type": "string",
                          "contentMediaType": "application/octet-stream"
                        },
                        "list-id": {
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            }
          },
          "application/json": {
            "schema": {
              "properties": {
                "data": {
                  "properties": {
                    "attributes": {
                      "properties": {
                        "file": {
                          "properties": {
                            "data": {
                              "description": "Base64 encoded file",
                              "format": "binary",
                              "type": "string"
                            },
                            "filename": {
                              "description": "Name of file",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "list-id": {
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            }
          }
        }
      },
      "inquiries-tag-request": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "meta": {
                  "properties": {
                    "tag-name": {
                      "type": "string",
                      "examples": [
                        "apple",
                        "orange",
                        "banana"
                      ]
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            }
          }
        }
      },
      "inquiries-review-request": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "meta": {
                  "properties": {
                    "comment": {
                      "description": "Unstructured comment for auditing purposes",
                      "examples": [
                        "A comment about this inquiry"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            }
          }
        }
      }
    }
  }
}